# Korean translation for the seafile-docs packges
# This file is distributed under the same license as the seafile-docs package.
# Seong-ho Cho <darkcircle.0426@gmail.com>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: seafile-docs\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2016-05-05 03:40:23+0900\n"
"PO-Revision-Date: 2016-05-05 03:45+0900\n"
"Last-Translator: Seong-ho Cho <darkcircle.0426@gmail.com>\n"
"Language-Team: Korean <darkcircle.0426@gmail.com>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.7\n"
"X-Poedit-SourceCharset: UTF-8\n"

# header
#: deploy/README.md:1
msgid "# Deploying Seafile under Linux"
msgstr "# 리눅스에서 Seafile 가동하기"

#: deploy/README.md:3
msgid "Here we describe how to deploy Seafile from prebuild binary packages."
msgstr ""
"여기서는 미리 빌드한 Seafile 바이너리 꾸러미를 가동하는 방법을 설명하겠습니"
"다."

# header
#: deploy/README.md:5
msgid "### Deploy Seafile in Home/Personal Environment"
msgstr "### 가정/개인 환경에서 Seafile 가동하기"

# unordered list
#: deploy/README.md:7
msgid "* [Deploying Seafile with SQLite](using_sqlite.md)"
msgstr "* [SQLite와 Seafile 가동하기](using_sqlite.md)"

# header
#: deploy/README.md:9
msgid "### Deploy Seafile in Production/Enterprise Environment"
msgstr "### 상업/기업체 환경에서 Seafile 가동하기"

#: deploy/README.md:11
msgid ""
"In production environment we recommend using MySQL as the database and "
"config Seafile web behing Nginx or Apache. For those who are not familiar "
"with Nginx and Apache. We recommend Nginx, since it is easier to config than "
"Apache."
msgstr ""
"상업 환경에서는 MySQL 데이터베이스와 Nginx 또는 Apache를 함께 사용하여 "
"Seafile을 가동하도록 하는 설정을 권장합니다. Nginx와 Apache에 익숙하지 않은 "
"분께는 Apache보다 설정 방법이 쉬운 Nginx를 추천합니다."

#: deploy/README.md:13
msgid ""
"Note: We have prepared an installation script [Deploy Seafile with an "
"installation script](https://forum.seafile-server.org/t/seafile-server-"
"installer-for-production-ready-seafile-ce-and-pro-installations/1464). The "
"installer offer a quick and easy way to set up a production ready Seafile "
"Server using MariaDB, Memcached and NGINX as a reverse proxy in under 5 "
"minutes."
msgstr ""
"참고: [설치 스크립트로 Seafile 가동하기](https://forum.seafile-server.org/t/"
"seafile-server-installer-for-production-ready-seafile-ce-and-pro-"
"installations/1464)에서 설치 스크립트를 준비했습니다. 설치 관리자는 MariaDB, "
"Memcached, 리버스 프록시용 Nginx를 5분 내로 설정하는 빠르고 간편한 수단을 제"
"공합니다."

#: deploy/README.md:15
msgid ""
"You can also install Seafile manually without the installation script as "
"following:"
msgstr ""
"다음과 같이 설치 스크립트를 사용하지 않고 Seafile을 직접 설치할 수도 있습니"
"다:"

#: deploy/README.md:17
msgid "Basic:"
msgstr "기본:"

# unordered list
#: deploy/README.md:19
msgid "* [Deploying Seafile with MySQL](using_mysql.md)"
msgstr "* [Seafile과 MySQL 가동](using_mysql.md)"

# unordered list
#: deploy/README.md:20
msgid "* [Config Seahub with Nginx](deploy_with_nginx.md)"
msgstr "* [Seahub와 Nginx 가동](deploy_with_nginx.md)"

# unordered list
#: deploy/README.md:21
msgid "* [Enabling Https with Nginx](https_with_nginx.md)"
msgstr "* [Nginx https 활성화](https_with_nginx.md)"

# unordered list
#: deploy/README.md:22
msgid "* [Config Seahub with Apache](deploy_with_apache.md)"
msgstr "* [Seahub와 Apache 가동](deploy_with_apache.md)"

# unordered list
#: deploy/README.md:23
msgid "* [Enabling Https with Apache](https_with_apache.md)"
msgstr "* [Apache https 활성화](https_with_apache.md)"

#: deploy/README.md:25
msgid "Advanced:"
msgstr "고급:"

# unordered list
#: deploy/README.md:27
msgid ""
"* [Add Memcached](add_memcached.md), adding memcached is very important if "
"you have more than 50 users."
msgstr ""
"* [Memcached 추가](add_memcached.md), 사용자가 50명 이상일 경우 memcached 추"
"가는 상당히 중요합니다."

# unordered list
#: deploy/README.md:28
msgid "* [Start Seafile at System Bootup](start_seafile_at_system_bootup.md)"
msgstr "* [시스템 부팅시 Seafile 시작하기](start_seafile_at_system_bootup.md)"

# unordered list
#: deploy/README.md:29
msgid "* [Firewall settings](using_firewall.md)"
msgstr "* [방화벽 설정](using_firewall.md)"

# unordered list
#: deploy/README.md:30
msgid "* [Logrotate](using_logrotate.md)"
msgstr "* [Logrotate](using_logrotate.md)"

#: deploy/README.md:32
msgid "User Authentication:"
msgstr "사용자 인증:"

#: deploy/README.md:34
msgid "Seafile supports a few external user authentication methods."
msgstr "Seafile은 몇가지 외부 사용자 인증 방식을 지원합니다."

# unordered list
#: deploy/README.md:36 deploy/using_mysql.md:303
msgid "* [Configure Seafile to use LDAP](using_ldap.md)"
msgstr "* [Seafile LDAP 사용 설정](using_ldap.md)"

# unordered list
#: deploy/README.md:37
msgid "* [Shibboleth Authentication](shibboleth_config.md)"
msgstr "* [시볼레스 인증](shibboleth_config.md)"

#: deploy/README.md:39
msgid "Other Deployment Issues"
msgstr "다른 가동 문제"

# unordered list
#: deploy/README.md:41
msgid "* [Deploy Seafile behind NAT](deploy_seafile_behind_nat.md)"
msgstr "* [NAT망에서 Seafile 가동](deploy_seafile_behind_nat.md)"

# unordered list
#: deploy/README.md:42
msgid ""
"* [Deploy Seahub at Non-root domain](deploy_seahub_at_non-root_domain.md)"
msgstr "* [비 루트 영역에서 Seafile 가동](deploy_seahub_at_non-root_domain.md)"

# unordered list
#: deploy/README.md:43
msgid "* [Migrate From SQLite to MySQL](migrate_from_sqlite_to_mysql.md)"
msgstr "* [SQLite에서 MySQL로 이전](migrate_from_sqlite_to_mysql.md)"

#: deploy/README.md:45
msgid ""
"Check [configuration options](../config/README.md) for server config options "
"like enabling user registration."
msgstr ""
"사용자 등록 활성화 같은 서버 설정 항목은 [설정 항목](../config/README.md)을 "
"확인하십시오."

#: deploy/README.md:47
msgid "**Read here** if you have troubles setting up Seafile server"
msgstr "Seafile 서버 설치에 문제가 있다면 **이 부분을 읽으십시오**"

# ordered list
#: deploy/README.md:49
msgid ""
"1. Read [Seafile Server Components Overview](../overview/components.md) to "
"understand how Seafile server works. This will save you a lot of time."
msgstr ""
"1. [Seafile 서버 구성 요소 둘러보기](../overview/components.md)를 읽고 "
"Seafile 서버 동작 방식을 이해하십시오. 상당한 시간을 아낄 수 있습니다."

# ordered list
#: deploy/README.md:50
msgid ""
"2. [Common Problems for Setting up Server]"
"(common_problems_for_setting_up_server.md)"
msgstr ""
"2. [서버 설치 과정의 일반 문제](common_problems_for_setting_up_server.md)"

# ordered list
#: deploy/README.md:51
msgid "3. Go to our [forum](https://forum.seafile-server.org/) for help."
msgstr ""
"3. [포럼](https://forum.seafile-server.org/)으로 가서 도움을 받으십시오."

# header
#: deploy/README.md:53
msgid "## Upgrade Seafile Server"
msgstr "## Seafile 서버 업그레이드"

# unordered list
#: deploy/README.md:55
msgid "* [Upgrade Seafile server](upgrade.md)"
msgstr "* [Seafile 서버 업그레이드](upgrade.md)"

# header
#: deploy/README.md:57
msgid "## For those that want to package Seafile server"
msgstr "## Seafile 서버 꾸러미 처리 사용자"

#: deploy/README.md:59
msgid ""
"If you want to package seafile yourself, (e.g. for your favorite Linux "
"distribution), you should always use the correspondent tags:"
msgstr ""
"Seafile 꾸러미를 직접 구성하려면(예: 원하는 리눅스 배포판용), 항상 다음 각각"
"의 태그를 사용해야합니다:"

# unordered list
#: deploy/README.md:61
msgid ""
"* When we release a new version of seafile client, say 3.0.1, we will add "
"tags `v3.0.1` to ccnet, seafile and seafile-client."
msgstr ""
"* 예를 들어 3.0.1버전의 Seafile 클라이언트 새 버전을 출시하면 `v3.0.1` 태그"
"를 ccnet, Seafile, Seafile-client에 추가합니다."

# unordered list
#: deploy/README.md:62
msgid ""
"* Likewise, when we release a new version of seafile server, say 3.0.1, we "
"will add tags `v3.0.1-server` to ccnet, seafile and seahub."
msgstr ""
"* 이와 비슷하게 3.0.1버전의 Seafile 서버 새 버전을 출시했다면 `v3.0.1-server`"
"태그를 ccnet, Seafile, Seahub에 추가합니다."

# unordered list
#: deploy/README.md:63
msgid "* For libsearpc, we always use tag `v3.0-latest`."
msgstr "* libsearpc는 항상 `v3.0-latest` 태그를 사용합니다."

#: deploy/README.md:65
msgid ""
"**Note**: The version numbers of each project has nothing to do with the tag "
"name."
msgstr "**참고**: 각 프로젝트의 버전 번호는 태그 이름으로 정하지 않습니다."

# header
#: deploy/add_memcached.md:1
msgid "# Add memcached"
msgstr "# memcached 추가"

#: deploy/add_memcached.md:3
msgid ""
"Seahub caches items (avatars, profiles, etc) on the file system in /tmp/"
"seahub_cache/ by default. You can replace it with Memcached. You need to "
"install"
msgstr ""
"Seahub는 기본적으로 /tmp/seahub_cache에 사용자 계정 항목(아바타, 프로파일 등)"
"을 캐싱합니다. 이 부분을 memcached로 대체할 수 있습니다. 다음 항목을 설치하시"
"고"

# unordered list
#: deploy/add_memcached.md:5
msgid "* memcached"
msgstr "* memcached"

# unordered list
#: deploy/add_memcached.md:6
msgid "* python memcached module (python-memcache or python-memcached)"
msgstr "* 파이썬 memcached 모듈(python-memcache 또는 python-memcached)"

#: deploy/add_memcached.md:8
msgid "Then add the following lines to **seahub_settings.py**."
msgstr "다음 줄을 **seahub_settings.py**에 추가하셔야합니다."

# code block
#: deploy/add_memcached.md:10
msgid ""
"```\n"
"CACHES = {\n"
"    'default': {\n"
"        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n"
"        'LOCATION': '127.0.0.1:11211',\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```\n"
"CACHES = {\n"
"    'default': {\n"
"        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n"
"        'LOCATION': '127.0.0.1:11211',\n"
"    }\n"
"}\n"
"```"

# header
#: deploy/common_problems_for_setting_up_server.md:1
msgid "# Common Problems for Setting up Server"
msgstr "# 서버 설정 일반 문제"

# header
#: deploy/common_problems_for_setting_up_server.md:3
msgid ""
"#### \"Error when calling the metaclass bases\" during Seafile initialization"
msgstr ""
"#### Seafile을 초기화할 때 \"Error when calling the metaclass bases\" 오류 발"
"생"

#: deploy/common_problems_for_setting_up_server.md:5
msgid ""
"Seafile uses Django 1.5, which requires Python 2.6.5+. Make sure your Python "
"version is 2.7."
msgstr ""
"Seafile은 파이썬 2.6.5 이상이 필요한 장고 1.5를 사용합니다. 파이썬 버전이 2.7"
"인지 확인하십시오."

# header
#: deploy/common_problems_for_setting_up_server.md:7
msgid ""
"#### Seahub.sh can't start, the error message contains: \"Could not import "
"settings 'seahub.settings', libpython2.7.so.1.0: can not open shared object "
"file\""
msgstr ""
"#### 다음 에러 메시지를 출력하며 Seahub.sh를 시작할 수 없음: \"Could not "
"import settings 'seahub.settings', libpython2.7.so.1.0: can not open shared "
"object file\""

#: deploy/common_problems_for_setting_up_server.md:9
msgid ""
"You probably encounter this problem in Ubuntu 14.04. Seafile pro edition "
"requires libpython2.7. Install it by:"
msgstr ""
"아마도 우분투 14.04에서 나타나는 문제인 것 같습니다. Seafile 전문가판에서는 "
"libpython2.6이 필요합니다. 다음 명령으로 설치하십시오:"

# code block
#: deploy/common_problems_for_setting_up_server.md:11
msgid ""
"```\n"
"sudo apt-get install libpython2.7\n"
"```"
msgstr ""
"```\n"
"sudo apt-get install libpython2.7\n"
"```"

# header
#: deploy/common_problems_for_setting_up_server.md:15
msgid "#### Failed to upload/download file online"
msgstr "#### 온라인 파일 업로드/다운로드 실패"

# unordered list
#: deploy/common_problems_for_setting_up_server.md:17
msgid ""
"* Check your SERVICE_URL setting in ccnet.conf and FILE_SERVER_ROOT setting "
"in seahub_settings.py"
msgstr ""
"* ccnet.conf의 SERVICE_URL 설정과 seahub_settings.py의 FILE_SERVER_ROOT 설정"
"을 확인하십시오"

# unordered list
#: deploy/common_problems_for_setting_up_server.md:18
msgid "* Make sure you firewall for seafile fileserver is opened."
msgstr "* Seafile 파일 서버의 포트를 방화벽에서 열어두었는지 확인하십시오."

# unordered list
#: deploy/common_problems_for_setting_up_server.md:19
msgid ""
"* Using chrome/firefox debug mode to find which link is given when click "
"download button and what's wrong with this link"
msgstr ""
"* 크롬/파이어폭스 디버깅 모드를 활용하여 다운로드 단추를 눌렀을 때 어떤 링크"
"가 나타나고 링크에 어떤 문제가 있는지 확인하십시오"

# header
#: deploy/common_problems_for_setting_up_server.md:22
msgid "#### Error on Apache log: \"File does not exist: /var/www/seahub.fcgi\""
msgstr ""
"#### Apache 로그 오류가 있습니다: \"File does not exist: /var/www/seahub.fcgi"
"\""

#: deploy/common_problems_for_setting_up_server.md:24
msgid ""
"Make sure you use \"FastCGIExternalServer /var/www/seahub.fcgi -host "
"127.0.0.1:8000\" in httpd.conf or apache2.conf, especially the \"/var/www/"
"seahub.fcgi\" part."
msgstr ""
"httpd.conf 또는 apache2.conf에서 \"FastCGIExternalServer /var/www/seahub."
"fcgi -host 127.0.0.1:8000\" 설정을 사용했는지, \"/var/www/seahub.fcgi\" 부분"
"을 적어두었는지 확인하십시오."

# header
#: deploy/common_problems_for_setting_up_server.md:26
msgid ""
"#### Error on Apache log: \"FastCGI: comm with server \"/var/www/seahub.fcgi"
"\" aborted: idle timeout (30 sec)\""
msgstr ""
"#### 아파치 로그에 다음 오류가 있음: \"FastCGI: comm with server \"/var/www/"
"seahub.fcgi\" aborted: idle timeout (30 sec)\""

#: deploy/common_problems_for_setting_up_server.md:28
msgid "When accessing file history in huge libraries you get HTTP 500 Error."
msgstr ""
"큰 규모의 라이브러리에서 파일 기록에 접근할 때 HTTP 500 오류가 발생하는 경우"
"입니다."

#: deploy/common_problems_for_setting_up_server.md:30
msgid "Solution:"
msgstr "해결책:"

#: deploy/common_problems_for_setting_up_server.md:32
msgid ""
"Change in in httpd.conf or apache2.conf from \"FastCGIExternalServer /var/"
"www/seahub.fcgi -host 127.0.0.1:8000\" to \"FastCGIExternalServer /var/www/"
"seahub.fcgi -host 127.0.0.1:8000 -idle-timeout 60\""
msgstr ""
"httpd.conf 또는 apache2.conf에서 \"FastCGIExternalServer /var/www/seahub."
"fcgi -host 127.0.0.1:8000\"을 \"FastCGIExternalServer /var/www/seahub.fcgi -"
"host 127.0.0.1:8000 -idle-timeout 60\"으로 바꾸십시오"

# header
#: deploy/common_problems_for_setting_up_server.md:34
msgid ""
"#### Seafile with Apache / HTTPS has text only (no CSS formatting / images)"
msgstr ""
"#### Apache/https로 동작하는 Seafile이 텍스트만 나타남(CSS 포매팅/그림 없음)"

#: deploy/common_problems_for_setting_up_server.md:36
msgid ""
"The media folder (Alias location identified in /etc/apache2/sites-"
"enabled/000-default (Ubuntu)) has inappropriate permissions"
msgstr ""
"media 폴더(우분투에서 /etc/apache2/sites-enabled/000-default에 지정한 Alias "
"위치)) 에 부적절한 권한을 부여했기 때문일 수도 있습니다"

#: deploy/common_problems_for_setting_up_server.md:38
msgid "Solutions:"
msgstr "해결책:"

# ordered list
#: deploy/common_problems_for_setting_up_server.md:40
msgid "1. Run installation script as non-root user"
msgstr "1. 비 루트 사용자로 설치 스크립트를 실행하십시오."

# ordered list
#: deploy/common_problems_for_setting_up_server.md:41
msgid ""
"2. Copy /media folder to var/www/ and edit the Alias location in /etc/"
"apache2/sites-enabled/000-default"
msgstr ""
"2. /media 폴더를 /var/www로 복사하고 /etc/apache2/sites-enabled/000-default "
"설정 파일의 Alias 위치를 편집하십시오"

# header
#: deploy/db.md:1 deploy/server.md:1 deploy/upgrade.md:1 deploy/using_fuse.md:1
#: deploy/using_postgresql.md:1
msgid "# Seafile"
msgstr "# Seafile"

#: deploy/db.md:2
msgid "## Customize database"
msgstr "## 데이터베이스 개별 설정"

# unordered list
#: deploy/db.md:4
msgid "* [Using MySQL](deploy/using_msql.md)"
msgstr "* [MySQL 사용](deploy/using_msql.md)"

# unordered list
#: deploy/db.md:5
msgid "* [Using PostgreSQL](deploy/using_postgresql.md)"
msgstr "* [PostgreSQL 사용](deploy/using_postgresql.md)"

# header
#: deploy/deploy_http_sync.md:1
msgid "# Configure Syncing via HTTP Protocol"
msgstr "# http 프로토콜로 동기화하도록 설정"

#: deploy/deploy_http_sync.md:3
msgid ""
"Starting from version 4.0.0, Seafile supports file syncing via HTTP "
"protocol. The server configuration depends on which version of Seafile "
"client do you use."
msgstr ""
"4.0.0 버전부터 Seafile에서는 http 프로토콜 파일 동기화를 지원합니다. 서버 설"
"정은 어떤 Seafile 클라이언트 버전을 사용하느냐에 따라 다릅니다."

#: deploy/deploy_http_sync.md:5
msgid ""
"Client version >= 4.2 use http syncing protocol exclusively, the cases are"
msgstr ""
"4.2 버전 이상의 클라이언트에서는 배타적으로 http 동기화 프로토콜을 사용하는"
"데, 다음의 경우가 이에 해당합니다"

# unordered list
#: deploy/deploy_http_sync.md:7
msgid ""
"* If you're not using https, you don't have to configure Nginx or Apache to "
"use http sync. The client can talk directly with the file server on port "
"8082."
msgstr ""
"* https를 사용하지 않는다면 Nginx 또는 Apache에 http 동기화를 수행하도록 설정"
"할 필요가 없습니다. 클라이언트에서는 8082 포트로 파일 서버와 바로 통신할 수 "
"있습니다."

# unordered list
#: deploy/deploy_http_sync.md:8
msgid "* If you're using https, you have to configure Nginx or Apache."
msgstr "* https를 사용한다면 Nginx 또는 Apache를 설정해야합니다."

#: deploy/deploy_http_sync.md:10
msgid "If you'are using clients version < 4.2,"
msgstr "4.2 미만의 클라이언트 버전을 사용한다면,"

# unordered list
#: deploy/deploy_http_sync.md:12
msgid ""
"* If you want to use http(s) sync, you have to configure Nginx or Apache."
msgstr "* http(s) 동기화를 사용할 경우 Nginx 또는 Apache를 설정해야합니다."

# unordered list
#: deploy/deploy_http_sync.md:13
msgid ""
"* If you don't configure Nginx or Apache, the client falls back to use non-"
"http syncing protocol (using port 10001 and 12001)."
msgstr ""
"* Nginx 또는 Apache를 설정하지 않았다면, 비 http 기반 동기화 프로토콜을 대신 "
"사용합니다(10001 및 12001 포트 사용)."

#: deploy/deploy_http_sync.md:15
msgid ""
"Servers >= 4.0 are compatible with all syncing protocols, any version of "
"client should work with the server."
msgstr ""
"4.0 이상의 서버에서는 모든 동기화 프로토콜과 호환되며, 어떤 버전의 클라이언트"
"에서도 이 서버와 동작해야합니다."

# header
#: deploy/deploy_http_sync.md:17
msgid "## Nginx"
msgstr "## Nginx"

#: deploy/deploy_http_sync.md:19
msgid ""
"Follow [this guide](deploy_with_nginx.md) to configure Nginx without HTTPS, "
"or [this guide](https_with_nginx.md) to configure Nginx with HTTPS."
msgstr ""
"https를 사용하지 않도록 Nginx를 설정하려면 [이 안내서](deploy_with_nginx.md)"
"를, https를 사용하도록 Nginx를 설정하려면 [이 안내서](https_with_nginx.md)를 "
"따르십시오."

#: deploy/deploy_http_sync.md:21
msgid "The section in Nginx config file related to HTTP sync is"
msgstr "HTTP 동기화와 관련된 Nginx 설정 파일의 섹션은 다음과 같습니다"

# code block
#: deploy/deploy_http_sync.md:23
msgid ""
"```\n"
"    location /seafhttp {\n"
"        rewrite ^/seafhttp(.*)$ $1 break;\n"
"        proxy_pass http://127.0.0.1:8082;\n"
"        client_max_body_size 0;\n"
"        proxy_connect_timeout  36000s;\n"
"        proxy_read_timeout  36000s;\n"
"    }\n"
"```"
msgstr ""
"```\n"
"    location /seafhttp {\n"
"        rewrite ^/seafhttp(.*)$ $1 break;\n"
"        proxy_pass http://127.0.0.1:8082;\n"
"        client_max_body_size 0;\n"
"        proxy_connect_timeout  36000s;\n"
"        proxy_read_timeout  36000s;\n"
"    }\n"
"```"

#: deploy/deploy_http_sync.md:33
msgid "there are two things to note:"
msgstr "참고해야 할 사항이 두가지가 있습니다:"

# unordered list
#: deploy/deploy_http_sync.md:35
msgid ""
"* You must use the path \"/seafhttp\" for http syncing. This is hard coded "
"in the client."
msgstr ""
"* http 동기화시 \"/seafhttp\" 경로를 사용해야합니다. 클라이언트에 하드코딩 해"
"두었습니다."

# unordered list
#: deploy/deploy_http_sync.md:36
msgid ""
"* You should add the \"client_max_body_size\" configuration. The value "
"should be set to 0 (means no limit) or 100M (suffice for most cases)."
msgstr ""
"* \"client_max_body_size\" 설정을 추가해야합니다. 이 값은 0(제한 없음) 또는 "
"100M(대부분의 경우 적당) 값으로 설정해야합니다."

# header
#: deploy/deploy_http_sync.md:38
msgid "## Apache"
msgstr "## Apache"

#: deploy/deploy_http_sync.md:40
msgid ""
"Follow [this guide](deploy_with_apache.md) to configure Apache without "
"HTTPS, or [this guide](https_with_apache.md) to configure Nginx with HTTPS."
msgstr ""
"https를 사용하지 않도록 Apache를 설정하려면 [이 안내서](deploy_with_apache."
"md)를, https를 사용하도록 Apache를 설정하려면 [이 안내서](https_with_apache."
"md)를 따르십시오."

#: deploy/deploy_http_sync.md:42
msgid "The section in Apache config file related to HTTP sync is"
msgstr "http 동기화와 관련된 Apache 설정 파일 섹션은 다음과 같습니다"

# code block
#: deploy/deploy_http_sync.md:44
msgid ""
"```\n"
"    #\n"
"    # seafile fileserver\n"
"    #\n"
"    ProxyPass /seafhttp http://127.0.0.1:8082\n"
"    ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"    RewriteRule ^/seafhttp - [QSA,L]\n"
"```"
msgstr ""
"```\n"
"    #\n"
"    # seafile fileserver\n"
"    #\n"
"    ProxyPass /seafhttp http://127.0.0.1:8082\n"
"    ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"    RewriteRule ^/seafhttp - [QSA,L]\n"
"```"

#: deploy/deploy_http_sync.md:53
msgid ""
"Note that you must use the path \"/seafhttp\" for http syncing. This is hard "
"coded in the client."
msgstr ""
"참고로 http 프로토록 동기화 기능을 사용하려면 \"/seafhttp\" 경로를 사용해야합"
"니다. 클라이언트에 하드코딩 해두었습니다."

# header
#: deploy/deploy_http_sync.md:55
msgid "## Client Side Configuration for HTTPS"
msgstr "## 클라이언트측 https 설정"

#: deploy/deploy_http_sync.md:57
msgid ""
"If you buy a valid SSL certificate, the syncing should work out of the box. "
"If you use self-signed certificate, when you first add an account on the "
"client, it'll pop up a window for you to confirm the server's certificate. "
"If you choose to accept the certificate, the client will use that for https "
"connection."
msgstr ""
"유효한 SSL 인증서를 구매했다면, 동기화 설정을 따로 해야 합니다. 자체 서명 인"
"증서를 사용할 때 클라이언트에 새 계정을 우선 추가하면 서버 인증서 확인 창이 "
"뜹니다. 인증서 승인을 선택하면, 클라이언트는 https 연결을 활용합니다."

#: deploy/deploy_http_sync.md:59
msgid ""
"The client loads trusted CA list from the system trusted CA store on start. "
"It then combines those CA list with the user accepted certificates. The "
"combined list is then used for certificate verification."
msgstr ""
"클라이언트를 시작할 때 시스템 신뢰 인증서 발급 기관 저장소에서 신뢰 인증서 발"
"급 기관 목록을 불러옵니다. 그 다음 사용자가 승인한 인증서를 인증서 발급 기관 "
"목록에 대응합니다. 이 과정이 끝나면 대응 목록을 인증서 검증에 활용합니다."

#: deploy/deploy_http_sync.md:61
msgid ""
"If you follow certificate generation instruction in [this guide]"
"(https_with_nginx.md) to generate your self-signed certificate, the syncing "
"should work after confirmation."
msgstr ""
"자체 서명 인증서 생성에 [이 안내서](https_with_nginx.md)의 인증서 생성 절차"
"를 따른다면, 확인 과정을 거친 후 동기화 과정이 동작해야합니다."

#: deploy/deploy_http_sync.md:63
msgid ""
"There may be cases when you can't establish https connection to the server. "
"You can try two work-arounds:"
msgstr ""
"서버에 https로 연결할 수 없을 경우 몇가지 이유가 있습니다. 다음 두가지 해결책"
"을 시도해볼 수 있습니다:"

# ordered list
#: deploy/deploy_http_sync.md:65
msgid "1. Add your self-signed certificate to system trusted CA store. "
msgstr ""
"1. 시스템 신뢰 인증 발급 기관 저장소에 자체 서명 인증서를 추가하십시오. "

# ordered list
#: deploy/deploy_http_sync.md:66
msgid ""
"2. Open the client \"settings\" window, in \"advanced\" tab, check \"Do not "
"verifiy server certificate in HTTPS sync\"."
msgstr ""
"2. 클라이언트 \"설정\" 창을 열고, \"고급\" 탭을 누른 다음 \"HTTPS 동기화시 서"
"버 인증서 검증하지 않음\"을 표시하십시오."

# header
#: deploy/deploy_http_sync.md:68
msgid "## FAQ and Trouble Shooting"
msgstr "## 자주 묻는 질문 및 문제 해결"

# header
#: deploy/deploy_http_sync.md:70
msgid "### My Client Doesn't Sync after Upgrading to 4.2.x"
msgstr "### 4.2.x로 업그레이드한 다음 클라이언트에서 동기화하지 않음"

#: deploy/deploy_http_sync.md:72
msgid ""
"Older clients fall back to non-http sync protocol if http sync fails. So you "
"may get the false sense that the old client works with http sync. But "
"actually it doesn't. Client 4.2 use http sync exclusively, so it doesn't "
"sync any more. You have to correctly configure the server for http sync."
msgstr ""
"이전 버전 클라이언트에서는 http 동기화에 실패했을 경우 비 http 동기회 프로토"
"콜로 대신 처리합니다. 따라서 이전 클라이언트의 http 동기화 방식에 대한 오해"
"를 할 수 있습니다. 다만, 실제로는 그렇지 않습니다. 클라이언트 4.2에서는 http "
"동기화를 배타적으로 처리하므로 더이상의 동기화 동작을 진행하지 않습니다. "
"http 동기화를 수행하려면 서버를 제대로 설정해야합니다."

# header
#: deploy/deploy_http_sync.md:74
msgid "### Choosing Ciphers on Nginx/Apache"
msgstr "### Nginx/Apache에서 암호화 방식 설정"

#: deploy/deploy_http_sync.md:76
msgid ""
"You should choose strong ciphers on the server side. The following Nginx "
"cipher list is tested to be working fine:"
msgstr ""
"서버측에 강력한 암호를 설정해야합니다. 다음 Nginx 암호 목록은 잘 동작함을 시"
"험하여 확인했습니다:"

# code block
#: deploy/deploy_http_sync.md:78
msgid ""
"```\n"
"ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:"
"ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n"
"```"
msgstr ""
"```\n"
"ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:"
"ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n"
"```"

#: deploy/deploy_http_sync.md:82
msgid "You may fine tune the list to meet your needs."
msgstr "필요에 따라 목록을 적절히 설정하시는게 좋습니다."

# header
#: deploy/deploy_seafile_behind_nat.md:1
msgid "# Deploy Seafile behind NAT"
msgstr "# NAT 뒤에서 Seafile 가동"

#: deploy/deploy_seafile_behind_nat.md:3
msgid ""
"A lot of people want to deploy a seafile server in their LAN, and access it "
"from the WAN."
msgstr ""
"대부분의 사용자는 LAN에서 Seafile 서버를 가동하고 WAN에서 접근하려고 합니다."

#: deploy/deploy_seafile_behind_nat.md:5
msgid "To achieve this, you need:"
msgstr "이 설정을 해결하려면 다음 항목이 필요합니다:"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:7
msgid "- A router which supports port forwarding"
msgstr "- 포트 포워딩을 지원하는 라우터"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:8
msgid "- Use a dynamic DNS Service"
msgstr "- 동적 DNS 서비스 활용"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:9
msgid "- Modify your seafile server configuration"
msgstr "- Seafile 서버 설정 수정"

# header
#: deploy/deploy_seafile_behind_nat.md:11
msgid "### Table of Contents"
msgstr "### 목차"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:13
msgid "- [Setup the server](deploy_Seafile_behind_NAT.md#setup-the-server)"
msgstr "- [서버 설치](deploy_Seafile_behind_NAT.md#setup-the-server)"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:14
msgid ""
"- [Setup port forwarding in your router](deploy_Seafile_behind_NAT.md#setup-"
"port-forwarding-in-your-router)"
msgstr ""
"- [라우터에서 포트 포워딩 설정](deploy_Seafile_behind_NAT.md#setup-port-"
"forwarding-in-your-router)"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:15
msgid ""
"- [Use a dynamic dns serivce](deploy_Seafile_behind_NAT.md#use-a-dynamic-dns-"
"serivce)"
msgstr ""
"- [동적 DNS 서비스 활용](deploy_Seafile_behind_NAT.md#use-a-dynamic-dns-"
"serivce)"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:16
msgid ""
"- [Modify your seafile configuration](deploy_Seafile_behind_NAT.md#modify-"
"your-seafile-configuration)"
msgstr ""
"- [Seafile 설정 수정](deploy_Seafile_behind_NAT.md#modify-your-seafile-"
"configuration)"

# header
#: deploy/deploy_seafile_behind_nat.md:19
msgid "## Setup the server"
msgstr "## 서버 설정"

#: deploy/deploy_seafile_behind_nat.md:21
msgid ""
"First, you should follow the guide on [Download and Setup Seafile Server]"
"(using_sqlite.md) to setup your Seafile server."
msgstr ""
"우선 [Seafile 서버 다운로드 및 설치](using_sqlite.md)의 안내를 따라 Seafile "
"서버를 설치하십시오."

#: deploy/deploy_seafile_behind_nat.md:23
msgid "Before you continue, make sure:"
msgstr "계속하기 전, 다음을 확인하십시오:"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:25
msgid "- You can visit your seahub website"
msgstr "- Seahub 웹사이트를 볼 수 있는가"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:26
msgid "- You can download/sync a library through your seafile client"
msgstr "- Seafile 클라이언트에서 라이브러리를 다운로드하고 동기화할 수 있는가"

# header
#: deploy/deploy_seafile_behind_nat.md:28
msgid "## Setup Port Forwarding in Your Router"
msgstr "## 라우터의 포트 포워딩 설정"

# header
#: deploy/deploy_seafile_behind_nat.md:30
msgid "### Ensure Your Router Supports Port Forwarding"
msgstr "### 라우터의 포트 포워딩 기능 지원 확인"

#: deploy/deploy_seafile_behind_nat.md:32
msgid "First, ensure your router supports port forwarding."
msgstr "우선 라우터에서 포트 포워딩 기능을 지원하는지 확인하십시오."

# unordered list
#: deploy/deploy_seafile_behind_nat.md:34
msgid ""
"- Login to the web adminstration page of your router. If you don't know how "
"to do this, you should find the instructions on the manual of the router. If "
"you have no maunal, just google **\"XXX router administration page\"** where "
"`XXX` is your router's brand."
msgstr ""
"- 라우터의 웹 관리자 페이지에 로그인하십시오. 어떻게 하는지 모르겠다면 라우터"
"의 설명서 페이지 절차를 찾아보십시오. 설명서가 없다면 XXX 대신의 라우터 브랜"
"드 이름을 넣어 **\"XXX 라우터 관리 페이지\"** 를 구글에서 검색하십시오."

# unordered list
#: deploy/deploy_seafile_behind_nat.md:36
msgid ""
"- Navigate around in the adminstration page, and check if there is a tag "
"which contains a word such as \"forward\", \"advanced\". If your router "
"supports it, chances are that you can find the port forwarding related "
"settings there."
msgstr ""
"- 관리자 페이지를 찾아보신 후, \"포워딩\", \"고급\"과 같은 단어가 있는 태그"
"가 있는지 확인하십시오. 라우터에서 해당 기능을 지원한다면 포트 포워딩 관련 설"
"정을 찾을 수 있습니다."

# header
#: deploy/deploy_seafile_behind_nat.md:38
msgid "### Setup Port Forwarding Rules"
msgstr "### 포트 포워딩 규칙 설정"

#: deploy/deploy_seafile_behind_nat.md:40
msgid ""
"Seafile server is composed of several components. You need to configure port "
"forward for all the components listed below."
msgstr ""
"Seafile 서버는 다양한 구성 요소로 이루어져있습니다. 다음의 모든 항목에 대해 "
"포트 포워딩을 설정해야합니다."

# inline html
#: deploy/deploy_seafile_behind_nat.md:42
msgid ""
"<table>\n"
"<tr>\n"
"  <th>component</th>\n"
"  <th>default port</th>\n"
"</tr>\n"
"<tr>\n"
"  <td>fileserver</td>\n"
"  <td>8082</td>\n"
"</tr>\n"
"<tr>\n"
"  <td>seahub</td>\n"
"  <td>8000</td>\n"
"</tr>\n"
"</table>"
msgstr ""
"<table>\n"
"<tr>\n"
"  <th>구성요소</th>\n"
"  <th>기본 포트 번호</th>\n"
"</tr>\n"
"<tr>\n"
"  <td>fileserver</td>\n"
"  <td>8082</td>\n"
"</tr>\n"
"<tr>\n"
"  <td>seahub</td>\n"
"  <td>8000</td>\n"
"</tr>\n"
"</table>"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:57
msgid ""
"* You don't need to open port 8000 and 8082 if you deploy Seafile behind "
"Apache/Nginx."
msgstr ""
"* Apache/Nginx 뒤에서 Seafile을 가동한다면 8000번과 8002번 포트를 열 필요가 "
"없습니다."

# unordered list
#: deploy/deploy_seafile_behind_nat.md:58
msgid ""
"* If you're not using the default ports, you should adjust the table "
"accroding to your own customiztion."
msgstr ""
"* 기본 포트를 사용하지 않으면 자체 개별 설정에 따라 테이블 설정을 수정해야합"
"니다."

# header
#: deploy/deploy_seafile_behind_nat.md:60
msgid "### How to test if your port forwarding is working"
msgstr "### 포트 포워딩 기능 동작시 시험 방법"

#: deploy/deploy_seafile_behind_nat.md:62
msgid ""
"After you have set the port forwarding rules on your router, you can check "
"whether it works by:"
msgstr ""
"라우터의 포트 포워딩 규칙을 설정한 후 다음 절차를 따라 동작 여부를 확인할 수 "
"있습니다:"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:64
msgid "- Open a command line prompt"
msgstr "- 명령 프롬프트를 여십시오"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:65
msgid ""
"- Get your WAN IP. A convenient way to get your WAN ip is to visit `http://"
"who.is`, which would show you your WAN IP."
msgstr ""
"- WAN IP를 조사하십시오. WAN IP를 확인하는 간편한 방법은 WAN IP를 보여주는 "
"`http://who.is`에 방문하는 방편입니다."

# unordered list
#: deploy/deploy_seafile_behind_nat.md:66
msgid "- Try to connect your seahub server"
msgstr "- Seahub 서버에 연결해보십시오"

# code block
#: deploy/deploy_seafile_behind_nat.md:67
msgid ""
"````\n"
"telnet <Your WAN IP> 8000\n"
"```"
msgstr ""
"````\n"
"telnet <Your WAN IP> 8000\n"
"```"

#: deploy/deploy_seafile_behind_nat.md:71
msgid ""
"If your port forwarding is working, the command above should succeed. "
"Otherwise, you may get a message saying something like *connection refused* "
"or *connection timeout*."
msgstr ""
"포트 포워딩이 동작하면 상단 명령이 제대로 동작해야 합니다. 그렇지 않으면 "
"*connection refused* 또는 *connection timeout* 같은 메시지가 나타납니다."

#: deploy/deploy_seafile_behind_nat.md:73
msgid "If your port forwarding is not working, the reasons may be:"
msgstr "포트 포워딩이 동작하지 않으면, 다음 이유에서일 지도 모릅니다:"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:75
msgid "- You have configured a wrong port forwarding"
msgstr "- 포트 포워딩을 잘못 설정했습니다"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:76
msgid "- Your router may need a restart"
msgstr "- 라우터를 다시 시작해야합니다"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:77
msgid "- You network may be down"
msgstr "- 네트워크 연결이 끊어졌을 수도 있습니다"

# header
#: deploy/deploy_seafile_behind_nat.md:79
msgid "### Set SERVICE_URL"
msgstr "### SERVICE_URL 설정"

#: deploy/deploy_seafile_behind_nat.md:81
msgid ""
"\"SERVICE_URL\" in `ccnet.conf` is used to generate the download/upload link "
"for files when you browse files online. Set it using your WAN IP."
msgstr ""
"`ccnet.conf`의 \"SERVICE_URL\"은 파일을 온라인에서 탐색할 때와 파일의 다운로"
"드/업로드 링크를 만들 때 사용합니다. WAN IP로 설정하십시오."

# code block
#: deploy/deploy_seafile_behind_nat.md:83
msgid ""
"```\n"
"SERVICE_URL = http://<Your WAN IP>:8000\n"
"```"
msgstr ""
"```\n"
"SERVICE_URL = http://<Your WAN IP>:8000\n"
"```"

#: deploy/deploy_seafile_behind_nat.md:87
msgid ""
"Most routers support NAT loopback. When your access Seafile web from "
"intranet, file download/upload still works even when external IP is used."
msgstr ""
"대부분 라우터에서는 NAT 루프백을 지원합니다. 인트라넷에서 Seafile 웹에 접근한"
"다면 외부 IP를 사용해도 파일 다운로드/업로드는 여전히 동작합니다."

# header
#: deploy/deploy_seafile_behind_nat.md:89
msgid "## Use a Dynamic DNS Serivce"
msgstr "## 동적 DNS 서비스 사용"

# header
#: deploy/deploy_seafile_behind_nat.md:91
msgid "### Why use a Dynamic DNS(DDNS) Service?"
msgstr "### 왜 동적 DNS(DDNS) 서비스를 활용하죠?"

#: deploy/deploy_seafile_behind_nat.md:93
msgid ""
"Having done all the steps above, you should be able to visit your seahub "
"server outside your LAN by your WAN IP. But for most people, the WAN IP "
"address is likey to change regularly by their ISP(Internet Serice Provider), "
"which makes this approach impratical."
msgstr ""
"위 모든 과정이 끝나면 LAN 외부에서 WAN IP로 Seahub 서버에 접근할 수 있어야합"
"니다. 하지만 대부분 사람에게 WAN IP 주소는 보통 이런 접근 방식을 활용하지 못"
"하게 ISP(인터넷 서비스 제공 업체)에서 바꿉니다."

#: deploy/deploy_seafile_behind_nat.md:95
msgid ""
"You can use a dynamic DNS(DDNS) Service to overcome this problem. By using a "
"dynamic DNS service, you can visit your seahub by domain name (instead of by "
"IP), and the domain name will always be mapped to your WAN IP address, even "
"if it changes regularly."
msgstr ""
"이 문제를 해결할 목적으로 동적 DNS(DDNS) 서비스를 활용할 수 있습니다. 동적 "
"DNS 서비스를 활용하면, (IP 주소 대신)도메인 이름으로 Seahub 사이트에 접근할 "
"수 있으며, IP 주소가 항시 바뀌더라도 도메인 이름을 WAN IP 주소에 항상 매핑할 "
"수 있습니다."

#: deploy/deploy_seafile_behind_nat.md:97
msgid ""
"There are a dozen of dynamic DNS service providers on the internet. If you "
"don't know what service to choose We recommend using [www.noip.com](http://"
"www.noip.com) since it performs well in our testing."
msgstr ""
"인터넷에 여러 동적 DNS 서비스 제공 업체가 있습니다. 어떤 서비스를 선택할지 모"
"르겠다면, 저희가 테스트 해본 결과 잘 동작하는[www.noip.com](http://www.noip."
"com)을 추천합니다."

#: deploy/deploy_seafile_behind_nat.md:99
msgid ""
"The detailed process is beyond the scope of this wiki. But basically, you "
"should:"
msgstr ""
"세부 과정은 이 위키의 범위를 벗어납니다. 하지만 기본적으로 다음 과정을 진행해"
"야합니다:"

# ordered list
#: deploy/deploy_seafile_behind_nat.md:101
msgid "1. Choose a DDNS service provider"
msgstr "1. DDNS 서비스 제공 업체를 선정하십시오"

# ordered list
#: deploy/deploy_seafile_behind_nat.md:102
msgid "2. Register an account on the DDNS service provider's website"
msgstr "2. DDNS 서비스 제공 업체 웹사이트에 가입하십시오"

# ordered list
#: deploy/deploy_seafile_behind_nat.md:103
msgid ""
"3. Download a client from your DDNS service provider to keep your domain "
"name always mapped to your WAN IP"
msgstr ""
"3. DDNS 서비스 제공 업체의 클라이언트를 다운로드 받고 WAN IP에 항상 도메인 이"
"름을 매핑한 상태로 유지하십시오"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:105
msgid "## Modify your seafile configuration"
msgstr "## Seafile 설정 수정"

#: deploy/deploy_seafile_behind_nat.md:107
msgid ""
"After you have setup your DDNS service, you need to modify the `ccnet.conf`:"
msgstr "DDNS 서비스 설정이 끝나면, `ccnet.conf` 설정을 수정해야합니다:"

# code block
#: deploy/deploy_seafile_behind_nat.md:109
msgid ""
"```\n"
"SERVICE_URL = http://<Your dynamic DNS domain>:8000\n"
"```"
msgstr ""
"```\n"
"SERVICE_URL = http://<Your dynamic DNS domain>:8000\n"
"```"

# unordered list
#: deploy/deploy_seafile_behind_nat.md:113
msgid "Restart your seafile server after this."
msgstr "설정 수정 후 Seafile 서버를 다시 시작하십시오."

# header
#: deploy/deploy_seahub_at_non-root_domain.md:1
msgid "# Deploy Seahub at Non-root domain"
msgstr "# 비 루트 도메인에서 Seahub 가동"

#: deploy/deploy_seahub_at_non-root_domain.md:2
msgid ""
"This documentation will talk about how to deploy Seafile Web using Apache/"
"Nginx at Non-root directory of the website(e.g., www.example.com/seafile/). "
"Please note that the file server path will still be e.g. www.example.com/"
"seafhttp (rather than www.example.com/seafile/seafhttp) because this path is "
"hardcoded in the clients."
msgstr ""
"이 문서는 웹 사이트의 비 루트 디렉터리(예: www.example.com/seafile/)로 "
"Apache/Nginx에서 Seafile을 가동하는 방법을 다룹니다. 클라이언트에서(www."
"example.com/seafile/seafhttp가 아닌)www.example.com/seafhttp와 같은 경로를 하"
"드코딩 해두었기 때문에 파일 서버 주소는 언급한 그대로임을 참고하십시오."

#: deploy/deploy_seahub_at_non-root_domain.md:4
msgid ""
"**Note:** We assume you have read [Deploy Seafile with Nginx]"
"(deploy_with_nginx.md) or [Deploy Seafile with Apache](deploy_with_apache."
"md)."
msgstr ""
"**참고:** [Seafile과 Nginx 가동](deploy_with_nginx.md) 또는 [Seafile과 "
"Apache 가동](deploy_with_apache.md)을 이미 읽었다고 가정합니다."

# header
#: deploy/deploy_seahub_at_non-root_domain.md:6 deploy/shibboleth_config.md:96
msgid "## Configure Seahub"
msgstr "## Seahub 설정"

#: deploy/deploy_seahub_at_non-root_domain.md:8
msgid "First, we need to overwrite some variables in seahub_settings.py:"
msgstr "우선 seahub_settings.py의 몇가지 변수 값을 바꿔야합니다:"

# inline html
#: deploy/deploy_seahub_at_non-root_domain.md:10
msgid ""
"<pre>\n"
"SERVE_STATIC = False\n"
"MEDIA_URL = '/seafmedia/'\n"
"COMPRESS_URL = MEDIA_URL\n"
"STATIC_URL = MEDIA_URL + 'assets/'\n"
"SITE_ROOT = '/seafile/'\n"
"LOGIN_URL = '/seafile/accounts/login/'    # NOTE: since version 5.0.4\n"
"</pre>"
msgstr ""
"<pre>\n"
"SERVE_STATIC = False\n"
"MEDIA_URL = '/seafmedia/'\n"
"COMPRESS_URL = MEDIA_URL\n"
"STATIC_URL = MEDIA_URL + 'assets/'\n"
"SITE_ROOT = '/seafile/'\n"
"LOGIN_URL = '/seafile/accounts/login/'    # NOTE: since version 5.0.4\n"
"</pre>"

#: deploy/deploy_seahub_at_non-root_domain.md:19
msgid ""
"The webserver will serve static files (js, css, etc), so we just disable "
"<code>SERVE_STATIC</code>."
msgstr ""
"웹서버에서 정적 파일(js, css 등)을 제공하므로 <code>SERVE_STATIC</code>을 비"
"활성으로 설정하겠습니다."

#: deploy/deploy_seahub_at_non-root_domain.md:21
msgid ""
"<code>MEDIA_URL</code> can be anything you like, just make sure a trailing "
"slash is appended at the end."
msgstr ""
"<code>MEDIA_URL</code>은 원하는대로 설정할 수 있습니다만, 마지막에 슬래시를 "
"넣었는지 확인하십시오."

#: deploy/deploy_seahub_at_non-root_domain.md:23
msgid ""
"We deploy Seafile at <code>/seafile/</code> directory instead of root "
"directory, so we set <code>SITE_ROOT</code> to <code>/seafile/</code>."
msgstr ""
"루트 디렉터리 대신 <code>/seafile/</code>에서 Seafile을 가동하므로 "
"<code>SITE_ROOT</code>는 <code>/seafile/</code> 값으로 설정합니다."

# header
#: deploy/deploy_seahub_at_non-root_domain.md:25
#: deploy/deploy_with_apache.md:62 deploy/deploy_with_nginx.md:77
msgid "## Modify ccnet.conf and seahub_setting.py"
msgstr "## ccnet.conf 및 seahub_setting.py 설정 수정"

# header
#: deploy/deploy_seahub_at_non-root_domain.md:27
#: deploy/deploy_with_apache.md:64 deploy/deploy_with_nginx.md:79
msgid "### Modify ccnet.conf"
msgstr "### ccnet.conf 수정"

# unordered list
#: deploy/deploy_seahub_at_non-root_domain.md:29
#: deploy/deploy_with_apache.md:66 deploy/deploy_with_nginx.md:81
msgid ""
"You need to modify the value of <code>SERVICE_URL</code> in [ccnet.conf](../"
"config/ccnet-conf.md) to let Seafile know the domain you choose."
msgstr ""
"사용 도메인을 Seafile에서 알도록 [ccnet.conf](../config/ccnet-conf.md)파일의 "
"<code>SERVICE_URL</code> 값을 바꾸어야합니다."

# inline html
#: deploy/deploy_seahub_at_non-root_domain.md:31
msgid ""
"<pre>\n"
"SERVICE_URL = http://www.myseafile.com/seafile\n"
"</pre>"
msgstr ""
"<pre>\n"
"SERVICE_URL = http://www.myseafile.com/seafile\n"
"</pre>"

#: deploy/deploy_seahub_at_non-root_domain.md:35
#: deploy/deploy_with_apache.md:72 deploy/deploy_with_nginx.md:87
msgid ""
"Note: If you later change the domain assigned to seahub, you also need to "
"change the value of  <code>SERVICE_URL</code>."
msgstr ""
"참고: Seahub에 할당한 도메인을 나중에 바꾸면 <code>SERVICE_URL</code>의 값도 "
"바꿔야합니다."

# header
#: deploy/deploy_seahub_at_non-root_domain.md:37
#: deploy/deploy_with_apache.md:74 deploy/deploy_with_nginx.md:89
msgid "### Modify seahub_settings.py"
msgstr "### seahub_settings.pySeafile 수정"

#: deploy/deploy_seahub_at_non-root_domain.md:39
msgid ""
"You need to add a line in <code>seahub_settings.py</code> to set the value "
"of `FILE_SERVER_ROOT`"
msgstr ""
"<code>seahub_settings.py</code>에 설정 줄을 추가하여 `FILE_SERVER_ROOT` 값을 "
"설정해야합니다"

# code block
#: deploy/deploy_seahub_at_non-root_domain.md:41
#: deploy/deploy_with_apache.md:78 deploy/deploy_with_nginx.md:93
msgid ""
"```python\n"
"FILE_SERVER_ROOT = 'http://www.myseafile.com/seafhttp'\n"
"```"
msgstr ""
"```python\n"
"FILE_SERVER_ROOT = 'http://www.myseafile.com/seafhttp'\n"
"```"

#: deploy/deploy_seahub_at_non-root_domain.md:44
msgid ""
"**Note:** The file server path MUST be `/seafhttp` because this path is "
"hardcoded in the clients."
msgstr ""
"**참고:** 파일 서버 경로는 `/seafhttp` 여야 하며, 이 경로는 클라이언트에 하드"
"코딩 처리되어 있습니다."

# header
#: deploy/deploy_seahub_at_non-root_domain.md:47
msgid "## Webserver configuration"
msgstr "## 웹 서버 설정"

# header
#: deploy/deploy_seahub_at_non-root_domain.md:49
msgid "### Deploy with Nginx"
msgstr "### Nginx로 가동"

#: deploy/deploy_seahub_at_non-root_domain.md:51
msgid "Then, we need to configure the Nginx:"
msgstr "그 다음 Nginx를 설정해야합니다:"

# inline html
#: deploy/deploy_seahub_at_non-root_domain.md:53
msgid ""
"<pre>\n"
"server {\n"
"    listen 80;\n"
"    server_name www.example.com;\n"
"\n"
"    proxy_set_header X-Forwarded-For $remote_addr;\n"
"\n"
"    location /seafile {\n"
"        fastcgi_pass    127.0.0.1:8000;\n"
"        fastcgi_param   SCRIPT_FILENAME     $document_root"
"$fastcgi_script_name;\n"
"        fastcgi_param   PATH_INFO           $fastcgi_script_name;\n"
"\n"
"        fastcgi_param\tSERVER_PROTOCOL\t    $server_protocol;\n"
"        fastcgi_param   QUERY_STRING        $query_string;\n"
"        fastcgi_param   REQUEST_METHOD      $request_method;\n"
"        fastcgi_param   CONTENT_TYPE        $content_type;\n"
"        fastcgi_param   CONTENT_LENGTH      $content_length;\n"
"        fastcgi_param\tSERVER_ADDR         $server_addr;\n"
"        fastcgi_param\tSERVER_PORT         $server_port;\n"
"        fastcgi_param\tSERVER_NAME         $server_name;\n"
"#       fastcgi_param   HTTPS               on; # enable this line only if "
"https is used\n"
"        access_log      /var/log/nginx/seahub.access.log;\n"
"    \terror_log       /var/log/nginx/seahub.error.log;\n"
"    }\n"
"\n"
"    location /seafhttp {\n"
"        rewrite ^/seafhttp(.*)$ $1 break;\n"
"        proxy_pass http://127.0.0.1:8082;\n"
"        client_max_body_size 0;\n"
"    }\n"
"\n"
"    location /seafmedia {\n"
"        rewrite ^/seafmedia(.*)$ /media$1 break;\n"
"        root /home/user/haiwen/seafile-server-latest/seahub;\n"
"    }\n"
"}\n"
"</pre>"
msgstr ""
"<pre>\n"
"server {\n"
"    listen 80;\n"
"    server_name www.example.com;\n"
"\n"
"    proxy_set_header X-Forwarded-For $remote_addr;\n"
"\n"
"    location /seafile {\n"
"        fastcgi_pass    127.0.0.1:8000;\n"
"        fastcgi_param   SCRIPT_FILENAME     $document_root"
"$fastcgi_script_name;\n"
"        fastcgi_param   PATH_INFO           $fastcgi_script_name;\n"
"\n"
"        fastcgi_param\tSERVER_PROTOCOL\t    $server_protocol;\n"
"        fastcgi_param   QUERY_STRING        $query_string;\n"
"        fastcgi_param   REQUEST_METHOD      $request_method;\n"
"        fastcgi_param   CONTENT_TYPE        $content_type;\n"
"        fastcgi_param   CONTENT_LENGTH      $content_length;\n"
"        fastcgi_param\tSERVER_ADDR         $server_addr;\n"
"        fastcgi_param\tSERVER_PORT         $server_port;\n"
"        fastcgi_param\tSERVER_NAME         $server_name;\n"
"#       fastcgi_param   HTTPS               on; # enable this line only if "
"https is used\n"
"        access_log      /var/log/nginx/seahub.access.log;\n"
"    \terror_log       /var/log/nginx/seahub.error.log;\n"
"    }\n"
"\n"
"    location /seafhttp {\n"
"        rewrite ^/seafhttp(.*)$ $1 break;\n"
"        proxy_pass http://127.0.0.1:8082;\n"
"        client_max_body_size 0;\n"
"    }\n"
"\n"
"    location /seafmedia {\n"
"        rewrite ^/seafmedia(.*)$ /media$1 break;\n"
"        root /home/user/haiwen/seafile-server-latest/seahub;\n"
"    }\n"
"}\n"
"</pre>"

# header
#: deploy/deploy_seahub_at_non-root_domain.md:92
msgid "## Deploy with Apache"
msgstr "## Apache로 가동"

#: deploy/deploy_seahub_at_non-root_domain.md:94
msgid "Here is the sample configuration:"
msgstr "예제 설정 파일은 다음과 같습니다:"

# inline html
#: deploy/deploy_seahub_at_non-root_domain.md:96
msgid ""
"<pre>\n"
"<VirtualHost *:80>\n"
"  ServerName www.example.com\n"
"  DocumentRoot /var/www\n"
"  Alias /seafmedia  /home/user/haiwen/seafile-server-latest/seahub/media\n"
"\n"
"  <Location /seafmedia>\n"
"    ProxyPass !\n"
"    Require all granted\n"
"  </Location>\n"
"\n"
"  RewriteEngine On\n"
"\n"
"  #\n"
"  # seafile fileserver\n"
"  #\n"
"  ProxyPass /seafhttp http://127.0.0.1:8082\n"
"  ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"  RewriteRule ^/seafhttp - [QSA,L]\n"
"\n"
"  #\n"
"  # seahub\n"
"  #\n"
"  SetEnvIf Request_URI . proxy-fcgi-pathinfo=unescape\n"
"  SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n"
"  ProxyPass /seafile fcgi://127.0.0.1:8000/seafile\n"
"</VirtualHost>\n"
"</pre>"
msgstr ""
"<pre>\n"
"<VirtualHost *:80>\n"
"  ServerName www.example.com\n"
"  DocumentRoot /var/www\n"
"  Alias /seafmedia  /home/user/haiwen/seafile-server-latest/seahub/media\n"
"\n"
"  <Location /seafmedia>\n"
"    ProxyPass !\n"
"    Require all granted\n"
"  </Location>\n"
"\n"
"  RewriteEngine On\n"
"\n"
"  #\n"
"  # seafile fileserver\n"
"  #\n"
"  ProxyPass /seafhttp http://127.0.0.1:8082\n"
"  ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"  RewriteRule ^/seafhttp - [QSA,L]\n"
"\n"
"  #\n"
"  # seahub\n"
"  #\n"
"  SetEnvIf Request_URI . proxy-fcgi-pathinfo=unescape\n"
"  SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n"
"  ProxyPass /seafile fcgi://127.0.0.1:8000/seafile\n"
"</VirtualHost>\n"
"</pre>"

#: deploy/deploy_seahub_at_non-root_domain.md:125
msgid ""
"We use Alias to let Apache serve static files, please change the second "
"argument to your path."
msgstr ""
"Apache에서 정적 파일을 제공하도록 Alias 지시문을 사용했으므로 경로에 두번째 "
"인자를 바꾸십시오."

# header
#: deploy/deploy_seahub_at_non-root_domain.md:127
msgid "## Clear the cache"
msgstr "## 캐시 정리"

#: deploy/deploy_seahub_at_non-root_domain.md:129
msgid ""
"By default, Seahub caches some data like the link to the avatar icon in `/"
"tmp/seahub_cache/` (unless memcache is used). We suggest to clear the cache "
"after seafile has been stopped:"
msgstr ""
"기본적으로 Seahub에서는(memcache를 사용하지 않으면) `/tmp/seahub_cache/`에 아"
"바타 링크 아이콘 같은 일부 데이터를 캐시로 저장합니다. Seafile을 멈추고 나면 "
"캐시를 비우는 것이 좋습니다:"

# inline html
#: deploy/deploy_seahub_at_non-root_domain.md:131
msgid ""
"<pre>\n"
"rm -rf /tmp/seahub_cache/\n"
"</pre>"
msgstr ""
"<pre>\n"
"rm -rf /tmp/seahub_cache/\n"
"</pre>"

#: deploy/deploy_seahub_at_non-root_domain.md:135
msgid ""
"For memcache users, please purge the cache there instead by restarting your "
"memcached server."
msgstr ""
"memcache 사용자는, memcached 서버를 다시 시작하는 대신 캐시를 완전히 삭제하십"
"시오."

# header
#: deploy/deploy_seahub_at_non-root_domain.md:137
#: deploy/deploy_with_apache.md:82 deploy/deploy_with_nginx.md:97
#: deploy/https_with_apache.md:80 deploy/https_with_nginx.md:141
msgid "## Start Seafile and Seahub"
msgstr "## Seafile 및 Seahub를 시작하십시오"

# inline html
#: deploy/deploy_seahub_at_non-root_domain.md:139
msgid ""
"<pre>\n"
"./seafile.sh start\n"
"./seahub.sh start-fastcgi\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seafile.sh start\n"
"./seahub.sh start-fastcgi\n"
"</pre>"

# header
#: deploy/deploy_with_apache.md:1
msgid "# Config Seahub with Apache"
msgstr "# Seahub와 Apache 설정"

# header
#: deploy/deploy_with_apache.md:3 deploy/deploy_with_nginx.md:3
msgid "## Important"
msgstr "## 중요사항"

#: deploy/deploy_with_apache.md:5
msgid ""
"According to the [security advisory](https://www.djangoproject.com/"
"weblog/2013/aug/06/breach-and-django/) published by Django team, we "
"recommend disable [GZip compression](http://httpd.apache.org/docs/2.2/mod/"
"mod_deflate.html) to mitigate [BREACH attack](http://breachattack.com/)."
msgstr ""
"장고 팀의 [보안 권고안](https://www.djangoproject.com/weblog/2013/aug/06/"
"breach-and-django/)에 따르면, [BREACH 공격](http://breachattack.com/)을 피하"
"도록 [GZip 압축](http://httpd.apache.org/docs/2.2/mod/mod_deflate.html) 비활"
"성화를 추천합니다."

#: deploy/deploy_with_apache.md:7
msgid "This tutorial assumes you run at least Apache 2.4."
msgstr "이 지침서는 최소한 Apache 2.4를 사용한다고 가정합니다."

# header
#: deploy/deploy_with_apache.md:9
msgid "## Prepare"
msgstr "## 준비"

#: deploy/deploy_with_apache.md:11
msgid "Install and enable Apache modules"
msgstr "Apache 모듈을 설치하고 활성화하십시오"

#: deploy/deploy_with_apache.md:13
msgid "On Ubuntu you can use:"
msgstr "우분투라면 다음 명령으로 활성화할 수 있습니다:"

# code block
#: deploy/deploy_with_apache.md:15
msgid ""
"```bash\n"
"sudo a2enmod rewrite\n"
"sudo a2enmod proxy_fcgi\n"
"sudo a2enmod proxy_http\n"
"```"
msgstr ""
"```bash\n"
"sudo a2enmod rewrite\n"
"sudo a2enmod proxy_fcgi\n"
"sudo a2enmod proxy_http\n"
"```"

#: deploy/deploy_with_apache.md:22
msgid ""
"On raspbian install fcgi like [this](http://raspberryserver.blogspot.co."
"at/2013/02/installing-lamp-with-fastcgi-php-fpm.html)"
msgstr ""
"라즈비안에서는 [이 곳](http://raspberryserver.blogspot.co.at/2013/02/"
"installing-lamp-with-fastcgi-php-fpm.html)에서 언급한대로 fcgi를 설치하십시오"

# header
#: deploy/deploy_with_apache.md:24
msgid "## Deploy Seahub/FileServer With Apache"
msgstr "## Seafile/FileServer와 Apache 가동"

#: deploy/deploy_with_apache.md:26 deploy/deploy_with_nginx.md:9
msgid ""
"Seahub is the web interface of Seafile server. FileServer is used to handle "
"raw file uploading/downloading through browsers. By default, it listens on "
"port 8082 for HTTP request."
msgstr ""
"Seahub는 Seafile 서버의 웹 인터페이스입니다. FileServer는 브라우저의 원시 파"
"일 업로드/다운로드 처리에 활용합니다. FileServer는 기본적으로 8082 포트에서 "
"요청 대기를 수행합니다."

#: deploy/deploy_with_apache.md:28
msgid ""
"Here we deploy Seahub using fastcgi, and deploy FileServer with reverse "
"proxy. We assume you are running Seahub using domain '''www.myseafile.com'''."
msgstr ""
"여기서 fastcgi를 활용하여 Seahub를 구동하고 역방향 프록시로 FileServer를 구동"
"하겠습니다. 여기서 Seahub를 실행하는 환경에서 '''www.myseafile.com''' 도메인"
"을 사용한다고 가정하겠습니다."

#: deploy/deploy_with_apache.md:30
msgid ""
"Modify Apache config file: (`sites-enabled/000-default`) for ubuntu/debian, "
"(`vhost.conf`) for centos/fedora"
msgstr ""
"Apache 설정 파일을 수정하십시오: 우분투/데비안에서는(`sites-enabled/000-"
"default`), 센트OS/페도라 에서는(`vhost.conf`)입니다"

# code block
#: deploy/deploy_with_apache.md:32
msgid ""
"```apache\n"
"<VirtualHost *:80>\n"
"    ServerName www.myseafile.com\n"
"    # Use \"DocumentRoot /var/www/html\" for Centos/Fedora\n"
"    # Use \"DocumentRoot /var/www\" for Ubuntu/Debian\n"
"    DocumentRoot /var/www\n"
"    Alias /media  /home/user/haiwen/seafile-server-latest/seahub/media\n"
"\n"
"    RewriteEngine On\n"
"\n"
"    <Location /media>\n"
"        Require all granted\n"
"    </Location>\n"
"\n"
"    #\n"
"    # seafile fileserver\n"
"    #\n"
"    ProxyPass /seafhttp http://127.0.0.1:8082\n"
"    ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"    RewriteRule ^/seafhttp - [QSA,L]\n"
"\n"
"    #\n"
"    # seahub\n"
"    #\n"
"    SetEnvIf Request_URI . proxy-fcgi-pathinfo=unescape\n"
"    SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n"
"    ProxyPass / fcgi://127.0.0.1:8000/\n"
"</VirtualHost>\n"
"```"
msgstr ""
"```apache\n"
"<VirtualHost *:80>\n"
"    ServerName www.myseafile.com\n"
"    # Use \"DocumentRoot /var/www/html\" for Centos/Fedora\n"
"    # Use \"DocumentRoot /var/www\" for Ubuntu/Debian\n"
"    DocumentRoot /var/www\n"
"    Alias /media  /home/user/haiwen/seafile-server-latest/seahub/media\n"
"\n"
"    RewriteEngine On\n"
"\n"
"    <Location /media>\n"
"        Require all granted\n"
"    </Location>\n"
"\n"
"    #\n"
"    # seafile fileserver\n"
"    #\n"
"    ProxyPass /seafhttp http://127.0.0.1:8082\n"
"    ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"    RewriteRule ^/seafhttp - [QSA,L]\n"
"\n"
"    #\n"
"    # seahub\n"
"    #\n"
"    SetEnvIf Request_URI . proxy-fcgi-pathinfo=unescape\n"
"    SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n"
"    ProxyPass / fcgi://127.0.0.1:8000/\n"
"</VirtualHost>\n"
"```"

# code block
#: deploy/deploy_with_apache.md:68 deploy/deploy_with_nginx.md:83
msgid ""
"```python\n"
"SERVICE_URL = http://www.myseafile.com\n"
"```"
msgstr ""
"```python\n"
"SERVICE_URL = http://www.myseafile.com\n"
"```"

#: deploy/deploy_with_apache.md:76 deploy/deploy_with_nginx.md:91
msgid ""
"You need to add a line in <code>seahub_settings.py</code> to set the value "
"of `FILE_SERVER_ROOT` (or `HTTP_SERVER_ROOT` before version 3.1)"
msgstr ""
"<code>seahub_settings.py</code>에 설정 줄을 추가하여 "
"`FILE_SERVER_ROOT`(3.1.0 버전 이전의 경우 `HTTP_SERVER_ROOT`) 값을 설정해야 "
"합니다"

# code block
#: deploy/deploy_with_apache.md:84
msgid ""
"```bash\n"
"sudo service apache2 restart\n"
"./seafile.sh start\n"
"./seahub.sh start-fastcgi\n"
"```"
msgstr ""
"```bash\n"
"sudo service apache2 restart\n"
"./seafile.sh start\n"
"./seahub.sh start-fastcgi\n"
"```"

# header
#: deploy/deploy_with_apache.md:90
msgid "## Troubleshooting"
msgstr "## 문제 해결"

# header
#: deploy/deploy_with_apache.md:92
msgid "### Problems with paths and files containing spaces"
msgstr "### 공백 문자가 들어있는 경로 및 파일의 문제"

#: deploy/deploy_with_apache.md:94
msgid ""
"If there are problems with paths or files containing spaces, make sure to "
"have at least Apache 2.4.12."
msgstr ""
"경로 또는 파일에 공백이 들어가 있어 문제가 발생한다면 Apache 버전이 2.4.12 이"
"상이 아닌지 확인하십시오."

#: deploy/deploy_with_apache.md:96
msgid "References"
msgstr "참고"

# unordered list
#: deploy/deploy_with_apache.md:97
msgid " * https://github.com/haiwen/seafile/issues/1258#issuecomment-188866740"
msgstr ""
" * https://github.com/haiwen/seafile/issues/1258#issuecomment-188866740"

# unordered list
#: deploy/deploy_with_apache.md:98
msgid " * https://bugs.launchpad.net/ubuntu/+source/apache2/+bug/1284641"
msgstr " * https://bugs.launchpad.net/ubuntu/+source/apache2/+bug/1284641"

# unordered list
#: deploy/deploy_with_apache.md:99
msgid ""
" * https://bugs.launchpad.net/ubuntu/+source/apache2/+bug/1284641/comments/5"
msgstr ""
" * https://bugs.launchpad.net/ubuntu/+source/apache2/+bug/1284641/comments/5"

# unordered list
#: deploy/deploy_with_apache.md:100
msgid ""
" * https://svn.apache.org/viewvc/httpd/httpd/tags/2.4.12/CHANGES?"
"view=markup#l45"
msgstr ""
" * https://svn.apache.org/viewvc/httpd/httpd/tags/2.4.12/CHANGES?"
"view=markup#l45"

# header
#: deploy/deploy_with_apache.md:102
msgid "## Notes when Upgrading Seafile Server"
msgstr "## Seafile 서버 업그레이드 참고"

#: deploy/deploy_with_apache.md:104
msgid ""
"When [upgrading seafile server](upgrade.md), besides the normal steps you "
"should take, there is one extra step to do: '''Update the path of the static "
"files in your Nginx/Apache configuration'''. For example, assume your are "
"upgrading seafile server 1.3.0 to 1.4.0, then:"
msgstr ""
"[Seafile 서버를 업그레이드](upgrade.md)할 때, 일반 과정을 거친 다음의 추가 진"
"행 과정이 있습니다. '''Nginx/Apache 설정에서 정적 파일 경로를 업데이트하십시"
"오'''. 예를 들어 Seafile 서버를 1.3.0에서 1.4.0으로 업데이트 한다면:"

# code block
#: deploy/deploy_with_apache.md:106
msgid ""
"```apache\n"
"  Alias /media  /home/user/haiwen/seafile-server-1.4.0/seahub/media\n"
"```"
msgstr ""
"```apache\n"
"  Alias /media  /home/user/haiwen/seafile-server-1.4.0/seahub/media\n"
"```"

#: deploy/deploy_with_apache.md:110
#: deploy/upgrade_with_mysql_or_postgresql.md:93
msgid "**Tip:**"
msgstr "**요령:**"

#: deploy/deploy_with_apache.md:111
msgid ""
"You can create a symbolic link <code>seafile-server-latest</code>, and make "
"it point to your current seafile server folder (Since seafile server 2.1.0, "
"the <code>setup-seafile.sh</code> script will do this for you). Then, each "
"time you run a upgrade script, it would update the <code>seafile-server-"
"latest</code> symbolic link to keep it always point to the latest version "
"seafile server folder."
msgstr ""
"<code>seafile-server-latest</code> 심볼릭 링크를 작성하여 현재 Seafile 서버 "
"폴더를 가리킬 수 있습니다(Seafile 서버 2.1.0부터, <code>setup-seafile.sh</"
"code> 스크립트가 이 동작을 진행합니다). 그 다음 업그레이드 스크립트를 실행할 "
"때마다 최신 버전의 Seafile 서버 폴더를 항상 가리키도록 <code>seafile-server-"
"latest</code> 심볼릭 링크를 업데이트합니다."

#: deploy/deploy_with_apache.md:113
#: deploy/upgrade_with_mysql_or_postgresql.md:96
msgid "In this case, you can write:"
msgstr "이 경우, 다음 설정을 작성할 수 있습니다:"

# code block
#: deploy/deploy_with_apache.md:115
msgid ""
"```apache\n"
"  Alias /media  /home/user/haiwen/seafile-server-latest/seahub;\n"
"```"
msgstr ""
"```apache\n"
"  Alias /media  /home/user/haiwen/seafile-server-latest/seahub;\n"
"```"

#: deploy/deploy_with_apache.md:118
msgid ""
"This way, you no longer need to update the Apache config file each time you "
"upgrade your seafile server."
msgstr ""
"이 방법으로 Seafile 서버를 업그레이드할 때마다 더 이상 Apache 설정 파일을 업"
"데이트할 필요가 없습니다."

# header
#: deploy/deploy_with_apache.md:121 deploy/https_with_apache.md:87
msgid "## Detailed explanation"
msgstr "## 세부 설명"

#: deploy/deploy_with_apache.md:123
msgid ""
"This may help you understand seafile server better: [Seafile Components](../"
"overview/components.md)"
msgstr ""
"이 부분은 Seafile 서버의 이해를 돕습니다: [Seafile 구성요소](../overview/"
"components.md)"

#: deploy/deploy_with_apache.md:125
msgid ""
"There are two components in Seafile server, Seahub and FileServer. "
"FileServer only servers for raw file uploading/downloading, it listens on "
"8082. Seahub that serving all the other pages, is still listen on 8000. But "
"under https, Seahub should listen as in fastcgi mode on 8000 (run as ./"
"seahub.sh start-fastcgi). And as in fastcgi mode, when you visit  http://"
"domain:8000 directly, it should return an error page."
msgstr ""
"Seafile 서버는 두가지 부분, Seahub와 FileServer로 이루어져있습니다. "
"FileServer는 8082번 포트에서 요청 대기하며 원시 파일 업로드/다운로드 전용 서"
"버입니다. Seahub는 모든 기타 페이지를 제공하며 8000번 포트에서 요청 대기합니"
"다. 다만 https에서는 Seahub는 8000번 포트에서 fastcgi 모드(./seahub.sh start-"
"fastcgi로 실행)로 요청 대기해야합니다. 그리고 fastcgi 모드에서 http://"
"domain:8000 주소로 바로 접근하면 오류 페이지를 반환해야합니다."

#: deploy/deploy_with_apache.md:127 deploy/https_with_apache.md:93
msgid ""
"When a user visit https://example.com/home/my/, Apache receives this request "
"and sends it to Seahub via fastcgi. This is controlled by the following "
"config items:"
msgstr ""
"사용자가 https://example.com/home/my/ 주소로 접근하면, Apache에서 요청을 받"
"아 fastcgi로 Seahub에 전달합니다. 이 동작은 다음 설정 항목으로 관리합니다:"

# code block
#: deploy/deploy_with_apache.md:129 deploy/https_with_apache.md:94
msgid ""
"```apache\n"
"    #\n"
"    # seahub\n"
"    #\n"
"    SetEnvIf Request_URI . proxy-fcgi-pathinfo=unescape\n"
"    SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n"
"    ProxyPass / fcgi://127.0.0.1:8000/\n"
"```"
msgstr ""
"```apache\n"
"    #\n"
"    # seahub\n"
"    #\n"
"    SetEnvIf Request_URI . proxy-fcgi-pathinfo=unescape\n"
"    SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n"
"    ProxyPass / fcgi://127.0.0.1:8000/\n"
"```"

#: deploy/deploy_with_apache.md:138
msgid ""
"When a user click a file download link in Seahub, Seahub reads the value of "
"`FILE_SERVER_ROOT` and redirects the user to address `https://example.com/"
"seafhttp/xxxxx/`. `https://example.com/seafhttp` is the value of "
"`FILE_SERVER_ROOT`. Here, the `FILE_SERVER` means the FileServer component "
"of Seafile, which only serves for raw file downloading/uploading."
msgstr ""
"사용자가 Seahub의 파일 다운로드 링크를 누르면, Seahub에서 `FILE_SERVER_ROOT` "
"값을 읽고 `https://example.com/seafhttp/xxxxx/` 주소로 사용자를 안내합니다. "
"`https://example.com/seafhttp`는 `FILE_SERVER_ROOT`의 값입니다. 여기서 "
"`FILE_SERVER`는 원시 파일 업로드/다운로드만 처리하는 Seafile의 FileServer 구"
"성 요소입니다."

#: deploy/deploy_with_apache.md:140 deploy/https_with_apache.md:109
msgid ""
"When Apache receives the request at 'https://example.com/seafhttp/xxxxx/', "
"it proxies the request to FileServer, which is listening at 127.0.0.1:8082. "
"This is controlled by the following config items:"
msgstr ""
"Apache에서 'https://example.com/seafhttp/xxxxx/' 요청을 받으면,  "
"127.0.0.1:8082에서 대기 중인 FileServer에 요청을 전달합니다. 다음 설정 항목으"
"로 이 동작을 관리합니다:"

# code block
#: deploy/deploy_with_apache.md:142 deploy/https_with_apache.md:110
msgid ""
"```apache\n"
"    #\n"
"    # seafile fileserver\n"
"    #\n"
"    ProxyPass /seafhttp http://127.0.0.1:8082\n"
"    ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"    RewriteRule ^/seafhttp - [QSA,L]\n"
"```"
msgstr ""
"```apache\n"
"    #\n"
"    # seafile fileserver\n"
"    #\n"
"    ProxyPass /seafhttp http://127.0.0.1:8082\n"
"    ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"    RewriteRule ^/seafhttp - [QSA,L]\n"
"```"

# header
#: deploy/deploy_with_nginx.md:1
msgid "# Config Seahub with Nginx"
msgstr "# Seahub 및 Nginx 설정"

#: deploy/deploy_with_nginx.md:5
msgid ""
"According to the [security advisory](https://www.djangoproject.com/"
"weblog/2013/aug/06/breach-and-django/) published by Django team, we "
"recommend disable [GZip compression](http://wiki.nginx.org/HttpGzipModule) "
"to mitigate [BREACH attack](http://breachattack.com/)."
msgstr ""
"장고 팀의 [보안 권고안](https://www.djangoproject.com/weblog/2013/aug/06/"
"breach-and-django/)에 따르면, [BREACH 공격](http://breachattack.com/)을 피하"
"도록 [GZip 압축](http://wiki.nginx.org/HttpGzipModule) 비활성화를 추천합니다."

# header
#: deploy/deploy_with_nginx.md:7
msgid "## Deploy Seahub/FileServer with Nginx"
msgstr "## Seahub/FileServer 및 Nginx 가동"

#: deploy/deploy_with_nginx.md:11
msgid ""
"Here we deploy Seahub using [FastCGI](http://en.wikipedia.org/wiki/FastCGI), "
"and deploy FileServer with reverse proxy. We assume you are running Seahub "
"using domain '''www.myseafile.com'''."
msgstr ""
"여기서 [FastCGI](http://en.wikipedia.org/wiki/FastCGI)를 활용하여 Seahub를 구"
"동하고 역방향 프록시로 FileServer를 구동하겠습니다. 여기서 Seahub를 실행하는 "
"환경에서 '''www.myseafile.com''' 도메인을 사용한다고 가정하겠습니다."

#: deploy/deploy_with_nginx.md:13
msgid "This is a sample Nginx config file."
msgstr "아래는 예제 Nginx 설정 파일의 내용입니다."

#: deploy/deploy_with_nginx.md:15
msgid "In Ubuntu 14.04, you can add the config file as follows:"
msgstr "우분투 14.04에서는 다음 단계를 따라 설정 파일을 추가할 수 있습니다:"

# ordered list
#: deploy/deploy_with_nginx.md:17
msgid "1. create file `/etc/nginx/sites-available/seafile.conf`"
msgstr "1. `/etc/nginx/sites-available/seafile.conf`파일을 만드십시오"

# ordered list
#: deploy/deploy_with_nginx.md:18
msgid ""
"2. Delete `/etc/nginx/sites-enabled/default`: `rm /etc/nginx/sites-enabled/"
"default`"
msgstr ""
"2. `/etc/nginx/sites-enabled/default` 파일을 삭제하십시오 : `rm /etc/nginx/"
"sites-enabled/default`"

# ordered list
#: deploy/deploy_with_nginx.md:19
msgid ""
"3. Create symbolic link: `ln -s /etc/nginx/sites-available/seafile.conf /etc/"
"nginx/sites-enabled/seafile.conf`"
msgstr ""
"3. 심볼릭 링크를 만드십시오: `ln -s /etc/nginx/sites-available/seafile.conf /"
"etc/nginx/sites-enabled/seafile.conf`"

# code block
#: deploy/deploy_with_nginx.md:21
msgid ""
"```nginx\n"
"server {\n"
"    listen 80;\n"
"    server_name www.myseafile.com;\n"
"\n"
"    proxy_set_header X-Forwarded-For $remote_addr;\n"
"\n"
"    location / {\n"
"        fastcgi_pass    127.0.0.1:8000;\n"
"        fastcgi_param   SCRIPT_FILENAME     $document_root"
"$fastcgi_script_name;\n"
"        fastcgi_param   PATH_INFO           $fastcgi_script_name;\n"
"\n"
"        fastcgi_param\tSERVER_PROTOCOL\t    $server_protocol;\n"
"        fastcgi_param   QUERY_STRING        $query_string;\n"
"        fastcgi_param   REQUEST_METHOD      $request_method;\n"
"        fastcgi_param   CONTENT_TYPE        $content_type;\n"
"        fastcgi_param   CONTENT_LENGTH      $content_length;\n"
"        fastcgi_param\tSERVER_ADDR         $server_addr;\n"
"        fastcgi_param\tSERVER_PORT         $server_port;\n"
"        fastcgi_param\tSERVER_NAME         $server_name;\n"
"        fastcgi_param   REMOTE_ADDR         $remote_addr;\n"
"\n"
"        access_log      /var/log/nginx/seahub.access.log;\n"
"    \terror_log       /var/log/nginx/seahub.error.log;\n"
"    \tfastcgi_read_timeout 36000;\n"
"    }\n"
"\n"
"    location /seafhttp {\n"
"        rewrite ^/seafhttp(.*)$ $1 break;\n"
"        proxy_pass http://127.0.0.1:8082;\n"
"        client_max_body_size 0;\n"
"        proxy_connect_timeout  36000s;\n"
"        proxy_read_timeout  36000s;\n"
"        proxy_send_timeout  36000s;\n"
"        send_timeout  36000s;\n"
"    }\n"
"\n"
"    location /media {\n"
"        root /home/user/haiwen/seafile-server-latest/seahub;\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```nginx\n"
"server {\n"
"    listen 80;\n"
"    server_name www.myseafile.com;\n"
"\n"
"    proxy_set_header X-Forwarded-For $remote_addr;\n"
"\n"
"    location / {\n"
"        fastcgi_pass    127.0.0.1:8000;\n"
"        fastcgi_param   SCRIPT_FILENAME     $document_root"
"$fastcgi_script_name;\n"
"        fastcgi_param   PATH_INFO           $fastcgi_script_name;\n"
"\n"
"        fastcgi_param\tSERVER_PROTOCOL\t    $server_protocol;\n"
"        fastcgi_param   QUERY_STRING        $query_string;\n"
"        fastcgi_param   REQUEST_METHOD      $request_method;\n"
"        fastcgi_param   CONTENT_TYPE        $content_type;\n"
"        fastcgi_param   CONTENT_LENGTH      $content_length;\n"
"        fastcgi_param\tSERVER_ADDR         $server_addr;\n"
"        fastcgi_param\tSERVER_PORT         $server_port;\n"
"        fastcgi_param\tSERVER_NAME         $server_name;\n"
"        fastcgi_param   REMOTE_ADDR         $remote_addr;\n"
"\n"
"        access_log      /var/log/nginx/seahub.access.log;\n"
"    \terror_log       /var/log/nginx/seahub.error.log;\n"
"    \tfastcgi_read_timeout 36000;\n"
"    }\n"
"\n"
"    location /seafhttp {\n"
"        rewrite ^/seafhttp(.*)$ $1 break;\n"
"        proxy_pass http://127.0.0.1:8082;\n"
"        client_max_body_size 0;\n"
"        proxy_connect_timeout  36000s;\n"
"        proxy_read_timeout  36000s;\n"
"        proxy_send_timeout  36000s;\n"
"        send_timeout  36000s;\n"
"    }\n"
"\n"
"    location /media {\n"
"        root /home/user/haiwen/seafile-server-latest/seahub;\n"
"    }\n"
"}\n"
"```"

#: deploy/deploy_with_nginx.md:64
msgid ""
"Nginx settings \"client_max_body_size\" is by default 1M. Uploading a file "
"bigger than this limit will give you an error message HTTP error code 413 "
"(\"Request Entity Too Large\")."
msgstr ""
"\"client_max_body_size\" Nginx 기본 설정 값은 1M입니다. 이 지정 용량 이상을 "
"지닌 파일을 업로드하면 HTTP 오류 코드 413을 반환(\"Request Entity Too Large"
"\")합니다."

#: deploy/deploy_with_nginx.md:66
msgid ""
"You should use 0 to disable this feature or write the same value than for "
"the parameter `max_upload_size` in section `[fileserver]` of [seafile.conf]"
"(../config/seafile-conf.md)."
msgstr ""
"0으로 설정하여 이 기능을 비활성화하든지 [seafile.conf](../config/seafile-"
"conf.md)의 `[fileserver]` 섹션에 있는 `max_upload_size` 매개변수값과 동일하"
"게 설정하십시오."

#: deploy/deploy_with_nginx.md:68 deploy/https_with_nginx.md:100
msgid ""
"Tip for uploading very large files (> 4GB): By default Nginx will buffer "
"large request body in temp file. After the body is completely received, "
"Nginx will send the body to the upstream server (seaf-server in our case). "
"But it seems when file size is very large, the buffering mechanism dosen't "
"work well. It may stop proxying the body in the middle. So if you want to "
"support file upload larger for 4GB, we suggest you install Nginx version >= "
"1.8.0 and add the following options to Nginx config file:"
msgstr ""
"매우 큰(4GB 초과) 파일 업로드 요령: 기본적으로 Nginx는 대형 요청을 버퍼에 임"
"시 파일로 저장합니다. 이 요청 본문을 완전히 받고 나면, Nginx에서는 요청 본문"
"을 업스트림 서버로 보냅니다.(이 경우 seaf-server). 파일 크기가 상당히 커보인"
"다면, 버퍼링 기능이 잘 동작하지 않을 수도 있습니다. 게다가 도중에 요청 본문 "
"전달을 멈출 수도 있습니다. 4GB 용량 보다 큰 파일을 업로드하려면 Nginx 1.8.0 "
"이상을 사용하시고 다음 설정 항목을 Nginx 설정 파일에 추가하십시오:"

# code block
#: deploy/deploy_with_nginx.md:70
msgid ""
"```nginx\n"
"    location /seafhttp {\n"
"        ... ...\n"
"        proxy_request_buffering off;\n"
"    }\n"
"```"
msgstr ""
"```nginx\n"
"    location /seafhttp {\n"
"        ... ...\n"
"        proxy_request_buffering off;\n"
"    }\n"
"```"

# code block
#: deploy/deploy_with_nginx.md:99 deploy/https_with_apache.md:82
#: deploy/https_with_nginx.md:143
msgid ""
"```bash\n"
"./seafile.sh start\n"
"./seahub.sh start-fastcgi\n"
"```"
msgstr ""
"```bash\n"
"./seafile.sh start\n"
"./seahub.sh start-fastcgi\n"
"```"

# header
#: deploy/https_with_apache.md:1
msgid "# Enabling Https with Apache"
msgstr "# Apache https 활성화"

# header
#: deploy/https_with_apache.md:3
msgid "## Generate SSL digital certificate with OpenSSL"
msgstr "## OpenSSL에서 SSL 디지털 서명 만들기"

#: deploy/https_with_apache.md:5
msgid ""
"Here we use self-signed SSL digital certificate for free. If you use a paid "
"ssl certificate from some authority, just skip the this step."
msgstr ""
"무료 자체 서명 SSL 디지털 인증서를 사용하겠습니다. 일부 인증 기관의 유료 SSL "
"인증서를 사용하신다면 이 단계를 건너뛰십시오."

# code block
#: deploy/https_with_apache.md:7 deploy/https_with_nginx.md:6
msgid ""
"```bash\n"
"    openssl genrsa -out privkey.pem 2048\n"
"    openssl req -new -x509 -key privkey.pem -out cacert.pem -days 1095\n"
"```"
msgstr ""
"```bash\n"
"    openssl genrsa -out privkey.pem 2048\n"
"    openssl req -new -x509 -key privkey.pem -out cacert.pem -days 1095\n"
"```"

#: deploy/https_with_apache.md:12 deploy/https_with_nginx.md:11
msgid ""
"If you're using a custom CA to sign your SSL certificate, you have to enable "
"certificate revocation list (CRL) in your certificate. Otherwise http "
"syncing on Windows client may not work. See [this thread](https://forum."
"seafile-server.org/t/https-syncing-on-windows-machine-using-custom-ca/898) "
"for more information."
msgstr ""
"SSL 인증서 서명에 개별 인증서 발급 기관을 사용하면, 인증서에서 인증서 철회 목"
"록(CRL)을 활성화해야합니다. 그렇지 않으면 윈도우 클라이언트의 http 동기화가 "
"동작하지 않을 수 있습니다. 자세한 정보는 [이 글타래](https://forum.seafile-"
"server.org/t/https-syncing-on-windows-machine-using-custom-ca/898)를 참고하십"
"시오."

# header
#: deploy/https_with_apache.md:14
msgid "## Enable https on Seahub"
msgstr "## Seahub의 https 활성화"

#: deploy/https_with_apache.md:16
msgid ""
"Assume you have configured Apache as [Deploy Seafile with Apache]"
"(deploy_with_apache.md). To use https, you need to enable mod_ssl"
msgstr ""
"[Seafile과 Apache 가동](deploy_with_apache.md)편을 따라 Apache를 설정했다고 "
"가정하겠습니다. https를 사용하려면 mod_ssl을 활성화해야 합니다"

# code block
#: deploy/https_with_apache.md:18
msgid ""
"```bash\n"
"    sudo a2enmod ssl\n"
"```"
msgstr ""
"```bash\n"
"    sudo a2enmod ssl\n"
"```"

#: deploy/https_with_apache.md:22
msgid "On Windows, you have to add ssl module to httpd.conf"
msgstr "윈도우에서는 httpd.conf에 ssl 모듈을 추가해야합니다"

# code block
#: deploy/https_with_apache.md:23
msgid ""
"```apache\n"
"LoadModule ssl_module modules/mod_ssl.so\n"
"```"
msgstr ""
"```apache\n"
"LoadModule ssl_module modules/mod_ssl.so\n"
"```"

#: deploy/https_with_apache.md:27
msgid "Then modify your Apache configuration file. Here is a sample:"
msgstr "다음 Apache 설정 파일을 수정하십시오. 아래는 예제입니다:"

# code block
#: deploy/https_with_apache.md:29
msgid ""
"```apache\n"
"<VirtualHost *:443>\n"
"  ServerName www.myseafile.com\n"
"  DocumentRoot /var/www\n"
"  \n"
"  SSLEngine On\n"
"  SSLCertificateFile /path/to/cacert.pem\n"
"  SSLCertificateKeyFile /path/to/privkey.pem\n"
"\n"
"  Alias /media  /home/user/haiwen/seafile-server-latest/seahub/media\n"
"  \n"
"  <Location /media>\n"
"    ProxyPass !\n"
"    Require all granted\n"
"  </Location>\n"
"\n"
"  RewriteEngine On\n"
"\n"
"  #\n"
"  # seafile fileserver\n"
"  #\n"
"  ProxyPass /seafhttp http://127.0.0.1:8082\n"
"  ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"  RewriteRule ^/seafhttp - [QSA,L]\n"
"\n"
"  #\n"
"  # seahub\n"
"  #\n"
"  SetEnvIf Request_URI . proxy-fcgi-pathinfo=unescape\n"
"  SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n"
"  ProxyPass / fcgi://127.0.0.1:8000/\n"
"</VirtualHost>\n"
"```"
msgstr ""
"```apache\n"
"<VirtualHost *:443>\n"
"  ServerName www.myseafile.com\n"
"  DocumentRoot /var/www\n"
"  \n"
"  SSLEngine On\n"
"  SSLCertificateFile /path/to/cacert.pem\n"
"  SSLCertificateKeyFile /path/to/privkey.pem\n"
"\n"
"  Alias /media  /home/user/haiwen/seafile-server-latest/seahub/media\n"
"  \n"
"  <Location /media>\n"
"    ProxyPass !\n"
"    Require all granted\n"
"  </Location>\n"
"\n"
"  RewriteEngine On\n"
"\n"
"  #\n"
"  # seafile fileserver\n"
"  #\n"
"  ProxyPass /seafhttp http://127.0.0.1:8082\n"
"  ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"  RewriteRule ^/seafhttp - [QSA,L]\n"
"\n"
"  #\n"
"  # seahub\n"
"  #\n"
"  SetEnvIf Request_URI . proxy-fcgi-pathinfo=unescape\n"
"  SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n"
"  ProxyPass / fcgi://127.0.0.1:8000/\n"
"</VirtualHost>\n"
"```"

# header
#: deploy/https_with_apache.md:63 deploy/https_with_nginx.md:124
msgid "## Modify settings to use https"
msgstr "## https를 사용하도록 설정 수정"

# header
#: deploy/https_with_apache.md:65 deploy/https_with_nginx.md:126
msgid "### ccnet conf"
msgstr "### ccnet conf"

#: deploy/https_with_apache.md:67 deploy/https_with_nginx.md:128
msgid ""
"Since you change from http to https, you need to modify the value of "
"\"SERVICE_URL\" in [ccnet.conf](../config/ccnet-conf.md):"
msgstr ""
"http에서 https로 바꾸려면 [ccnet.conf](../config/ccnet-conf.md)의 "
"\"SERVICE_URL\"을 수정해야합니다:"

# code block
#: deploy/https_with_apache.md:68
msgid ""
"```python\n"
"SERVICE_URL = https://www.myseafile.com\n"
"```"
msgstr ""
"```python\n"
"SERVICE_URL = https://www.myseafile.com\n"
"```"

# header
#: deploy/https_with_apache.md:72 deploy/https_with_nginx.md:133
msgid "### seahub_settings.py"
msgstr "### seahub_settings.py"

#: deploy/https_with_apache.md:74 deploy/https_with_nginx.md:135
msgid ""
"You need to add a line in seahub_settings.py to set the value of "
"`FILE_SERVER_ROOT` (Or `HTTP_SERVER_ROOT` before version 3.1.0)"
msgstr ""
"seahub_settings.py에 설정 줄을 추가하여 `FILE_SERVER_ROOT`(3.1.0 버전 이전의 "
"경우 `HTTP_SERVER_ROOT`)의 값을 설정해야 합니다"

# code block
#: deploy/https_with_apache.md:76
msgid ""
"```python\n"
"FILE_SERVER_ROOT = 'https://www.myseafile.com/seafhttp'\n"
"```"
msgstr ""
"```python\n"
"FILE_SERVER_ROOT = 'https://www.myseafile.com/seafhttp'\n"
"```"

#: deploy/https_with_apache.md:89
msgid ""
"The picture at the end of [this document](components.md) may help you "
"understand seafile server better"
msgstr ""
"[이 문서](components.md) 마지막의 그림은 Seafile 서버의 동작 상태를 더 쉽게 "
"이해할 수 있도록 도와드립니다"

#: deploy/https_with_apache.md:91
msgid ""
"There are two components in Seafile server, Seahub and FileServer. "
"FileServer only servers for raw file uploading/downloading, it listens on "
"8082. Seahub, that serving all the other pages, is still listen on 8000. But "
"under https, Seahub should listen as in fastcgi mode on 8000 (run as ./"
"seahub.sh start-fastcgi). And as in fastcgi mode, when you visit  http://"
"domain:8000 directly, it should return an error page."
msgstr ""
"Seafile 서버는 두가지 부분, Seahub와 FileServer로 이루어져있습니다. "
"FileServer는 8082번 포트에서 요청 대기하며 원시 파일 업로드/다운로드 전용 서"
"버입니다. Seahub는 모든 기타 페이지를 제공하며 8000번 포트에서 요청 대기합니"
"다. 다만 https에서는 Seahub는 8000번 포트에서 fastcgi 모드(./seahub.sh start-"
"fastcgi로 실행)로 요청 대기해야합니다. 그리고 fastcgi 모드에서 http://"
"domain:8000 주소로 바로 접근하면 오류 페이지를 반환해야합니다."

#: deploy/https_with_apache.md:102
msgid "and"
msgstr "그리고"

# code block
#: deploy/https_with_apache.md:103
msgid ""
"```apache\n"
"    FastCGIExternalServer /var/www/seahub.fcgi -host 127.0.0.1:8000\n"
"```"
msgstr ""
"```apache\n"
"    FastCGIExternalServer /var/www/seahub.fcgi -host 127.0.0.1:8000\n"
"```"

#: deploy/https_with_apache.md:107
msgid ""
"When a user click a file download link in Seahub, Seahub reads the value of "
"`FILE_SERVER_ROOT` and redirects the user to address `https://example.com/"
"seafhttp/xxxxx/`. `https://example.com/seafhttp` is the value of "
"FILE_SERVER_ROOT. Here, the `FILE_SERVER` means the FileServer component of "
"Seafile, which only serves for raw file downloading/uploading."
msgstr ""
"사용자가 Seahub의 파일 다운로드 링크를 누르면, Seahub에서 `FILE_SERVER_ROOT` "
"값을 읽고 `https://example.com/seafhttp/xxxxx/` 주소로 사용자를 안내합니다. "
"`https://example.com/seafhttp`는 FILE_SERVER_ROOT의 값입니다. 여기서 "
"`FILE_SERVER`는 원시 파일 업로드/다운로드만 처리하는 Seafile의 FileServer 구"
"성 요소입니다."

# header
#: deploy/https_with_nginx.md:1
msgid "# Enabling Https with Nginx"
msgstr "# Nginx https 활성화"

#: deploy/https_with_nginx.md:3
msgid ""
"Here we use self-signed SSL digital certificate for free. If you use a paid "
"ssl certificate from some authority, just skip the first step."
msgstr ""
"무료 자체 서명 SSL 디지털 인증서를 사용하겠습니다. 일부 인증 기관의 유료 SSL "
"인증서를 사용하신다면 첫 단계를 건너뛰십시오."

# header
#: deploy/https_with_nginx.md:5
msgid "### Generate SSL digital certificate with OpenSSL"
msgstr "### OpenSSL로 SSL 디지털 서명 만들기"

# header
#: deploy/https_with_nginx.md:13
msgid "### Enable SSL module of Nginx (optional)"
msgstr "### Nginx의 SSL 모듈 활성화(선택)"

#: deploy/https_with_nginx.md:14
msgid ""
"If your Nginx does not support SSL, you need to recompile it, the commands "
"are as follows:"
msgstr "Nginx에서 SSL을 지원하지 않으면, 다음 명령으로 다시 컴파일해야합니다:"

# code block
#: deploy/https_with_nginx.md:15
msgid ""
"```bash\n"
"    ./configure --with-http_stub_status_module --with-http_ssl_module\n"
"    make && make install\n"
"```"
msgstr ""
"```bash\n"
"    ./configure --with-http_stub_status_module --with-http_ssl_module\n"
"    make && make install\n"
"```"

# header
#: deploy/https_with_nginx.md:20
msgid "### Modify Nginx configuration file"
msgstr "### Nginx 설정 파일 수정"

#: deploy/https_with_nginx.md:22
msgid ""
"Assume you have configured Nginx as [Deploy-Seafile-with-nginx]"
"(deploy_with_nginx.md). To use https, you need to modify your Nginx "
"configuration file."
msgstr ""
"[Seafile과 Nginx 가동](deploy_with_nginx.md) 편을 따라 Nginx를 설정했다고 가"
"정하겠습니다. https를 사용하려면, Nginx 설정 파일을 수정해야합니다."

# code block
#: deploy/https_with_nginx.md:23
msgid ""
"```nginx\n"
"    server {\n"
"        listen       80;\n"
"        server_name  www.yourdomain.com;\n"
"        rewrite ^ https://$http_host$request_uri? permanent;\t# force "
"redirect http to https\n"
"    }\n"
"\n"
"    server {\n"
"        listen 443;\n"
"        ssl on;\n"
"        ssl_certificate /etc/ssl/cacert.pem;    \t# path to your cacert.pem\n"
"        ssl_certificate_key /etc/ssl/privkey.pem;\t# path to your privkey."
"pem\n"
"        server_name www.yourdomain.com;\n"
"        # ......\n"
"        fastcgi_param   HTTPS               on;\n"
"        fastcgi_param   HTTP_SCHEME         https;\n"
"    }\n"
"```"
msgstr ""
"```nginx\n"
"    server {\n"
"        listen       80;\n"
"        server_name  www.yourdomain.com;\n"
"        rewrite ^ https://$http_host$request_uri? permanent;\t# force "
"redirect http to https\n"
"    }\n"
"\n"
"    server {\n"
"        listen 443;\n"
"        ssl on;\n"
"        ssl_certificate /etc/ssl/cacert.pem;    \t# path to your cacert.pem\n"
"        ssl_certificate_key /etc/ssl/privkey.pem;\t# path to your privkey."
"pem\n"
"        server_name www.yourdomain.com;\n"
"        # ......\n"
"        fastcgi_param   HTTPS               on;\n"
"        fastcgi_param   HTTP_SCHEME         https;\n"
"    }\n"
"```"

# header
#: deploy/https_with_nginx.md:43
msgid "### Sample configuration file"
msgstr "### 예제 설정 파일"

#: deploy/https_with_nginx.md:45
msgid "Here is the sample configuration file:"
msgstr "예제 설정 파일은 다음과 같습니다:"

# code block
#: deploy/https_with_nginx.md:47
msgid ""
"```nginx\n"
"    server {\n"
"        listen       80;\n"
"        server_name  www.yourdomain.com;\n"
"        rewrite ^ https://$http_host$request_uri? permanent;\t# force "
"redirect http to https\n"
"    }\n"
"    server {\n"
"        listen 443;\n"
"        ssl on;\n"
"        ssl_certificate /etc/ssl/cacert.pem;        # path to your cacert."
"pem\n"
"        ssl_certificate_key /etc/ssl/privkey.pem;\t# path to your privkey."
"pem\n"
"        server_name www.yourdoamin.com;\n"
"        proxy_set_header X-Forwarded-For $remote_addr;\n"
"        \n"
"        add_header Strict-Transport-Security \"max-age=31536000; "
"includeSubdomains\";\n"
"        server_tokens off;\n"
"\n"
"        location / {\n"
"            fastcgi_pass    127.0.0.1:8000;\n"
"            fastcgi_param   SCRIPT_FILENAME     $document_root"
"$fastcgi_script_name;\n"
"            fastcgi_param   PATH_INFO           $fastcgi_script_name;\n"
"\n"
"            fastcgi_param   SERVER_PROTOCOL\t    $server_protocol;\n"
"            fastcgi_param   QUERY_STRING        $query_string;\n"
"            fastcgi_param   REQUEST_METHOD      $request_method;\n"
"            fastcgi_param   CONTENT_TYPE        $content_type;\n"
"            fastcgi_param   CONTENT_LENGTH      $content_length;\n"
"            fastcgi_param   SERVER_ADDR         $server_addr;\n"
"            fastcgi_param   SERVER_PORT         $server_port;\n"
"            fastcgi_param   SERVER_NAME         $server_name;\n"
"            fastcgi_param   HTTPS               on;\n"
"            fastcgi_param   HTTP_SCHEME         https;\n"
"\n"
"            access_log      /var/log/nginx/seahub.access.log;\n"
"    \t    error_log       /var/log/nginx/seahub.error.log;\n"
"    \t    fastcgi_read_timeout 36000;\n"
"        }\n"
"        location /seafhttp {\n"
"            rewrite ^/seafhttp(.*)$ $1 break;\n"
"            proxy_pass http://127.0.0.1:8082;\n"
"            client_max_body_size 0;\n"
"            proxy_connect_timeout  36000s;\n"
"            proxy_read_timeout  36000s;\n"
"            proxy_send_timeout  36000s;\n"
"            send_timeout  36000s;\n"
"        }\n"
"        location /media {\n"
"            root /home/user/haiwen/seafile-server-latest/seahub;\n"
"        }\n"
"    }\n"
"```"
msgstr ""
"```nginx\n"
"    server {\n"
"        listen       80;\n"
"        server_name  www.yourdomain.com;\n"
"        rewrite ^ https://$http_host$request_uri? permanent;\t# force "
"redirect http to https\n"
"    }\n"
"    server {\n"
"        listen 443;\n"
"        ssl on;\n"
"        ssl_certificate /etc/ssl/cacert.pem;        # path to your cacert."
"pem\n"
"        ssl_certificate_key /etc/ssl/privkey.pem;\t# path to your privkey."
"pem\n"
"        server_name www.yourdoamin.com;\n"
"        proxy_set_header X-Forwarded-For $remote_addr;\n"
"        \n"
"        add_header Strict-Transport-Security \"max-age=31536000; "
"includeSubdomains\";\n"
"        server_tokens off;\n"
"\n"
"        location / {\n"
"            fastcgi_pass    127.0.0.1:8000;\n"
"            fastcgi_param   SCRIPT_FILENAME     $document_root"
"$fastcgi_script_name;\n"
"            fastcgi_param   PATH_INFO           $fastcgi_script_name;\n"
"\n"
"            fastcgi_param   SERVER_PROTOCOL\t    $server_protocol;\n"
"            fastcgi_param   QUERY_STRING        $query_string;\n"
"            fastcgi_param   REQUEST_METHOD      $request_method;\n"
"            fastcgi_param   CONTENT_TYPE        $content_type;\n"
"            fastcgi_param   CONTENT_LENGTH      $content_length;\n"
"            fastcgi_param   SERVER_ADDR         $server_addr;\n"
"            fastcgi_param   SERVER_PORT         $server_port;\n"
"            fastcgi_param   SERVER_NAME         $server_name;\n"
"            fastcgi_param   HTTPS               on;\n"
"            fastcgi_param   HTTP_SCHEME         https;\n"
"\n"
"            access_log      /var/log/nginx/seahub.access.log;\n"
"    \t    error_log       /var/log/nginx/seahub.error.log;\n"
"    \t    fastcgi_read_timeout 36000;\n"
"        }\n"
"        location /seafhttp {\n"
"            rewrite ^/seafhttp(.*)$ $1 break;\n"
"            proxy_pass http://127.0.0.1:8082;\n"
"            client_max_body_size 0;\n"
"            proxy_connect_timeout  36000s;\n"
"            proxy_read_timeout  36000s;\n"
"            proxy_send_timeout  36000s;\n"
"            send_timeout  36000s;\n"
"        }\n"
"        location /media {\n"
"            root /home/user/haiwen/seafile-server-latest/seahub;\n"
"        }\n"
"    }\n"
"```"

# header
#: deploy/https_with_nginx.md:99
msgid "### Large file uploads"
msgstr "### 대용량 파일 업로드"

# code block
#: deploy/https_with_nginx.md:102
msgid ""
"```\n"
"    location /seafhttp {\n"
"        ... ...\n"
"        proxy_request_buffering off;\n"
"    }\n"
"    \n"
"```"
msgstr ""
"```\n"
"    location /seafhttp {\n"
"        ... ...\n"
"        proxy_request_buffering off;\n"
"    }\n"
"    \n"
"```"

#: deploy/https_with_nginx.md:110
msgid "If you have WebDAV enabled it is recommended to add the same:"
msgstr "WebDAV를 활성화했다면 다음 동일 부분 추가를 추천합니다:"

# code block
#: deploy/https_with_nginx.md:112
msgid ""
"```\n"
"    location /seafdav {\n"
"        ... ...\n"
"        proxy_request_buffering off;\n"
"    }\n"
"```"
msgstr ""
"```\n"
"    location /seafdav {\n"
"        ... ...\n"
"        proxy_request_buffering off;\n"
"    }\n"
"```"

# header
#: deploy/https_with_nginx.md:119
msgid "### Reload Nginx"
msgstr "### Nginx 다시 불러오기"

# code block
#: deploy/https_with_nginx.md:120
msgid ""
"```bash\n"
"    nginx -s reload\n"
"```"
msgstr ""
"```bash\n"
"    nginx -s reload\n"
"```"

# code block
#: deploy/https_with_nginx.md:129
msgid ""
"```bash\n"
"SERVICE_URL = https://www.example.com\n"
"```"
msgstr ""
"```bash\n"
"SERVICE_URL = https://www.example.com\n"
"```"

# code block
#: deploy/https_with_nginx.md:137
msgid ""
"```python\n"
"FILE_SERVER_ROOT = 'https://www.example.com/seafhttp'\n"
"```"
msgstr ""
"```python\n"
"FILE_SERVER_ROOT = 'https://www.example.com/seafhttp'\n"
"```"

# header
#: deploy/https_with_nginx.md:148
msgid "## Additional security settings for nginx (optional)"
msgstr "## Nginx용 추가 보안 설정(개별 선택)"

#: deploy/https_with_nginx.md:150
msgid ""
"Add the HSTS header. If you already visited the https version the next time "
"your browser will visit directly the https site and not the http. Prevent "
"man-in-the-middle-attacks."
msgstr ""
"HSTS 헤더를 추가하십시오. 이미 https 버전 페이지를 방문했다면 다음에는 http"
"가 아닌 https 사이트로 바로 이동합니다. 이러한 조치는 man-in-the-middle-"
"attack 방식 공격을 막습니다."

# code block
#: deploy/https_with_nginx.md:151
msgid ""
"```nginx\n"
"add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains"
"\";\n"
"```"
msgstr ""
"```nginx\n"
"add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains"
"\";\n"
"```"

#: deploy/https_with_nginx.md:155
msgid ""
"Disable exact server version in header. Prevent scans for vulnerable server."
msgstr ""
"헤더에 정확한 서버 버전 표시를 없애십시오. 서버 취약성 탐색을 막아줍니다."

# code block
#: deploy/https_with_nginx.md:156
msgid ""
"```nginx\n"
"server_tokens off;\n"
"```"
msgstr ""
"```nginx\n"
"server_tokens off;\n"
"```"

# header
#: deploy/migrate_from_sqlite_to_mysql.md:1
msgid "# Migrate From SQLite to MySQL"
msgstr "# SQLite에서 MySQL로 이전"

#: deploy/migrate_from_sqlite_to_mysql.md:3
msgid ""
"First make sure the python module for MySQL is installed. On Ubuntu, use "
"`apt-get install python-mysqldb` to install it."
msgstr ""
"우선 MySQL 파이썬 모듈을 설치했는지 확인하십시오. 우분투에서 설치하려면 `apt-"
"get install python-mysqldb` 명령을 활용하십시오."

#: deploy/migrate_from_sqlite_to_mysql.md:5
msgid "Steps to migrate Seafile from SQLite to MySQL:"
msgstr "SQLite에서 MySQL로 이전하는 단계는 다음과 같습니다:"

#: deploy/migrate_from_sqlite_to_mysql.md:7
msgid "0. Stop seafile and seahub"
msgstr "0. Seafile 및 Seahub를 멈춥니다"

# ordered list
#: deploy/migrate_from_sqlite_to_mysql.md:9
msgid ""
"1. Download [sqlite2mysql.sh](https://raw.github.com/haiwen/seafile/master/"
"scripts/sqlite2mysql.sh) and [sqlite2mysql.py](https://raw.github.com/haiwen/"
"seafile/master/scripts/sqlite2mysql.py) to the top directory of your Seafile "
"installation path. For example, /data/haiwen."
msgstr ""
"1. Seafile 설치 경로 상단에 [sqlite2mysql.sh](https://raw.github.com/haiwen/"
"seafile/master/scripts/sqlite2mysql.sh)와 [sqlite2mysql.py](https://raw."
"github.com/haiwen/seafile/master/scripts/sqlite2mysql.py) 스크립트를 다운로드"
"합니다. 최상단 디렉터리의 예는 /data/haiwen과 같습니다."

# ordered list
#: deploy/migrate_from_sqlite_to_mysql.md:11
msgid "2. Run sqlite2mysql.sh"
msgstr "2. sqlite2mysql.sh를 실행합니다"

# code block
#: deploy/migrate_from_sqlite_to_mysql.md:12
msgid ""
"```\n"
"  chmod +x sqlite2mysql.sh\n"
"  ./sqlite2mysql.sh\n"
"```"
msgstr ""
"```\n"
"  chmod +x sqlite2mysql.sh\n"
"  ./sqlite2mysql.sh\n"
"```"

#: deploy/migrate_from_sqlite_to_mysql.md:16
msgid ""
"  This script will produce three files(ccnet-db.sql, seafile-db.sql, seahub-"
"db.sql)."
msgstr ""
"  이 스크립트는 세 파일(ccnet-db.sql, seafile-db.sql, seahub-db.sql)을 만듭니"
"다."

# ordered list
#: deploy/migrate_from_sqlite_to_mysql.md:18
msgid "3. Create 3 databases named `ccnet-db`, `seafile-db`, `seahub-db`."
msgstr "3. `ccnet-db`, `seafile-db`, `seahub-db` 데이터베이스 3개를 만듭니다."

# code block
#: deploy/migrate_from_sqlite_to_mysql.md:19
msgid ""
"```\n"
"  create database `ccnet-db` character set = 'utf8';\n"
"  create database `seafile-db` character set = 'utf8';\n"
"  create database `seahub-db` character set = 'utf8';\n"
"```"
msgstr ""
"```\n"
"  create database `ccnet-db` character set = 'utf8';\n"
"  create database `seafile-db` character set = 'utf8';\n"
"  create database `seahub-db` character set = 'utf8';\n"
"```"

# ordered list
#: deploy/migrate_from_sqlite_to_mysql.md:25
msgid "4. Loads the sql files to your MySQL databases. For example:"
msgstr "4. MySQL 데이터베이스에 sql 파일을 불러옵니다. 예를 들자면:"

# code block
#: deploy/migrate_from_sqlite_to_mysql.md:26
msgid ""
"```\n"
"  mysql> use `ccnet-db`\n"
"  mysql> source ccnet-db.sql\n"
"  mysql> use `seafile-db`\n"
"  mysql> source seafile-db.sql\n"
"  mysql> use `seahub-db`\n"
"  mysql> source seahub-db.sql\n"
"```"
msgstr ""
"```\n"
"  mysql> use `ccnet-db`\n"
"  mysql> source ccnet-db.sql\n"
"  mysql> use `seafile-db`\n"
"  mysql> source seafile-db.sql\n"
"  mysql> use `seahub-db`\n"
"  mysql> source seahub-db.sql\n"
"```"

# ordered list
#: deploy/migrate_from_sqlite_to_mysql.md:35
msgid "5. Modify configure files"
msgstr "5. 설정 파일을 수정합니다"

#: deploy/migrate_from_sqlite_to_mysql.md:37
msgid "  Append following lines to [ccnet.conf](../config/ccnet-conf.md):"
msgstr "  다음 줄을 [ccnet.conf](../config/ccnet-conf.md)에 추가하십시오:"

#: deploy/migrate_from_sqlite_to_mysql.md:39 deploy/using_postgresql.md:31
msgid "        [Database]"
msgstr "        [Database]"

#: deploy/migrate_from_sqlite_to_mysql.md:40
msgid "        ENGINE=mysql"
msgstr "        ENGINE=mysql"

#: deploy/migrate_from_sqlite_to_mysql.md:41
msgid "        HOST=127.0.0.1"
msgstr "        HOST=127.0.0.1"

#: deploy/migrate_from_sqlite_to_mysql.md:42
msgid "        USER=root"
msgstr "        USER=root"

#: deploy/migrate_from_sqlite_to_mysql.md:43
msgid "        PASSWD=root"
msgstr "        PASSWD=root"

#: deploy/migrate_from_sqlite_to_mysql.md:44
msgid "        DB=ccnet-db"
msgstr "        DB=ccnet-db"

#: deploy/migrate_from_sqlite_to_mysql.md:45
#: deploy/migrate_from_sqlite_to_mysql.md:57
msgid "        CONNECTION_CHARSET=utf8"
msgstr "        CONNECTION_CHARSET=utf8"

#: deploy/migrate_from_sqlite_to_mysql.md:47
msgid "    Note: Use `127.0.0.1`, don't use `localhost`."
msgstr "    참고: `localhost`를 사용하지 마시고 `127.0.0.1`을 사용하십시오."

#: deploy/migrate_from_sqlite_to_mysql.md:49
msgid ""
"    Replace the database section in `seafile.conf` with following lines:"
msgstr ""
"    `seafile.conf`의 데이터베이스 섹션을 다음 줄의 내용으로 바꾸십시오:"

#: deploy/migrate_from_sqlite_to_mysql.md:51 deploy/using_postgresql.md:40
msgid "        [database]"
msgstr "        [database]"

#: deploy/migrate_from_sqlite_to_mysql.md:52
msgid "        type=mysql"
msgstr "        type=mysql"

#: deploy/migrate_from_sqlite_to_mysql.md:53
msgid "        host=127.0.0.1"
msgstr "        host=127.0.0.1"

#: deploy/migrate_from_sqlite_to_mysql.md:54
msgid "        user=root"
msgstr "        user=root"

#: deploy/migrate_from_sqlite_to_mysql.md:55
msgid "        password=root"
msgstr "        password=root"

#: deploy/migrate_from_sqlite_to_mysql.md:56
msgid "        db_name=seafile-db"
msgstr "        db_name=seafile-db"

#: deploy/migrate_from_sqlite_to_mysql.md:59 deploy/using_postgresql.md:47
msgid "    Append following lines to `seahub_settings.py`:"
msgstr "    다음 줄을 `seahub_settings.py`에 추가하십시오:"

#: deploy/migrate_from_sqlite_to_mysql.md:61 deploy/using_postgresql.md:49
msgid "        DATABASES = {"
msgstr "        DATABASES = {"

#: deploy/migrate_from_sqlite_to_mysql.md:62 deploy/using_postgresql.md:50
msgid "            'default': {"
msgstr "            'default': {"

#: deploy/migrate_from_sqlite_to_mysql.md:63
msgid "                'ENGINE': 'django.db.backends.mysql',"
msgstr "                'ENGINE': 'django.db.backends.mysql',"

#: deploy/migrate_from_sqlite_to_mysql.md:64
msgid "                'USER' : 'root',"
msgstr "                'USER' : 'root',"

#: deploy/migrate_from_sqlite_to_mysql.md:65
msgid "                'PASSWORD' : 'root',"
msgstr "                'PASSWORD' : 'root',"

#: deploy/migrate_from_sqlite_to_mysql.md:66
msgid "                'NAME' : 'seahub-db',"
msgstr "                'NAME' : 'seahub-db',"

#: deploy/migrate_from_sqlite_to_mysql.md:67
msgid "                'HOST' : '127.0.0.1',"
msgstr "                'HOST' : '127.0.0.1',"

#: deploy/migrate_from_sqlite_to_mysql.md:68
msgid "                'OPTIONS': {"
msgstr "                'OPTIONS': {"

#: deploy/migrate_from_sqlite_to_mysql.md:69
msgid "                    \"init_command\": \"SET storage_engine=INNODB\","
msgstr "                    \"init_command\": \"SET storage_engine=INNODB\","

#: deploy/migrate_from_sqlite_to_mysql.md:70
msgid "                }"
msgstr "                }"

#: deploy/migrate_from_sqlite_to_mysql.md:71 deploy/using_postgresql.md:56
msgid "            }"
msgstr "            }"

#: deploy/migrate_from_sqlite_to_mysql.md:72 deploy/using_postgresql.md:57
msgid "        }"
msgstr "        }"

# ordered list
#: deploy/migrate_from_sqlite_to_mysql.md:74
msgid "6. Restart seafile and seahub"
msgstr "4. Seafile과 Seahub를 다시 시작합니다"

#: deploy/migrate_from_sqlite_to_mysql.md:77
msgid "**NOTE**"
msgstr "**참고**"

#: deploy/migrate_from_sqlite_to_mysql.md:79
msgid ""
"User notifications will be cleared during migration due to the slight "
"difference between MySQL and SQLite, if you only see the busy icon when "
"click the notitfications button beside your avatar, please remove "
"`user_notitfications` table manually by:"
msgstr ""
"MySQL 및 SQLite의 약간의 차이점 때문에 사용자 알림을 삭제합니다. 아바타 옆의 "
"알림 단추를 눌렀을 때 사용 중 아이콘만 나타내려면 `user_notifications` 표를 "
"다음과 같이 제거하십시오:"

#: deploy/migrate_from_sqlite_to_mysql.md:81
msgid "    use seahub-db"
msgstr "    use seahub-db"

#: deploy/migrate_from_sqlite_to_mysql.md:82
msgid "    delete from notifications_usernotification;"
msgstr "    delete from notifications_usernotification;"

# header
#: deploy/new_directory_layout_5_0_0.md:1
msgid "# Config files location change in Seafile Server 5.0.0"
msgstr "# Seafile 서버 5.0.0에서 바뀐 설정 파일 위치"

#: deploy/new_directory_layout_5_0_0.md:3
msgid ""
"Seafile server has various components, each of them has its own config "
"files. These files used to be in different directories, which is "
"inconvenient to manage."
msgstr ""
"Seafile 서버는 각자 설정 파일을 보유한 다양한 구성 요소가 있습니다. 이 파일"
"은 관리하기 불편한 다른 디렉터리에 있었습니다."

#: deploy/new_directory_layout_5_0_0.md:5
msgid "This is the layout before Seafile Server 5.0.0:"
msgstr "Seafile 서버 5.0.0 전의 디렉터리 배치는 다음과 같습니다:"

# code block
#: deploy/new_directory_layout_5_0_0.md:7
msgid ""
"```sh\n"
"└── seahub_settings.py\n"
"└── ccnet/\n"
"    └── ccnet.conf\n"
"└── seafile/\n"
"    └── seafile.conf\n"
"└── conf/\n"
"    └── seafdav.conf\n"
"└── pro-data/\n"
"    └── seafevents.conf # (professional edition only)\n"
"└── seafile-server-latest/\n"
"```"
msgstr ""
"```sh\n"
"└── seahub_settings.py\n"
"└── ccnet/\n"
"    └── ccnet.conf\n"
"└── seafile/\n"
"    └── seafile.conf\n"
"└── conf/\n"
"    └── seafdav.conf\n"
"└── pro-data/\n"
"    └── seafevents.conf # (전문가판 전용)\n"
"└── seafile-server-latest/\n"
"```"

#: deploy/new_directory_layout_5_0_0.md:20
msgid ""
"Since Seafile Server 5.0.0, all config files are moved to the **conf** "
"folder:"
msgstr "Seafile 서버 5.0.0부터 모든 설정 파일을 **conf** 폴더로 이동했습니다:"

# code block
#: deploy/new_directory_layout_5_0_0.md:22
msgid ""
"```sh\n"
"└── conf/\n"
"    └── ccnet.conf\n"
"    └── seafile.conf\n"
"    └── seafdav.conf\n"
"    └── seahub_settings.py\n"
"    └── seafevents.conf # (professional edition only)\n"
"└── ccnet/\n"
"└── seafile/\n"
"└── pro-data/\n"
"```"
msgstr ""
"```sh\n"
"└── conf/\n"
"    └── ccnet.conf\n"
"    └── seafile.conf\n"
"    └── seafdav.conf\n"
"    └── seahub_settings.py\n"
"    └── seafevents.conf # (전문가판 전용)\n"
"└── ccnet/\n"
"└── seafile/\n"
"└── pro-data/\n"
"```"

#: deploy/new_directory_layout_5_0_0.md:34
msgid ""
"This way, it's much easier to manage the configurations since all files can "
"be found in the same place."
msgstr ""
"이런식으로 모든 파일을 동일한 위치에서 찾을 수 있어 설정을 더욱 쉽게 관리할 "
"수 있습니다."

#: deploy/new_directory_layout_5_0_0.md:36
msgid ""
"When you upgrading to seafile 5.0.0, the upgrade script would move these "
"files to the central **conf/** folder for you."
msgstr ""
"Seafile 5.0.0으로 업그레이드하면, 업그레이드 스크립트는 **conf/** 폴더에 이 "
"설정 파일을 한데 모아놓습니다."

# header
#: deploy/server.md:2
msgid "## Server"
msgstr "## 서버"

#: deploy/server.md:4
msgid ""
"This manual explains how to setup and run Seafile server from a pre-built "
"package."
msgstr ""
"이 설명서는 미리 빌드한 Seafile 서버 꾸러미를 설치하고 실행하는 방법을 설명합"
"니다."

# header
#: deploy/server.md:6
msgid "## Platform Support"
msgstr "## 플랫폼 지원"

# unordered list
#: deploy/server.md:8 deploy/using_sqlite.md:8
msgid "- Generic Linux"
msgstr "- 일반 리눅스"

# unordered list
#: deploy/server.md:9
msgid "    - including Raspberry Pi"
msgstr "    - 라즈베리 파이 포함"

# unordered list
#: deploy/server.md:10 deploy/using_sqlite.md:9
msgid "- Windows"
msgstr "- 윈도우"

# header
#: deploy/server.md:12 deploy/using_mysql.md:5
msgid "## Download"
msgstr "## 다운로드"

#: deploy/server.md:14
msgid ""
"Visit [our download page](http://www.seafile.com/en/download), download the "
"latest server package."
msgstr ""
"[다운로드 페이지](http://www.seafile.com/en/download)로 가셔서 최신 서버 꾸러"
"미를 다운로드하십시오."

# inline html
#: deploy/server.md:16
msgid ""
"<pre>\n"
"#check if your system is x86 (32bit) or x86_64 (64 bit)\n"
"uname -m\n"
"</pre>"
msgstr ""
"<pre>\n"
"#check if your system is x86 (32bit) or x86_64 (64 bit)\n"
"uname -m\n"
"</pre>"

# header
#: deploy/server.md:22 deploy/using_mysql.md:10 deploy/using_sqlite.md:19
msgid "## Deploying and Directory Layout"
msgstr "## Deploying and Directory Layout"

#: deploy/server.md:24
msgid ""
"NOTE: If you place the Seafile data directory in external storage, such as "
"NFS, CIFS mount, you should not use SQLite as the database, but use MySQL "
"instead. Please follow [https://github.com/haiwen/seafile/wiki/Download-and-"
"Setup-Seafile-Server-with-MySQL this manual] to setup Seafile server."
msgstr ""
"참고: NFS, CIFS 마운트로 외장 저장소에 Seafile 데이터 디렉터리를 두는 경우 "
"SQLite를 데이터베이스로 쓰면 안되며, 대신 MySQL을 쓰셔야합니다. Seafile 서버 "
"설정시 [https://github.com/haiwen/seafile/wiki/Download-and-Setup-Seafile-"
"Server-with-MySQL 이 설명서] 내용을 따르십시오."

#: deploy/server.md:26
msgid ""
"Supposed your organization's name is \"haiwen\", and you've downloaded "
"seafile-server_1.4.0_* into your home directory."
msgstr ""
"조직 이름을 \"haiwen\"이라 하고, seafile-server_1.4.0_*을 내 폴더에 다운로드"
"했음을 가정하겠습니다."

#: deploy/server.md:27
msgid "We suggest you to layout your deployment as follows :"
msgstr "가동 구성을 다음과 같이 제안합니다 :"

# inline html
#: deploy/server.md:29 deploy/using_mysql.md:14
msgid ""
"<pre>\n"
"mkdir haiwen\n"
"mv seafile-server_* haiwen\n"
"cd haiwen\n"
"# after moving seafile-server_* to this directory\n"
"tar -xzf seafile-server_*\n"
"mkdir installed\n"
"mv seafile-server_* installed\n"
"</pre>"
msgstr ""
"<pre>\n"
"mkdir haiwen\n"
"mv seafile-server_* haiwen\n"
"cd haiwen\n"
"# after moving seafile-server_* to this directory\n"
"tar -xzf seafile-server_*\n"
"mkdir installed\n"
"mv seafile-server_* installed\n"
"</pre>"

#: deploy/server.md:39 deploy/using_mysql.md:24 deploy/using_sqlite.md:34
msgid "Now you should have the following directory layout"
msgstr "이제 다음 디렉터리 배치 상태를 갖추고 있어야합니다"

# inline html
#: deploy/server.md:40
msgid ""
"<pre>\n"
"# tree . -L 2\n"
".\n"
"├── installed\n"
"│   └── seafile-server_1.4.0_x86-64.tar.gz\n"
"└── seafile-server-1.4.0\n"
"    ├── reset-admin.sh\n"
"    ├── runtime\n"
"    ├── seafile\n"
"    ├── seafile.sh\n"
"    ├── seahub\n"
"    ├── seahub.sh\n"
"    ├── setup-seafile.sh\n"
"    └── upgrade\n"
"</pre>"
msgstr ""
"<pre>\n"
"# tree . -L 2\n"
".\n"
"├── installed\n"
"│   └── seafile-server_1.4.0_x86-64.tar.gz\n"
"└── seafile-server-1.4.0\n"
"    ├── reset-admin.sh\n"
"    ├── runtime\n"
"    ├── seafile\n"
"    ├── seafile.sh\n"
"    ├── seahub\n"
"    ├── seahub.sh\n"
"    ├── setup-seafile.sh\n"
"    └── upgrade\n"
"</pre>"

#: deploy/server.md:56
msgid "'''The benefit of this layout is that'''"
msgstr "'''이 디렉터리 배치의 장점은'''"

# unordered list
#: deploy/server.md:58 deploy/using_mysql.md:43
msgid ""
"* We can place all the config files for Seafile server inside \"haiwen\" "
"directory, making it easier to manage."
msgstr ""
"* \"haiwen\" 디렉터리에 Seafile 서버에 필요한 모든 설정 파일을 둘 수 있어 관"
"리하기 쉽습니다."

# unordered list
#: deploy/server.md:59
msgid ""
"* When you upgrade to a new version of Seafile, you can simply untar the "
"latest package into \"haiwen\" directory. ''In this way you can reuse the "
"existing config files in \"haiwen\" directory and don't need to configure "
"again''."
msgstr ""
"* Seafile 새 버전으로 업그레이드 할 때 \"haiwen\" 디렉터리에 최신 꾸러미 압축"
"을 풀기만 하면 됩니다. ''이 방식으로 \"haiwen\" 디렉터리의 기존 설정 파일을 "
"다시 사용할 수 있으며, 설정 값을 다시 만들 필요가 없습니다''."

# header
#: deploy/server.md:61 deploy/using_mysql.md:80 deploy/using_sqlite.md:57
msgid "## Setting Up Seafile Server"
msgstr "## Seafile 서버 설치"

# header
#: deploy/server.md:63 deploy/using_sqlite.md:58
msgid "#### Prerequisites"
msgstr "#### 사전 요구사항"

#: deploy/server.md:65 deploy/using_mysql.md:84 deploy/using_sqlite.md:60
msgid ""
"The Seafile server package requires the following packages have been "
"installed in your system"
msgstr ""
"Seafile 서버 꾸러미에서는 시스템에 우선 설치한 다음 꾸러미가 필요합니다."

# unordered list
#: deploy/server.md:67
msgid "* python 2.6.5+ or 2.7"
msgstr "* python 2.6.5+ or 2.7"

# unordered list
#: deploy/server.md:68 deploy/using_mysql.md:87
msgid "* python-setuptools"
msgstr "* python-setuptools"

# unordered list
#: deploy/server.md:69
msgid "* python-simplejson"
msgstr "* python-simplejson"

# unordered list
#: deploy/server.md:70 deploy/using_mysql.md:88
msgid "* python-imaging"
msgstr "* python-imaging"

# unordered list
#: deploy/server.md:71
msgid "* sqlite3"
msgstr "* sqlite3"

# inline html
#: deploy/server.md:73
msgid ""
"<pre>\n"
"#on Debian\n"
"apt-get update\n"
"apt-get install python2.7 python-setuptools python-simplejson python-imaging "
"sqlite3\n"
"</pre>"
msgstr ""
"<pre>\n"
"# Debian\n"
"apt-get update\n"
"apt-get install python2.7 python-setuptools python-simplejson python-imaging "
"sqlite3\n"
"</pre>"

# header
#: deploy/server.md:79 deploy/using_sqlite.md:79
msgid "#### Setup"
msgstr "#### 설정"

# inline html
#: deploy/server.md:81
msgid ""
"<pre>\n"
"cd seafile-server-*\n"
"./setup-seafile.sh  #run the setup script & answer prompted questions\n"
"</pre>"
msgstr ""
"<pre>\n"
"cd seafile-server-*\n"
"./setup-seafile.sh  #run the setup script & answer prompted questions\n"
"</pre>"

#: deploy/server.md:86 deploy/using_mysql.md:112
msgid ""
"If some of the prerequisites are not installed, the seafile initialization "
"script will ask you to install them."
msgstr ""
"선행 요구사항을 설치하지 않았다면 Seafile 초기화 스크립트에서 해당 구성요소"
"를 설치하라고 요청합니다."

#: deploy/server.md:88
msgid ""
"[[images/server-setup.png|You'll see these outputs when you run the setup "
"script]]"
msgstr ""
"[[images/server-setup.png|설정 스크립트를 실행하면 볼 수 있는 출력입니다]]"

#: deploy/server.md:90 deploy/using_mysql.md:114 deploy/using_sqlite.md:88
msgid ""
"The script will guide you through the settings of various configuration "
"options."
msgstr "스크립트는 다양한 설정 옵션 설정을 안내합니다."

# table
#: deploy/server.md:93
msgid ""
"{| border=\"1\" cellspacing=\"0\" cellpadding=\"5\" align=\"center\"\n"
"|+ Seafile configuration options\n"
"! Option\n"
"! Description\n"
"! Note\n"
"|-\n"
"| server name\n"
"| Name of this seafile server\n"
"| 3-15 characters, only English letters, digits and underscore ('_') are "
"allowed\n"
"|-\n"
"| server ip or domain\n"
"| The IP address or domain name used by this server\n"
"| Seafile client program will access the server with this address\n"
"|-\n"
"| ccnet server port\n"
"| The TCP port used by ccnet, the underlying networking service of Seafile\n"
"| Default is 10001. If it's been used by other service, you can set it to "
"another port.\n"
"|-\n"
"| seafile data dir\n"
"| Seafile stores your data in this directory. By default it'll be placed in "
"the current directory.\n"
"| The size of this directory will increase as you put more and more data "
"into Seafile. Please select a disk partition with enough free space.\n"
"|-\n"
"| seafile server port\n"
"| The TCP port used by Seafile to transfer data\n"
"| Default is 12001. If it's been used by other service, you can set it to "
"another port.\n"
"|-\n"
"| fileserver  port\n"
"| The TCP port used by Seafile fileserver\n"
"| Default is 8082. If it's been used by other service, you can set it to "
"another port.\n"
"|-\n"
"|}"
msgstr ""
"{| border=\"1\" cellspacing=\"0\" cellpadding=\"5\" align=\"center\"\n"
"|+ Seafile 설정 항목\n"
"! 설정 항목\n"
"! 설명\n"
"! 참고\n"
"|-\n"
"| 서버 이름\n"
"| Seafile 서버 이름\n"
"| 3-15 문자, 영문자, 숫자, 밑줄 문자('_')만 허용\n"
"|-\n"
"| 서버 IP 또는 도메인\n"
"| 서버에서 사용하는 IP 주소 또는 도메인 이름\n"
"| Seafile 클라이언트 프로그램에서 이 주소로 서버에 접근합니다\n"
"|-\n"
"| ccnet 서버 포트\n"
"| Seafile의 네트워크 하부 서비스 ccnet에서 사용하는 TCP 포트\n"
"| 기본값은 10001 입니다. 다른 서비스에서 이미 사용중이라면 다른 포트 번호로 "
"설정할 수 있습니다.\n"
"|-\n"
"| Seafile 데이터 디렉터리\n"
"| Seafile은 이 디렉터리에 데이터를 저장합니다. 기본적으로 현재 디렉터리에 저"
"장합니다.\n"
"| 이 디렉터리 크기는 Seafile에 데이터를 넣는 만큼 늘어납니다. 충분한 용량을 "
"갖는 디스크 분할 영역을 선택하십시오.\n"
"|-\n"
"| Seafile 서버 포트\n"
"| Seafile에서 데이터 전송에 사용하는 TCP 포트\n"
"| 기본값은 12001 입니다. 다른 서비스에서 이미 사용중이라면 다른 포트 번호로 "
"설정할 수 있습니다.\n"
"|-\n"
"| fileserver 포트\n"
"| Seafile 파일 서버에서 사용하는 TCP 포트입니다\n"
"| 기본값은 8082 입니다. 다른 서비스에서 이미 사용중이라면 다른 포트 번호로 설"
"정할 수 있습니다.\n"
"|-\n"
"|}"

#: deploy/server.md:126 deploy/using_mysql.md:175
msgid "If the setup is successful, you'll see the following output"
msgstr "설정을 완전히 끝냈으면 다음 출력을 볼 수 있습니다"

#: deploy/server.md:128
msgid "[[images/server-setup-successfully.png]]"
msgstr "[[images/server-setup-successfully.png]]"

#: deploy/server.md:130 deploy/using_mysql.md:179
msgid "Now you should have the following directory layout :"
msgstr "이제 다음 디렉터리 배치 상태를 지니고 있어야합니다:"

# inline html
#: deploy/server.md:131
msgid ""
"<pre>\n"
"#tree haiwen -L 2\n"
"haiwen\n"
"├── ccnet               # configuration files\n"
"│   ├── ccnet.conf\n"
"│   ├── mykey.peer\n"
"│   ├── PeerMgr\n"
"│   └── seafile.ini\n"
"├── installed\n"
"│   └── seafile-server_1.4.0_x86-64.tar.gz\n"
"├── seafile-data\n"
"│   └── seafile.conf\n"
"├── seafile-server-1.4.0  # active version\n"
"│   ├── reset-admin.sh\n"
"│   ├── runtime\n"
"│   ├── seafile\n"
"│   ├── seafile.sh\n"
"│   ├── seahub\n"
"│   ├── seahub.sh\n"
"│   ├── setup-seafile.sh\n"
"│   └── upgrade\n"
"├── seafile-server-latest  # symbolic link to seafile-server-1.4.0\n"
"├── seahub-data\n"
"│   └── avatars\n"
"├── seahub.db\n"
"├── seahub_settings.py   # optional config file\n"
"└── seahub_settings.pyc\n"
"</pre>"
msgstr ""
"<pre>\n"
"#tree haiwen -L 2\n"
"haiwen\n"
"├── ccnet               # 설정 파일\n"
"│   ├── ccnet.conf\n"
"│   ├── mykey.peer\n"
"│   ├── PeerMgr\n"
"│   └── seafile.ini\n"
"├── installed\n"
"│   └── seafile-server_1.4.0_x86-64.tar.gz\n"
"├── seafile-data\n"
"│   └── seafile.conf\n"
"├── seafile-server-1.4.0  # 현재 버전\n"
"│   ├── reset-admin.sh\n"
"│   ├── runtime\n"
"│   ├── seafile\n"
"│   ├── seafile.sh\n"
"│   ├── seahub\n"
"│   ├── seahub.sh\n"
"│   ├── setup-seafile.sh\n"
"│   └── upgrade\n"
"├── seafile-server-latest  # seafile-server-1.4.0 심볼릭 링크\n"
"├── seahub-data\n"
"│   └── avatars\n"
"├── seahub.db\n"
"├── seahub_settings.py   # 추가 설정 파일\n"
"└── seahub_settings.pyc\n"
"</pre>"

#: deploy/server.md:160 deploy/using_mysql.md:208
msgid ""
"The folder <code>seafile-server-latest</code> is a symbolic link to the "
"current seafile server folder. When later you upgrade to a new version, the "
"upgrade scripts would update this link to keep it always point to the latest "
"seafile server folder."
msgstr ""
"<code>seafile-server-latest</code> 폴더는 현재 Seafile 서버 폴더의 심볼릭 링"
"크입니다. 나중에 새 버전으로 업그레이드 하면, 업그레이드 스크립트에서 이 링크"
"를 업데이트하여 항상 최신 Seafile 서버 폴더를 가리키도록 합니다."

# header
#: deploy/server.md:163 deploy/using_mysql.md:210 deploy/using_sqlite.md:133
msgid "## Running Seafile Server"
msgstr "## Seafile 서버 실행"

# header
#: deploy/server.md:165 deploy/using_sqlite.md:135
msgid "#### Before Running"
msgstr "#### 실행 전"

#: deploy/server.md:167
msgid ""
"Since Seafile uses persistent connection between client and server, if you "
"have '''a large number of clients ''', you should increase Linux file "
"descriptors by ulimit before start seafile, like:"
msgstr ""
"Seafile은 클라이언트 서버간 연결을 유지하므로 '''상당히 많은 클라이언트'''를 "
"보유하고 있다면, Seafile을 시작하기 전, 다음과 같이 ulimit으로 리눅스 파일 서"
"술자 갯수를 늘리셔야합니다:"

# inline html
#: deploy/server.md:169
msgid ""
"<pre>\n"
"ulimit -n 30000\n"
"</pre>"
msgstr ""
"<pre>\n"
"ulimit -n 30000\n"
"</pre>"

# header
#: deploy/server.md:173 deploy/using_sqlite.md:141
msgid "#### Starting Seafile Server and Seahub Website"
msgstr "#### Seafile 서버 및 Seafile 웹사이트 시작하기"

#: deploy/server.md:175
msgid "Under seafile-server-1.4.0 directory, run the following commands"
msgstr "seafile-server-1.4.0 디렉터리 아래에서 다음 명령을 실행하십시오"

# unordered list
#: deploy/server.md:177
msgid "* Start seafile:"
msgstr "* Seafile을 시작하십시오:"

# inline html
#: deploy/server.md:179
msgid ""
"<pre>\n"
"./seafile.sh start # Start seafile service\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seafile.sh start # Start seafile service\n"
"</pre>"

# unordered list
#: deploy/server.md:183
msgid "* Start seahub"
msgstr "* Seahub를 시작하십시오"

# inline html
#: deploy/server.md:185
msgid ""
"<pre>\n"
"./seahub.sh start <port>  # Start seahub website, port defaults to 8000\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seahub.sh start <port>  # Start seahub website, port defaults to 8000\n"
"</pre>"

#: deploy/server.md:189
msgid ""
"'''Note:''' The first time you start seahub, the script would prompt you to "
"create an admin account for your seafile server."
msgstr ""
"'''참고''': seahub를 처음 시작할 때, 스크립트에서는 Seafile 서버에서 사용할 "
"admin 계정 생성 여부를 물어봅니다."

#: deploy/server.md:191
msgid "After starting the services, you may open a web browser and types"
msgstr "서비스를 시작하고 나면 웹 브라우저를 열고 다음 주소를 입력하십시오"

# inline html
#: deploy/server.md:192
msgid ""
"<pre>\n"
"http://192.168.1.111:8000/\n"
"</pre>"
msgstr ""
"<pre>\n"
"http://192.168.1.111:8000/\n"
"</pre>"

#: deploy/server.md:195
msgid ""
"you will be redirected to the Login page. Enter the username and password "
"you were provided during the Seafile setup. You will then be returned to the "
"`Myhome` page where you can create libraries."
msgstr ""
"로그인 페이지로 이동합니다. Seafile 설정 중 제시한 사용자 이름 및 암호를 입력"
"하십시오. 라이브러리를 만들 수 있는 ` 내 페이지`로 돌아갑니다."

#: deploy/server.md:197
msgid ""
"'''Congratulations!''' Now you have successfully setup your private Seafile "
"server."
msgstr ""
"'''고생하셨습니다!''' 이제 개인 Seafile 서버 설정을 성공적으로 끝냈습니다."

# header
#: deploy/server.md:199 deploy/using_sqlite.md:163
msgid "#### Run Seahub on another port"
msgstr "#### 다른 포트에서 Seahub 실행"

#: deploy/server.md:201 deploy/using_mysql.md:237
msgid ""
"If you want to run seahub in a port other than the default 8000, say 8001, "
"you must:"
msgstr ""
"8000번 기본 포트 대신 8001번과 같은 포트 번호에서 Seahub를 실행하려면 다음 과"
"정을 수행해야합니다:"

# unordered list
#: deploy/server.md:203 deploy/using_mysql.md:239
msgid "* stop the seafile server"
msgstr "* Seafile 서버를 멈추십시오"

# inline html
#: deploy/server.md:204 deploy/using_mysql.md:240
msgid ""
"<pre>\n"
"./seahub.sh stop\n"
"./seafile.sh stop\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seahub.sh stop\n"
"./seafile.sh stop\n"
"</pre>"

# unordered list
#: deploy/server.md:209
msgid ""
"* modify the value of <code>SERVICE_URL</code> in the file [ccnet.conf](../"
"config/ccnet-conf.md), like this: (assume your ip or domain is "
"<code>192.168.1.100</code>)"
msgstr ""
"* [ccnet.conf](../config/ccnet-conf.md)파일의 <code>SERVICE_URL</code> 값을 "
"다음과 같은 값으로 바꾸십시오(IP 또는 도메인을 <code>192.168.1.100</code>으"
"로 가정):"

# inline html
#: deploy/server.md:210
msgid ""
"<pre>\n"
"SERVICE_URL = http://192.168.1.100:8001\n"
"</pre>"
msgstr ""
"<pre>\n"
"SERVICE_URL = http://192.168.1.100:8001\n"
"</pre>"

# unordered list
#: deploy/server.md:214 deploy/using_mysql.md:250
msgid "* restart seafile server"
msgstr "* Seafile 서버를 다시 시작하십시오"

# inline html
#: deploy/server.md:215 deploy/using_mysql.md:251
msgid ""
"<pre>\n"
"./seafile.sh start\n"
"./seahub.sh start 8001\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seafile.sh start\n"
"./seahub.sh start 8001\n"
"</pre>"

#: deploy/server.md:220
msgid ""
"see [[Seafile server configuration options]] for more details about "
"<code>ccnet.conf</code>."
msgstr ""
"<code>ccnet.conf</code>에 대한 자세한 내용을 알아보려면 [[Seafile server "
"configuration options|Seafile 서버 설정 항목]]을 참고하십시오."

# header
#: deploy/server.md:222 deploy/using_mysql.md:258
msgid "## Stopping and Restarting Seafile and Seahub"
msgstr "## Seafile 및 Seahub 중지 및 다시 시작"

# header
#: deploy/server.md:224 deploy/using_mysql.md:260 deploy/using_sqlite.md:187
msgid "#### Stopping"
msgstr "#### 중지"

# inline html
#: deploy/server.md:226 deploy/using_mysql.md:262
msgid ""
"<pre>\n"
"./seahub.sh stop # stop seahub website\n"
"./seafile.sh stop # stop seafile processes\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seahub.sh stop # stop seahub website\n"
"./seafile.sh stop # stop seafile processes\n"
"</pre>"

# header
#: deploy/server.md:231 deploy/using_mysql.md:267 deploy/using_sqlite.md:192
msgid "#### Restarting"
msgstr "#### 다시 시작"

# inline html
#: deploy/server.md:233 deploy/using_mysql.md:269
msgid ""
"<pre>\n"
"./seafile.sh restart\n"
"./seahub.sh restart\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seafile.sh restart\n"
"./seahub.sh restart\n"
"</pre>"

# header
#: deploy/server.md:238 deploy/using_mysql.md:274 deploy/using_sqlite.md:197
msgid "#### When the Scripts Fail"
msgstr "#### 스크립트 동작에 실패했을 때"

#: deploy/server.md:240 deploy/using_mysql.md:276
msgid ""
"Most of the time, seafile.sh and seahub.sh work fine. But if they fail, you "
"may"
msgstr ""
"대부분의 경우 seafile.sh와 seahub.sh는 잘 동작합니다. 하지만 동작에 실패했을 "
"경우:"

# unordered list
#: deploy/server.md:242
msgid ""
"* Use '''pgrep''' command to check if seafile/seahub processes are still "
"running"
msgstr ""
"* '''pgrep''' 명령으로 seafile/seahub 프로세스가 여전히 동작중인지 확인하십시"
"오"

# inline html
#: deploy/server.md:244 deploy/using_mysql.md:280
msgid ""
"<pre>\n"
"pgrep -f seafile-controller # check seafile processes\n"
"pgrep -f \"manage.py run_gunicorn\" # check seahub process\n"
"</pre>"
msgstr ""
"<pre>\n"
"pgrep -f seafile-controller # check seafile processes\n"
"pgrep -f \"manage.py run_gunicorn\" # check seahub process\n"
"</pre>"

# unordered list
#: deploy/server.md:249
msgid "* Use '''pkill''' to kill the processes"
msgstr "* '''pkill''' 명령으로 해당 프로세스를 강제로 끝내십시오"

# inline html
#: deploy/server.md:251 deploy/using_mysql.md:287
msgid ""
"<pre>\n"
"pkill -f seafile-controller\n"
"pkill -f \"manage.py run_gunicorn\"\n"
"</pre>"
msgstr ""
"<pre>\n"
"pkill -f seafile-controller\n"
"pkill -f \"manage.py run_gunicorn\"\n"
"</pre>"

# header
#: deploy/server.md:256 deploy/using_mysql.md:296 deploy/using_sqlite.md:213
msgid "## That's it!"
msgstr "## 다 됐습니다!"

#: deploy/server.md:257 deploy/using_mysql.md:298
msgid "That's it! Now you may want read more about seafile."
msgstr "다 됐습니다! 이제 Seafile에 대한 내용을 더 읽어 볼 차례입니다."

# unordered list
#: deploy/server.md:259
msgid "* [[Seafile-server-management|How to manage the server]]."
msgstr "* [[Seafile-server-management|서버 관리 방법]]."

# header
#: deploy/server_configuration.md:1
msgid "# Server Configuration and Customization"
msgstr "# 서버 설정 및 개별 설정"

#: deploy/server_configuration.md:3
msgid ""
"**Note**: Since Seafile Server 5.0.0, all config files are moved to the "
"central **conf** folder. [Read More](../deploy/new_directory_layout_5_0_0."
"md)."
msgstr ""
"**참고**: Seafile 서버 5.0.0부터 모든 설정 파일은 **conf** 폴더에 옮겨서 모아"
"둡니다. [자세한 내용은 이 글을 읽어보십시오](../deploy/"
"new_directory_layout_5_0_0.md)"

#: deploy/server_configuration.md:5
msgid ""
"This manual explains how to change various config options for Seafile server."
msgstr ""
"이 설명서는 Seafile 서버의 다양한 설정 옵션을 바꾸는 방법을 설명합니다."

#: deploy/server_configuration.md:7
msgid "There are three config files in the community edition:"
msgstr "커뮤니티판에는 세가지 설정 파일이 있습니다:"

# unordered list
#: deploy/server_configuration.md:9
msgid "- [ccnet.conf](ccnet-conf.md): contains the network settings"
msgstr "- [ccnet.conf](ccnet-conf.md): 네트워크 설정이 들어있습니다"

# unordered list
#: deploy/server_configuration.md:10
msgid ""
"- [seafile.conf](seafile-conf.md): contains settings for seafile daemon and "
"FileServer."
msgstr ""
"- [seafile.conf](seafile-conf.md): Seafile 데몬 및 FileServer 설정이 들어있습"
"니다."

# unordered list
#: deploy/server_configuration.md:11
msgid ""
"- [seahub_settings.py](seahub_settings_py.md): contains settings for Seahub"
msgstr ""
"- [seahub_settings.py](seahub_settings_py.md): Seahub 설정이 들어있습니다"

#: deploy/server_configuration.md:13
msgid "There is one additional config file in the pro edition:"
msgstr "전문가판에는 추가 설정 파일이 있습니다:"

# unordered list
#: deploy/server_configuration.md:15
msgid ""
"- `seafevents.conf`: contains settings for ccnet/ccnet.search and documents "
"preview"
msgstr ""
"- `seafevents.conf`: ccnet/ccnet.search 및 문서 미리 보기 기능의 설정이 들어"
"있습니다"

# header
#: deploy/server_configuration.md:20
msgid "## Storage Quota Setting (seafile.conf)"
msgstr "## 저장소 용량 제한 설정(seafile.conf)"

#: deploy/server_configuration.md:22
msgid ""
"You may set a default quota (e.g. 2GB) for all users. To do this, just add "
"the following lines to `seafile.conf` file"
msgstr ""
"모든 사용자에게 기본 제한 용량(예: 2GB)을 설정할 수 있습니다. 이 부분을 설정"
"하려면 `seafile.conf` 파일에 다음 줄을 추가하십시오."

# inline html
#: deploy/server_configuration.md:24
msgid ""
"<pre>\n"
"[quota]\n"
"# default user quota in GB, integer only\n"
"default = 2\n"
"</pre>"
msgstr ""
"<pre>\n"
"[quota]\n"
"# default user quota in GB, integer only\n"
"default = 2\n"
"</pre>"

#: deploy/server_configuration.md:30
msgid ""
"This setting applies to all users. If you want to set quota for a specific "
"user, you may log in to seahub website as administrator, then set it in "
"\"System Admin\" page."
msgstr ""
"이 설정은 모든 사용자에게 적용합니다. 개별 사용자에게 용량 제한을 설정하려"
"면, 관리자 권한으로 Seahub 웹 사이트에 로그인 한 후 \"시스템 관리자\" 페이지"
"에서 설정하십시오."

# header
#: deploy/server_configuration.md:32
msgid "## Default history length limit (seafile.conf)"
msgstr "## 기본 기록 용량 제한(seafile.conf)"

#: deploy/server_configuration.md:34
msgid ""
"If you don't want to keep all file revision history, you may set a default "
"history length limit for all libraries."
msgstr ""
"파일 개정 기록을 모두 유지하고 싶지 않다면, 모든 라이브러리의 기본 기록 분량 "
"한계를 설정하시면 좋습니다."

# inline html
#: deploy/server_configuration.md:36
msgid ""
"<pre>\n"
"[history]\n"
"keep_days = days of history to keep\n"
"</pre>"
msgstr ""
"<pre>\n"
"[history]\n"
"keep_days = days of history to keep\n"
"</pre>"

# header
#: deploy/server_configuration.md:41
msgid "## Seafile fileserver configuration (seafile.conf)"
msgstr "## Seafile 파일 서버 설정(seafile.conf)"

#: deploy/server_configuration.md:43
msgid ""
"The configuration of seafile fileserver is in the <code>[fileserver]</code> "
"section of the file `seafile.conf`"
msgstr ""
"Seafile 파일 서버의 설정은 `seafile.conf`의 <code>[fileserver]</code> 섹션에 "
"있습니다"

# inline html
#: deploy/server_configuration.md:45
msgid ""
"<pre>\n"
"[fileserver]\n"
"# binding host for fileserver\n"
"host = 0.0.0.0\n"
"# tcp port for fileserver\n"
"port = 8082\n"
"</pre>"
msgstr ""
"<pre>\n"
"[fileserver]\n"
"# binding host for fileserver\n"
"host = 0.0.0.0\n"
"# tcp port for fileserver\n"
"port = 8082\n"
"</pre>"

#: deploy/server_configuration.md:53
msgid "Change upload/download settings."
msgstr "업로드/다운로드 설정을 바꾸십시오."

# inline html
#: deploy/server_configuration.md:55
msgid ""
"<pre>\n"
"[fileserver]\n"
"# Set maximum upload file size to 200M.\n"
"max_upload_size=200\n"
"\n"
"# Set maximum download directory size to 200M.\n"
"max_download_dir_size=200\n"
"</pre>"
msgstr ""
"<pre>\n"
"[fileserver]\n"
"# Set maximum upload file size to 200M.\n"
"max_upload_size=200\n"
"\n"
"# Set maximum download directory size to 200M.\n"
"max_download_dir_size=200\n"
"</pre>"

#: deploy/server_configuration.md:64
msgid ""
"**Note**: You need to restart seafile and seahub so that your changes take "
"effect."
msgstr ""
"**참고**: 바꾼 설정을 적용하려면 seafile과 seahub를 다시 시작해야합니다."

# inline html
#: deploy/server_configuration.md:65
msgid ""
"<pre>\n"
"./seahub.sh restart\n"
"./seafile.sh restart\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seahub.sh restart\n"
"./seafile.sh restart\n"
"</pre>"

# header
#: deploy/server_configuration.md:70
msgid "## Seahub Configurations (seahub_settings.py)"
msgstr "## Seahub 설정(seahub_settings.py)"

# header
#: deploy/server_configuration.md:72
msgid "#### Sending Email Notifications on Seahub"
msgstr "#### Seahub에서 전자메일 알림 보내기"

#: deploy/server_configuration.md:74
msgid ""
"A few features work better if it can send email notifications, such as "
"notifying users about new messages."
msgstr ""
"전자메일 알림을 보낼 수 있다면 사용자 새 메시지 알림 같은 기능에 잘 동작합니"
"다."

#: deploy/server_configuration.md:75
msgid ""
"If you want to setup email notifications, please add the following lines to "
"seahub_settings.py (and set your email server)."
msgstr ""
"전자메일 알림을 설정하려면 seahub_settings.py에 다음 줄을 추가하십시오(그리"
"고 전자메일 서버를 설정하십시오)."

# inline html
#: deploy/server_configuration.md:77
msgid ""
"<pre>\n"
"EMAIL_USE_TLS = False\n"
"EMAIL_HOST = 'smtp.example.com'        # smpt server\n"
"EMAIL_HOST_USER = 'username@example.com'    # username and domain\n"
"EMAIL_HOST_PASSWORD = 'password'    # password\n"
"EMAIL_PORT = '25'\n"
"DEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n"
"SERVER_EMAIL = EMAIL_HOST_USER\n"
"</pre>"
msgstr ""
"<pre>\n"
"EMAIL_USE_TLS = False\n"
"EMAIL_HOST = 'smtp.example.com'        # smpt server\n"
"EMAIL_HOST_USER = 'username@example.com'    # username and domain\n"
"EMAIL_HOST_PASSWORD = 'password'    # password\n"
"EMAIL_PORT = '25'\n"
"DEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n"
"SERVER_EMAIL = EMAIL_HOST_USER\n"
"</pre>"

#: deploy/server_configuration.md:87
msgid "If you are using Gmail as email server, use following lines:"
msgstr "GMail을 전자메일 서버로 활용하면 다음 줄을 추가하십시오:"

# inline html
#: deploy/server_configuration.md:89
msgid ""
"<pre>\n"
"EMAIL_USE_TLS = True\n"
"EMAIL_HOST = 'smtp.gmail.com'\n"
"EMAIL_HOST_USER = 'username@gmail.com'\n"
"EMAIL_HOST_PASSWORD = 'password'\n"
"EMAIL_PORT = 587\n"
"DEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n"
"SERVER_EMAIL = EMAIL_HOST_USER\n"
"</pre>"
msgstr ""
"<pre>\n"
"EMAIL_USE_TLS = True\n"
"EMAIL_HOST = 'smtp.gmail.com'\n"
"EMAIL_HOST_USER = 'username@gmail.com'\n"
"EMAIL_HOST_PASSWORD = 'password'\n"
"EMAIL_PORT = 587\n"
"DEFAULT_FROM_EMAIL = EMAIL_HOST_USER\n"
"SERVER_EMAIL = EMAIL_HOST_USER\n"
"</pre>"

#: deploy/server_configuration.md:99
msgid ""
"**Note**: If your Email service still can not work, you may checkout the log "
"file <code>logs/seahub.log</code> to see what may cause the problem. For "
"complete email notification list, please refer to [Email notification list]"
"(customize_email_notifications.md)."
msgstr ""
"**참고**: 여전히 전자메일 서비스가 동작하지 않으면, <code>logs/seahub.log</"
"code> 로그 파일에서 어떤 부분에 문제가 있는지 확인하십시오. 완벽한 전자메일 "
"알림 목록 기능을 갖추려면, [전자메일 알림 목록]"
"(customize_email_notifications.md)을 참고하십시오."

#: deploy/server_configuration.md:101
msgid ""
"**Note2**: If you want to use the Email service without authentication leaf "
"<code>EMAIL_HOST_USER</code> and <code>EMAIL_HOST_PASSWORD</code> **blank** "
"(<code>''</code>). (But notice that the emails then will be sent without a "
"<code>From:</code> address.)"
msgstr ""
"**참고2**: 전자메일 서비스를 인증 과정 없이 사용한다면 "
"<code>EMAIL_HOST_USER</code> 및 <code>EMAIL_HOST_PASSWORD</code> 변수 값을 **"
"빈**(<code>''</code>) 채로 두십시오(이렇게 하면 <code>From:</code>(발신) 주"
"소 없이 전자메일을 보냅니다)."

# header
#: deploy/server_configuration.md:103
msgid "#### Cache"
msgstr "#### 캐시"

#: deploy/server_configuration.md:105
msgid ""
"Seahub caches items(avatars, profiles, etc) on file system by default(/tmp/"
"seahub_cache/). You can replace with Memcached (you have to install python-"
"memcache first)."
msgstr ""
"Seahub는 기본적으로(/tmp/seahub_cache) 사용자 계정 항목(아바타, 프로파일 등)"
"을 캐싱합니다. 이 부분을 memcached로 대체할 수 있습니다(python-memcache를 우"
"선 설치해야합니다)."

# inline html
#: deploy/server_configuration.md:107
msgid ""
"<pre>\n"
"CACHES = {\n"
"    'default': {\n"
"        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n"
"\t'LOCATION': '127.0.0.1:11211',\n"
"    }\n"
"}\n"
"</pre>"
msgstr ""
"<pre>\n"
"CACHES = {\n"
"    'default': {\n"
"        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n"
"\t'LOCATION': '127.0.0.1:11211',\n"
"    }\n"
"}\n"
"</pre>"

# header
#: deploy/server_configuration.md:116
msgid "#### Seahub Settings"
msgstr "#### Seahub 설정"

#: deploy/server_configuration.md:118
msgid ""
"You may change seahub website's settings by adding variables in "
"`seahub_settings.py`."
msgstr ""
"`seahub_settings.py`에 변수 값을 추가하여 Seahub 웹사이트 설정을 바꿀 수 있습"
"니다."

# inline html
#: deploy/server_configuration.md:120
msgid ""
"<pre>\n"
"\n"
"# Choices can be found here:\n"
"# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n"
"# although not all choices may be available on all operating systems.\n"
"# If running in a Windows environment this must be set to the same as your\n"
"# system time zone.\n"
"TIME_ZONE = 'UTC'\n"
"\n"
"# Set this to seahub website's URL. This URL is contained in email "
"notifications.\n"
"SITE_BASE = 'http://www.example.com/'\n"
"\n"
"# Set this to your website's name. This is contained in email "
"notifications.\n"
"SITE_NAME = 'example.com'\n"
"\n"
"# Set seahub website's title\n"
"SITE_TITLE = 'Seafile'\n"
"\n"
"# If you don't want to run seahub website on your site's root path, set this "
"option to your preferred path.\n"
"# e.g. setting it to '/seahub/' would run seahub on http://example.com/"
"seahub/.\n"
"SITE_ROOT = '/'\n"
"\n"
"# Whether to use pdf.js to view pdf files online. Default is `True`,  you "
"can turn it off.\n"
"# NOTE: since version 1.4.\n"
"USE_PDFJS = True\n"
"\n"
"# Enalbe or disalbe registration on web. Default is `False`.\n"
"# NOTE: since version 1.4.\n"
"ENABLE_SIGNUP = False\n"
"\n"
"# Activate or deactivate user when registration complete. Default is "
"`True`.\n"
"# If set to `False`, new users need to be activated by admin in admin "
"panel.\n"
"# NOTE: since version 1.8\n"
"ACTIVATE_AFTER_REGISTRATION = False\n"
"\n"
"# Whether to send email when a system admin adding a new member. Default is "
"`True`.\n"
"# NOTE: since version 1.4.\n"
"SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER = True\n"
"\n"
" # Whether to send email when a system admin resetting a user's password. "
"Default is `True`.\n"
"# NOTE: since version 1.4.\n"
"SEND_EMAIL_ON_RESETTING_USER_PASSWD = True\n"
"\n"
"# Hide `Organization` tab.\n"
"# If you want your private seafile behave exactly like https://cloud.seafile."
"com/, you can set this flag.\n"
"CLOUD_MODE = True\n"
"\n"
"# Online preview maximum file size, defaults to 30M.\n"
"FILE_PREVIEW_MAX_SIZE = 30 * 1024 * 1024\n"
"\n"
"# Age of cookie, in seconds (default: 2 weeks).\n"
"SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2\n"
"\n"
"# Whether to save the session data on every request.\n"
"SESSION_SAVE_EVERY_REQUEST = False\n"
"\n"
"# Whether a user's session cookie expires when the Web browser is closed.\n"
"SESSION_EXPIRE_AT_BROWSER_CLOSE = False\n"
"\n"
"# Using server side crypto by default, otherwise, let user choose crypto "
"method.\n"
"FORCE_SERVER_CRYPTO = True\n"
"\n"
"</pre>"
msgstr ""
"<pre>\n"
"\n"
"# Choices can be found here:\n"
"# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n"
"# although not all choices may be available on all operating systems.\n"
"# If running in a Windows environment this must be set to the same as your\n"
"# system time zone.\n"
"TIME_ZONE = 'UTC'\n"
"\n"
"# Set this to seahub website's URL. This URL is contained in email "
"notifications.\n"
"SITE_BASE = 'http://www.example.com/'\n"
"\n"
"# Set this to your website's name. This is contained in email "
"notifications.\n"
"SITE_NAME = 'example.com'\n"
"\n"
"# Set seahub website's title\n"
"SITE_TITLE = 'Seafile'\n"
"\n"
"# If you don't want to run seahub website on your site's root path, set this "
"option to your preferred path.\n"
"# e.g. setting it to '/seahub/' would run seahub on http://example.com/"
"seahub/.\n"
"SITE_ROOT = '/'\n"
"\n"
"# pdf 파일을 온라인으로 볼 때 pdf.js 사용 여부를 설정합니다. 기본값: "
"`True`,  설정을 끌 수 있습니다.\n"
"# 참고: 1.4 버전 부터.\n"
"USE_PDFJS = True\n"
"\n"
"# 웹 등록 활성화 여부를 설정합니다. 기본값: `False`.\n"
"# 참고: 1.4 버전 부터\n"
"ENABLE_SIGNUP = False\n"
"\n"
"# 등록이 끝난 후 사용자 활성화 여부를 결정합니다. 기본값: `True`.\n"
"# `False`로 설정하면 admin 패널에서 관리자가 직접 활성화해야합니다.\n"
"# 참고: 1.8 버전 부터\n"
"ACTIVATE_AFTER_REGISTRATION = False\n"
"\n"
"# 시스템 admin이 새 구성원을 추가했을 때 전자메일을 보낼 지 여부를 설정합니"
"다. 기본값: `True`.\n"
"# 참고: 1.4 버전 부터.\n"
"SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER = True\n"
"\n"
" # 시스템 admin이 사용자 암호를 다시 설정했을 때 전자메일을 보낼 지 여부를 설"
"정합니다. 기본값: `True`.\n"
"# 참고: 1.4 버전 부터.\n"
"SEND_EMAIL_ON_RESETTING_USER_PASSWD = True\n"
"\n"
"# `조직` 탭 숨김.\n"
"# https://cloud.seafile.com/와 완전히 같은 개인 Seafile을 보유했다면, 이 플래"
"그를 설정할 수 있습니다.\n"
"CLOUD_MODE = True\n"
"\n"
"# 온라인 미리 보기 최대 파일 크기. 기본 크기: 30M.\n"
"FILE_PREVIEW_MAX_SIZE = 30 * 1024 * 1024\n"
"\n"
"# 초 단위 쿠키 수명(기본: 2주).\n"
"SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2\n"
"\n"
"# 모든 요청에 대한 세션 데이터 저장 여부.\n"
"SESSION_SAVE_EVERY_REQUEST = False\n"
"\n"
"# 웹 브라우저를 닫았을 때 사용자 세션 쿠기 유지 여부.\n"
"SESSION_EXPIRE_AT_BROWSER_CLOSE = False\n"
"\n"
"# 서버측 암호화를 기본으로 사용하고, 아니면 사용자가 암호화 방식을 선택.\n"
"FORCE_SERVER_CRYPTO = True\n"
"\n"
"</pre>"

#: deploy/server_configuration.md:184
#: deploy/start_seafile_at_system_bootup.md:174
msgid "**Note**:"
msgstr "**참고**:"

# unordered list
#: deploy/server_configuration.md:186
msgid "* You need to restart seahub so that your changes take effect."
msgstr "* 바뀐 설정 값을 반영하려면 Seahub를 다시 시작해야합니다."

# unordered list
#: deploy/server_configuration.md:187
msgid ""
"* If your changes don't take effect, You may need to delete 'seahub_setting."
"pyc'. (A cache file)"
msgstr ""
"* 바뀐 설정값을 반영하지 않는다면 'seahub_settings.pyc'(캐치 파일)을 삭제해야"
"합니다."

# inline html
#: deploy/server_configuration.md:189
msgid ""
"<pre>\n"
"./seahub.sh restart\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seahub.sh restart\n"
"</pre>"

# header
#: deploy/shibboleth_config.md:1
msgid "## Overview"
msgstr "## 둘러보기"

#: deploy/shibboleth_config.md:3
msgid ""
"[Shibboleth](https://shibboleth.net/) is a widely used single sign on (SSO) "
"protocol. Seafile server (Community Edition >= 4.1.0, Pro Edition >= 4.0.6) "
"supports authentication via Shibboleth. It allows users from another "
"organization to log in to Seafile without registering an account on the "
"service provider."
msgstr ""
"[Shibboleth](https://shibboleth.net/)는 널리 사용하는 단일 접속(SSO) 프로토콜"
"입니다. Seafile 서버(커뮤니티판 >= 4.1.0, 전문가판 >= 4.0.6)에서는 시볼레스 "
"인증을 지원합니다. 시볼레스는 다른 조직 구성원이 서비스 제공 업체에 계정을 등"
"록하지 않고도 Seafile에 로그인할 수 있게 합니다."

#: deploy/shibboleth_config.md:5
msgid ""
"In this documentation, we assume the reader is familiar with Shibboleth "
"installation and configuration. For introduction to Shibboleth concepts, "
"please refer to https://wiki.shibboleth.net/confluence/display/SHIB2/"
"UnderstandingShibboleth ."
msgstr ""
"이 문서에서는, 독자 여러분이 시볼레스 설치 및 설정을 어느정도 할 줄 안다고 가"
"정하겠습니다. 시볼레스 개념 소개는 https://wiki.shibboleth.net/confluence/"
"display/SHIB2/UnderstandingShibboleth 주소를 참고하십시오."

#: deploy/shibboleth_config.md:7
msgid ""
"Shibboleth Service Provider (SP) should be installed on the same server as "
"the Seafile server. The official SP from https://shibboleth.net/ is "
"implemented as an Apache module. The module handles all Shibboleth "
"authentication details. Seafile server receives authentication information "
"(username) from fastcgi. The username then can be used as login name for the "
"user."
msgstr ""
"시볼레스 서비스 제공자(SP)를 Seafile 서버와 동일한 서버에 설치해야합니다. 공"
"식 SP는 https://shibboleth.net/ 에 있으며 아파치 모듈로 구현했습니다. 이 모듈"
"은 모든 시볼레스 인증 세부 절차를 다룹니다. Seafile 서버는 인증 정보(사용자 "
"이름)을 fastcgi로 받습니다. 그 다음 사용자 이름을 사용자의 로그인 이름으로 사"
"용할 수 있습니다."

#: deploy/shibboleth_config.md:9
msgid ""
"Seahub provides a special URL to handle Shibboleth login. The URL is "
"`https://your-server/shib-login`. Only this URL needs to be configured under "
"Shibboleth protection. All other URLs don't go through the Shibboleth "
"module. The overall workflow for a user to login with Shibboleth is as "
"follows:"
msgstr ""
"Seahub에서는 시볼레스 로그인을 처리하는 특별한 URL을 제공합니다. `https://"
"your-server/shib-login` 입니다. 이 URL은 시볼레스 보안하에 설정해야합니다. 다"
"른 URL은 시볼레스 모듈로 접근할 수 없습니다. 시볼레스 사용자 로그인 전체 흐름"
"은 다음과 같습니다:"

# ordered list
#: deploy/shibboleth_config.md:11
msgid ""
"1. In the Seafile login page, there is a separate \"Shibboleth\" login "
"button. When the user clicks the button, she/he will be redirected to "
"`https://your-server/shib-login`."
msgstr ""
"1. Seafile 로그인 페이지에서 \"시볼레스\" 로그인 단추가 따로 있습니다. 이 단"
"추를 사용자가 누르면 `https://your-server/shib-login`으로 이동합니다."

# ordered list
#: deploy/shibboleth_config.md:12
msgid ""
"2. Since that URL is controlled by Shibboleth, the user will be redirected "
"to IdP for login. After the user logs in, she/he will be redirected back to "
"`https://your-server/shib-login`."
msgstr ""
"2. 이 URL은 시볼레스로 통제하므로, 사용자는 로그인 할 IdP로 이동합니다. 사용"
"자 로그인이 끝나면 `https://your-server/shib-login`으로 돌아갑니다."

# ordered list
#: deploy/shibboleth_config.md:13
msgid ""
"3. This time the Shibboleth module passes the request to Seahub. Seahub "
"reads the user information from the request and brings the user to her/his "
"home page."
msgstr ""
"3. 여기서 시볼레스 모듈은 Seahub에 요청을 전달합니다. Seahub는 요청에서 사용"
"자 정보를 읽고, 자신의 홈페이지로 사용자를 안내합니다."

# ordered list
#: deploy/shibboleth_config.md:14
msgid ""
"4. All later access to Seahub will not pass through the Shibboleth module. "
"Since Seahub keeps session information internally, the user doesn't need to "
"login again until the session expires."
msgstr ""
"4. 이후 모든 Seahub로의 접근은 시볼레스 모듈로 전달하지 않습니다. Seahub는 자"
"체적으로 세션 정보를 유지하므로, 사용자는 세션이 끝나기 전까지는 다시 로그인 "
"할 필요가 없습니다."

#: deploy/shibboleth_config.md:16
msgid ""
"Since Shibboleth support requires Apache, if you want to use Nginx, you need "
"two servers, one for non-Shibboleth access, another configured with Apache "
"to allow Shibboleth login. In a cluster environment, you can configure your "
"load balancer to direct traffic to different server according to URL. Only "
"the URL `https://your-server/shib-login` needs to be directed to Apache."
msgstr ""
"시볼레스 지원은 아파치가 필요하므로, Nginx를 사용하면, 비-시볼레스 접근용 서"
"버와 시볼레스 로그인을 할 수 있도록 설정한 아파치 서버가 필요합니다. 클러스"
"터 환경에서는 URL에 따라 제각기 다른 서버로 트래픽을 전달하는 로드 밸런서를 "
"설정할 수 있습니다. 아파치에는 `https://your-server/shib-login` URL 주소로만 "
"안내하면 됩니다."

#: deploy/shibboleth_config.md:18
msgid "The configuration includes 3 steps:"
msgstr "설정은 3단계로 진행합니다:"

# ordered list
#: deploy/shibboleth_config.md:20
msgid "1. Install and configure Shibboleth Service Provider;"
msgstr "1. 시볼레스 서비스 제공자를 설치하고 설정하십시오"

# ordered list
#: deploy/shibboleth_config.md:21
msgid "2. Configure Apache;"
msgstr "2. Apache를 섲렁하십시오"

# ordered list
#: deploy/shibboleth_config.md:22
msgid "3. Configure Seahub."
msgstr "3. Seahub를 설정하십시오."

# header
#: deploy/shibboleth_config.md:24
msgid "## Install and Configure Shibboleth Service Provider"
msgstr "## 시볼레스 서비스 제공자 설치 및 설정"

#: deploy/shibboleth_config.md:26
msgid ""
"Installation and configuration of Shibboleth is out of the scope of this "
"documentation. Here are a few references:"
msgstr ""
"시볼레스 설치 및 설정은 이 문서의 범위를 벗어납니다. 다음 몇가지 참고 자료가 "
"있습니다:"

# unordered list
#: deploy/shibboleth_config.md:28
msgid ""
"* For RedHat and SUSE: https://wiki.shibboleth.net/confluence/display/SHIB2/"
"NativeSPLinuxInstall"
msgstr ""
"* 레드햇 및 수세: https://wiki.shibboleth.net/confluence/display/SHIB2/"
"NativeSPLinuxInstall"

# unordered list
#: deploy/shibboleth_config.md:29
msgid ""
"* For Ubuntu: http://bradleybeddoes.com/2011/08/12/installing-a-shibboleth-2-"
"sp-in-ubuntu-11-04-within-virtualbox/"
msgstr ""
"* 우분투: http://bradleybeddoes.com/2011/08/12/installing-a-shibboleth-2-sp-"
"in-ubuntu-11-04-within-virtualbox/"

#: deploy/shibboleth_config.md:31
msgid ""
"Please note that you don't have to follow the Apache configurations in the "
"above links. Just use the Apache config we provide in the next section."
msgstr ""
"위 링크의 아파치 설정을 따를 필요가 없다는 점 참고하십시오. 다음 섹션에서 제"
"공하는 아파치 설정을 활용하십시오."

# header
#: deploy/shibboleth_config.md:33
msgid "## Apache Configuration"
msgstr "## Apache 설정"

#: deploy/shibboleth_config.md:35
msgid "You should create a new virtual host configuration for Shibboleth."
msgstr "시볼레스 새 가상 호스트 설정을 만들어야합니다."

# code block
#: deploy/shibboleth_config.md:37
msgid ""
"```\n"
"<IfModule mod_ssl.c>\n"
"    <VirtualHost _default_:443>\n"
"        ServerName seafile.example.com\n"
"        DocumentRoot /var/www\n"
"        #Alias /seafmedia  /home/ubuntu/dev/seahub/media\n"
"        Alias /media /home/user/seafile-server-latest/seahub/media\n"
"\n"
"        ErrorLog ${APACHE_LOG_DIR}/seahub.error.log\n"
"        CustomLog ${APACHE_LOG_DIR}/seahub.access.log combined\n"
"\n"
"        SSLEngine on\n"
"        SSLCertificateFile  /path/to/ssl-cert.pem\n"
"        SSLCertificateKeyFile /path/to/ssl-key.pem\n"
"\n"
"        <Location /Shibboleth.sso>\n"
"        SetHandler shib\n"
"        </Location>\n"
"\n"
"        <Location /api2>\n"
"        AuthType None\n"
"        Require all granted\n"
"        Allow from all\n"
"        satisfy any\n"
"        </Location>\n"
"\n"
"        RewriteEngine On\n"
"        <Location /media>\n"
"        Require all granted\n"
"        </Location>\n"
"\n"
"        <Location /shib-login>\n"
"        AuthType shibboleth\n"
"        ShibRequestSetting requireSession true\n"
"        Require valid-user\n"
"        </Location>\n"
"\n"
"        #\n"
"        # seafile fileserver\n"
"        #\n"
"        ProxyPass /seafhttp http://127.0.0.1:8082\n"
"        ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"        RewriteRule ^/seafhttp - [QSA,L]\n"
"\n"
"        #\n"
"        # seahub\n"
"        #\n"
"        RewriteRule ^/(media.*)$ /$1 [QSA,L,PT]\n"
"        RewriteCond %{REQUEST_FILENAME} !-f\n"
"        RewriteCond %{REQUEST_URI} !^/Shibboleth.sso\n"
"        RewriteRule ^(.*)$ /seahub.fcgi$1 [QSA,L,E=HTTP_AUTHORIZATION:%{HTTP:"
"Authorization}]\n"
"\n"
"    </VirtualHost>\n"
"</IfModule>\n"
"\n"
"```"
msgstr ""
"```\n"
"<IfModule mod_ssl.c>\n"
"    <VirtualHost _default_:443>\n"
"        ServerName seafile.example.com\n"
"        DocumentRoot /var/www\n"
"        #Alias /seafmedia  /home/ubuntu/dev/seahub/media\n"
"        Alias /media /home/user/seafile-server-latest/seahub/media\n"
"\n"
"        ErrorLog ${APACHE_LOG_DIR}/seahub.error.log\n"
"        CustomLog ${APACHE_LOG_DIR}/seahub.access.log combined\n"
"\n"
"        SSLEngine on\n"
"        SSLCertificateFile  /path/to/ssl-cert.pem\n"
"        SSLCertificateKeyFile /path/to/ssl-key.pem\n"
"\n"
"        <Location /Shibboleth.sso>\n"
"        SetHandler shib\n"
"        </Location>\n"
"\n"
"        <Location /api2>\n"
"        AuthType None\n"
"        Require all granted\n"
"        Allow from all\n"
"        satisfy any\n"
"        </Location>\n"
"\n"
"        RewriteEngine On\n"
"        <Location /media>\n"
"        Require all granted\n"
"        </Location>\n"
"\n"
"        <Location /shib-login>\n"
"        AuthType shibboleth\n"
"        ShibRequestSetting requireSession true\n"
"        Require valid-user\n"
"        </Location>\n"
"\n"
"        #\n"
"        # seafile fileserver\n"
"        #\n"
"        ProxyPass /seafhttp http://127.0.0.1:8082\n"
"        ProxyPassReverse /seafhttp http://127.0.0.1:8082\n"
"        RewriteRule ^/seafhttp - [QSA,L]\n"
"\n"
"        #\n"
"        # seahub\n"
"        #\n"
"        RewriteRule ^/(media.*)$ /$1 [QSA,L,PT]\n"
"        RewriteCond %{REQUEST_FILENAME} !-f\n"
"        RewriteCond %{REQUEST_URI} !^/Shibboleth.sso\n"
"        RewriteRule ^(.*)$ /seahub.fcgi$1 [QSA,L,E=HTTP_AUTHORIZATION:%{HTTP:"
"Authorization}]\n"
"\n"
"    </VirtualHost>\n"
"</IfModule>\n"
"\n"
"```"

#: deploy/shibboleth_config.md:94
msgid ""
"After restarting Apache, you should be able to get the Service Provider "
"metadata by accessing https://seafile.example.com/Shibboleth.sso/Metadata . "
"This metadata should be uploaded to the Identity Provider (IdP) server."
msgstr ""
"Apache를 다시 시작하고 나면, https://seafile.example.com/Shibboleth.sso/"
"Metadata에 접근하여 서비스 제공 업체 메타데이터를 가져와야합니다. 이 메타데이"
"터는 인증 제공 업체(IdP) 서버 업체에 업로드합니다."

#: deploy/shibboleth_config.md:98
msgid ""
"Seahub extracts the username from the `REMOTE_USER` environment variable. So "
"you should modify your SP's shibboleth2.xml (/etc/shibboleth/shibboleth2.xml "
"on Ubuntu) config file, so that Shibboleth translates your desired attribute "
"into `REMOTE_USER` environment variable."
msgstr ""
"Seahub는 `REMOTE_USER` 환경 변수에서 사용자 이름을 가져옵니다. 따라서 SP의 "
"shibboleth2.xml 설정 파일을 수정하여 `REMOTE_USER` 환경 변수에 원하는 속성 값"
"을 시볼레스가 해셕할 수 있게 해야 합니다."

# code block
#: deploy/shibboleth_config.md:100
msgid ""
"```\n"
"    <ApplicationDefaults entityID=\"https://your-server/shibboleth\"\n"
"        REMOTE_USER=\"xxxx\">\n"
"```"
msgstr ""
"```\n"
"    <ApplicationDefaults entityID=\"https://your-server/shibboleth\"\n"
"        REMOTE_USER=\"xxxx\">\n"
"```"

#: deploy/shibboleth_config.md:105
msgid ""
"In Seafile, only one of the following two attributes can be used for "
"username: `eppn`, and `mail`. `eppn` stands for \"Edu Person Principal Name"
"\". It is usually the UserPrincipalName attribute in Active Directory. It's "
"not necessarily a valid email address. `mail` is the user's email address. "
"You should set `REMOTE_USER` to either one of these attributes."
msgstr ""
"Seafile에서는 `eppn` 및 `mail` 두가지 속성 중 하나만 사용자 이름으로 간주할 "
"수 있습니다. `eppn`은 \"Edu Person Principal Name\" 입니다. 액티브 디렉터리에"
"서 보통 UserPrincipalName입니다. 올바른 전자메일 주소는 필요하지 않습니다. "
"`mail`은 사용자의 전자메일 주소입니다. `REMOTE_USER`를 앞에서 언급한 속성 값 "
"중 하나로 설정해야합니다."

#: deploy/shibboleth_config.md:107
msgid ""
"Now we have to tell Seahub how to do with the authentication information "
"passed in by Shibboleth."
msgstr ""
"이제 시볼레스 방식으로 전달하는 인증 정보를 어떻게 Seahub에 전달하는지 알릴 "
"차례입니다."

#: deploy/shibboleth_config.md:109
msgid "Add the following configuration to seahub_settings.py."
msgstr "seahub_settings.py에 다음 설정 내용을 추가하십시오."

# code block
#: deploy/shibboleth_config.md:111
msgid ""
"```\n"
"EXTRA_AUTHENTICATION_BACKENDS = (\n"
"    'shibboleth.backends.ShibbolethRemoteUserBackend',\n"
")\n"
"EXTRA_MIDDLEWARE_CLASSES = (\n"
"    'shibboleth.middleware.ShibbolethRemoteUserMiddleware',\n"
")\n"
"\n"
"ENABLE_SHIB_LOGIN = True\n"
"\n"
"SHIBBOLETH_ATTRIBUTE_MAP = {\n"
"    # Change eppn to mail if you use mail attribute for REMOTE_USER\n"
"    \"eppn\": (False, \"username\"),\n"
"}\n"
"```"
msgstr ""
"```\n"
"EXTRA_AUTHENTICATION_BACKENDS = (\n"
"    'shibboleth.backends.ShibbolethRemoteUserBackend',\n"
")\n"
"EXTRA_MIDDLEWARE_CLASSES = (\n"
"    'shibboleth.middleware.ShibbolethRemoteUserMiddleware',\n"
")\n"
"\n"
"ENABLE_SHIB_LOGIN = True\n"
"\n"
"SHIBBOLETH_ATTRIBUTE_MAP = {\n"
"    # Change eppn to mail if you use mail attribute for REMOTE_USER\n"
"    \"eppn\": (False, \"username\"),\n"
"}\n"
"```"

#: deploy/shibboleth_config.md:127
msgid ""
"Since version 5.0, Seahub can process additional user attributes from "
"Shibboleth. These attributes are saved into Seahub's database, as user's "
"properties. They're all not mandatory. The internal user properties Seahub "
"now supports are:"
msgstr ""
"버전 5.0부터, Seahub는 시볼레스 추가 사용자 속성을 처리할 수 있습니다. 해당 "
"속성은 Seahub 데이터베이스에 사용자 속성으로 저장합니다. 모든 속성이 필수는 "
"아닙니다. Seahub에서 현재 자체 사용자 속성으로 지원하는 항목은 다음과 같습니"
"다:"

# unordered list
#: deploy/shibboleth_config.md:129
msgid "- givenname"
msgstr "- 이름"

# unordered list
#: deploy/shibboleth_config.md:130
msgid "- surname"
msgstr "- 성"

# unordered list
#: deploy/shibboleth_config.md:131
msgid ""
"- contact_email: used for sending notification email to user if username is "
"not a valid email address (like eppn)."
msgstr ""
"- contact_email: 사용자 이름이 올바른 전자메일 주소가 아닐 경우 사용자에게 알"
"림 전자메일을 보낼 때 사용할 전자메일 주소(eppn과 유사)."

# unordered list
#: deploy/shibboleth_config.md:132
msgid "- institution: used to identify user's institution"
msgstr "- institution: used to identify user's institution"

#: deploy/shibboleth_config.md:134
msgid ""
"You can specify the mapping between Shibboleth attributes and Seahub's user "
"properties in seahub_settings.py:"
msgstr ""
"시볼레스 속성 및 Seahub 사용자 속성 매핑을 seahub_settings.py에서 지정할 수 "
"있습니다:"

# code block
#: deploy/shibboleth_config.md:136
msgid ""
"```\n"
"SHIBBOLETH_ATTRIBUTE_MAP = {\n"
"    \"eppn\": (False, \"username\"),\n"
"    \"givenname\": (False, \"givenname\"),\n"
"    \"sn\": (False, \"surname\"),\n"
"    \"mail\": (False, \"contact_email\"),\n"
"    \"organization\": (False, \"institution\"),\n"
"}\n"
"```"
msgstr ""
"```\n"
"SHIBBOLETH_ATTRIBUTE_MAP = {\n"
"    \"eppn\": (False, \"username\"),\n"
"    \"givenname\": (False, \"givenname\"),\n"
"    \"sn\": (False, \"surname\"),\n"
"    \"mail\": (False, \"contact_email\"),\n"
"    \"organization\": (False, \"institution\"),\n"
"}\n"
"```"

#: deploy/shibboleth_config.md:146
msgid ""
"In the above config, the hash key is Shibboleth attribute name, the second "
"element in the hash value is Seahub's property name. You can adjust the "
"Shibboleth attribute name for your own needs. ***Note that you may have to "
"change attribute-map.xml in your Shibboleth SP, so that the desired "
"attributes are passed to Seahub. And you have to make sure the IdP sends "
"these attributes to the SP.***"
msgstr ""
"위 설정에서 해시 키는 시볼레스 속성 이름이며, 해시 값의 두번째 항목은 Seahub"
"의 속성 이름입니다. 시볼레스 속성 이름을 원하는대로 조정할 수 있습니다. ***참"
"고로 시볼레스 SP의 attribute-mal.xml를 수정하여 Seahub에 원하는 속성 값을 전"
"달할 수 있게 하십시오. 그리고 IdP에서 SP로 이 속성 값을 전달하는지 확인해야합"
"니다.***"

#: deploy/shibboleth_config.md:148
msgid ""
"Since version 5.1.1, we added an option `SHIB_ACTIVATE_AFTER_CREATION` "
"(defaults to `True`) which control the user status after shibboleth "
"connection. If this option set to `False`, user will be inactive after "
"connection, and system admins will be notified by email to activate that "
"account."
msgstr ""
"버전 5.1.1부터 시볼레스 연결 후 사용자 상태를 처리하는 "
"`SHIB_ACTIVATE_AFTER_CREATION` (기본값 `True`) 설정 항목을 추가했습니다. 이 "
"항목을 `False`로 설정하면, 사용자 연결 후 비활성 상태가 되며, 시스템 관리자"
"는 사용자 계정을 활성화 하라는 전자메일 알림을 받습니다."

# header
#: deploy/shibboleth_config.md:150
msgid "## Verify"
msgstr "## 검증"

#: deploy/shibboleth_config.md:152
msgid ""
"After restarting Apache and Seafile services, you can then test the "
"shibboleth login workflow."
msgstr ""
"Apache 및 Seafile 서비스를 다시 시작하고 나면, 시볼레스 로그인 절차를 시험해"
"볼 수 있습니다."

# header
#: deploy/start_seafile_at_system_bootup.md:1
msgid "# Start Seafile at System Bootup"
msgstr "# 시스템 부팅 시 Seafile 시작"

# header
#: deploy/start_seafile_at_system_bootup.md:3
msgid ""
"For Ubuntu\n"
"----------"
msgstr ""
"우분투\n"
"----------"

#: deploy/start_seafile_at_system_bootup.md:6
msgid ""
"On Ubuntu, we make use of the [/etc/init.d/](https://help.ubuntu.com/"
"community/UbuntuBootupHowto) scripts to start seafile/seahub at system boot."
msgstr ""
"우분투에서, 시스템을 부팅할 때 seafile/seahub를 시작하는 [/etc/init.d/]"
"(https://help.ubuntu.com/community/UbuntuBootupHowto) 스크립트를 사용하도록 "
"하겠습니다."

# header
#: deploy/start_seafile_at_system_bootup.md:8
#: deploy/start_seafile_at_system_bootup.md:106
msgid "### Create a script **/etc/init.d/seafile-server**"
msgstr "### **/etc/init.d/seafile-server** 스크립트 만들기"

#: deploy/start_seafile_at_system_bootup.md:10
#: deploy/start_seafile_at_system_bootup.md:108
msgid "    sudo vim /etc/init.d/seafile-server"
msgstr "    sudo vim /etc/init.d/seafile-server"

#: deploy/start_seafile_at_system_bootup.md:12
#: deploy/start_seafile_at_system_bootup.md:110
msgid ""
"The content of this script is: (You need to modify the value of **user** and "
"**seafile\\_dir** accordingly)"
msgstr ""
"스크립트의 내용은 다음과 같습니다: (**user** 및 **sefaile\\_dir** 값을 각각 "
"수정해야합니다)"

#: deploy/start_seafile_at_system_bootup.md:14
#: deploy/start_seafile_at_system_bootup.md:259
#: deploy/start_seafile_at_system_bootup.md:329
msgid "    #!/bin/bash"
msgstr "    #!/bin/bash"

#: deploy/start_seafile_at_system_bootup.md:16
#: deploy/start_seafile_at_system_bootup.md:218
#: deploy/start_seafile_at_system_bootup.md:240
msgid "    # Change the value of \"user\" to your linux user name"
msgstr "    # Change the value of \"user\" to your linux user name"

#: deploy/start_seafile_at_system_bootup.md:17
#: deploy/start_seafile_at_system_bootup.md:125
#: deploy/start_seafile_at_system_bootup.md:219
#: deploy/start_seafile_at_system_bootup.md:241
msgid "    user=haiwen"
msgstr "    user=haiwen"

#: deploy/start_seafile_at_system_bootup.md:19
#: deploy/start_seafile_at_system_bootup.md:127
#: deploy/start_seafile_at_system_bootup.md:221
#: deploy/start_seafile_at_system_bootup.md:243
msgid ""
"    # Change the value of \"seafile_dir\" to your path of seafile "
"installation"
msgstr ""
"    # Change the value of \"seafile_dir\" to your path of seafile "
"installation"

#: deploy/start_seafile_at_system_bootup.md:20
#: deploy/start_seafile_at_system_bootup.md:128
#: deploy/start_seafile_at_system_bootup.md:222
#: deploy/start_seafile_at_system_bootup.md:244
msgid "    # usually the home directory of $user"
msgstr "    # usually the home directory of $user"

#: deploy/start_seafile_at_system_bootup.md:21
#: deploy/start_seafile_at_system_bootup.md:129
#: deploy/start_seafile_at_system_bootup.md:223
#: deploy/start_seafile_at_system_bootup.md:245
msgid "    seafile_dir=/data/haiwen"
msgstr "    seafile_dir=/data/haiwen"

#: deploy/start_seafile_at_system_bootup.md:22
#: deploy/start_seafile_at_system_bootup.md:130
#: deploy/start_seafile_at_system_bootup.md:224
#: deploy/start_seafile_at_system_bootup.md:246
msgid "    script_path=${seafile_dir}/seafile-server-latest"
msgstr "    script_path=${seafile_dir}/seafile-server-latest"

#: deploy/start_seafile_at_system_bootup.md:23
#: deploy/start_seafile_at_system_bootup.md:131
#: deploy/start_seafile_at_system_bootup.md:247
msgid "    seafile_init_log=${seafile_dir}/logs/seafile.init.log"
msgstr "    seafile_init_log=${seafile_dir}/logs/seafile.init.log"

#: deploy/start_seafile_at_system_bootup.md:24
#: deploy/start_seafile_at_system_bootup.md:132
#: deploy/start_seafile_at_system_bootup.md:248
msgid "    seahub_init_log=${seafile_dir}/logs/seahub.init.log"
msgstr "    seahub_init_log=${seafile_dir}/logs/seahub.init.log"

#: deploy/start_seafile_at_system_bootup.md:26
msgid "    # Change the value of fastcgi to falst if fastcgi is not used"
msgstr "    # Change the value of fastcgi to falst if fastcgi is not used"

#: deploy/start_seafile_at_system_bootup.md:27
msgid "    fastcgi=true"
msgstr "    fastcgi=true"

#: deploy/start_seafile_at_system_bootup.md:28
#: deploy/start_seafile_at_system_bootup.md:136
#: deploy/start_seafile_at_system_bootup.md:253
msgid ""
"    # Set the port of fastcgi, default is 8000. Change it if you need "
"different."
msgstr ""
"    # Set the port of fastcgi, default is 8000. Change it if you need "
"different."

#: deploy/start_seafile_at_system_bootup.md:29
#: deploy/start_seafile_at_system_bootup.md:137
#: deploy/start_seafile_at_system_bootup.md:254
msgid "    fastcgi_port=8000"
msgstr "    fastcgi_port=8000"

#: deploy/start_seafile_at_system_bootup.md:30
#: deploy/start_seafile_at_system_bootup.md:32
#: deploy/start_seafile_at_system_bootup.md:139
#: deploy/start_seafile_at_system_bootup.md:141
#: deploy/start_seafile_at_system_bootup.md:260
#: deploy/start_seafile_at_system_bootup.md:263
#: deploy/start_seafile_at_system_bootup.md:302
#: deploy/start_seafile_at_system_bootup.md:304
#: deploy/start_seafile_at_system_bootup.md:330
#: deploy/start_seafile_at_system_bootup.md:333
#: deploy/start_seafile_at_system_bootup.md:377
#: deploy/start_seafile_at_system_bootup.md:379
msgid "    #"
msgstr "    #"

#: deploy/start_seafile_at_system_bootup.md:31
#: deploy/start_seafile_at_system_bootup.md:140
#: deploy/start_seafile_at_system_bootup.md:303
#: deploy/start_seafile_at_system_bootup.md:378
msgid "    # Write a polite log message with date and time"
msgstr "    # Write a polite log message with date and time"

#: deploy/start_seafile_at_system_bootup.md:33
#: deploy/start_seafile_at_system_bootup.md:142
#: deploy/start_seafile_at_system_bootup.md:305
msgid ""
"    echo -e \"\\n \\n About to perform $1 for seafile at `date -Iseconds` "
"\\n \" >> ${seafile_init_log}"
msgstr ""
"    echo -e \"\\n \\n About to perform $1 for seafile at `date -Iseconds` "
"\\n \" >> ${seafile_init_log}"

#: deploy/start_seafile_at_system_bootup.md:34
#: deploy/start_seafile_at_system_bootup.md:143
#: deploy/start_seafile_at_system_bootup.md:380
msgid ""
"    echo -e \"\\n \\n About to perform $1 for seahub at `date -Iseconds` \\n "
"\" >> ${seahub_init_log}"
msgstr ""
"    echo -e \"\\n \\n About to perform $1 for seahub at `date -Iseconds` \\n "
"\" >> ${seahub_init_log}"

#: deploy/start_seafile_at_system_bootup.md:35
#: deploy/start_seafile_at_system_bootup.md:145
#: deploy/start_seafile_at_system_bootup.md:308
#: deploy/start_seafile_at_system_bootup.md:383
msgid "    case \"$1\" in"
msgstr "    case \"$1\" in"

#: deploy/start_seafile_at_system_bootup.md:36
#: deploy/start_seafile_at_system_bootup.md:146
msgid "            start)"
msgstr "            start)"

#: deploy/start_seafile_at_system_bootup.md:37
#: deploy/start_seafile_at_system_bootup.md:46
#: deploy/start_seafile_at_system_bootup.md:56
#: deploy/start_seafile_at_system_bootup.md:147
#: deploy/start_seafile_at_system_bootup.md:156
#: deploy/start_seafile_at_system_bootup.md:166
msgid ""
"                    sudo -u ${user} ${script_path}/seafile.sh ${1} >> "
"${seafile_init_log}"
msgstr ""
"                    sudo -u ${user} ${script_path}/seafile.sh ${1} >> "
"${seafile_init_log}"

#: deploy/start_seafile_at_system_bootup.md:38
#: deploy/start_seafile_at_system_bootup.md:47
#: deploy/start_seafile_at_system_bootup.md:148
#: deploy/start_seafile_at_system_bootup.md:157
msgid "                    if [ $fastcgi = true ];"
msgstr "                    if [ $fastcgi = true ];"

#: deploy/start_seafile_at_system_bootup.md:39
#: deploy/start_seafile_at_system_bootup.md:48
#: deploy/start_seafile_at_system_bootup.md:149
#: deploy/start_seafile_at_system_bootup.md:158
#: deploy/start_seafile_at_system_bootup.md:357
msgid "                    then"
msgstr "                    then"

#: deploy/start_seafile_at_system_bootup.md:40
#: deploy/start_seafile_at_system_bootup.md:49
#: deploy/start_seafile_at_system_bootup.md:150
#: deploy/start_seafile_at_system_bootup.md:159
msgid ""
"                            sudo -u ${user} ${script_path}/seahub.sh ${1}-"
"fastcgi ${fastcgi_port} >> ${seahub_init_log}"
msgstr ""
"                            sudo -u ${user} ${script_path}/seahub.sh ${1}-"
"fastcgi ${fastcgi_port} >> ${seahub_init_log}"

#: deploy/start_seafile_at_system_bootup.md:41
#: deploy/start_seafile_at_system_bootup.md:50
#: deploy/start_seafile_at_system_bootup.md:151
#: deploy/start_seafile_at_system_bootup.md:160
#: deploy/start_seafile_at_system_bootup.md:359
msgid "                    else"
msgstr "                    else"

#: deploy/start_seafile_at_system_bootup.md:42
#: deploy/start_seafile_at_system_bootup.md:51
#: deploy/start_seafile_at_system_bootup.md:152
#: deploy/start_seafile_at_system_bootup.md:161
msgid ""
"                            sudo -u ${user} ${script_path}/seahub.sh ${1} >> "
"${seahub_init_log}"
msgstr ""
"                            sudo -u ${user} ${script_path}/seahub.sh ${1} >> "
"${seahub_init_log}"

#: deploy/start_seafile_at_system_bootup.md:43
#: deploy/start_seafile_at_system_bootup.md:52
#: deploy/start_seafile_at_system_bootup.md:153
#: deploy/start_seafile_at_system_bootup.md:162
#: deploy/start_seafile_at_system_bootup.md:361
msgid "                    fi"
msgstr "                    fi"

#: deploy/start_seafile_at_system_bootup.md:44
#: deploy/start_seafile_at_system_bootup.md:53
#: deploy/start_seafile_at_system_bootup.md:57
#: deploy/start_seafile_at_system_bootup.md:61
#: deploy/start_seafile_at_system_bootup.md:154
#: deploy/start_seafile_at_system_bootup.md:163
#: deploy/start_seafile_at_system_bootup.md:167
#: deploy/start_seafile_at_system_bootup.md:171
#: deploy/start_seafile_at_system_bootup.md:311
#: deploy/start_seafile_at_system_bootup.md:314
#: deploy/start_seafile_at_system_bootup.md:319
#: deploy/start_seafile_at_system_bootup.md:386
#: deploy/start_seafile_at_system_bootup.md:389
#: deploy/start_seafile_at_system_bootup.md:394
msgid "            ;;"
msgstr "            ;;"

#: deploy/start_seafile_at_system_bootup.md:45
#: deploy/start_seafile_at_system_bootup.md:155
msgid "            restart)"
msgstr "            restart)"

#: deploy/start_seafile_at_system_bootup.md:54
#: deploy/start_seafile_at_system_bootup.md:164
msgid "            stop)"
msgstr "            stop)"

#: deploy/start_seafile_at_system_bootup.md:55
#: deploy/start_seafile_at_system_bootup.md:165
msgid ""
"                    sudo -u ${user} ${script_path}/seahub.sh ${1} >> "
"${seahub_init_log}"
msgstr ""
"                    sudo -u ${user} ${script_path}/seahub.sh ${1} >> "
"${seahub_init_log}"

#: deploy/start_seafile_at_system_bootup.md:58
#: deploy/start_seafile_at_system_bootup.md:168
msgid "            *)"
msgstr "            *)"

#: deploy/start_seafile_at_system_bootup.md:59
#: deploy/start_seafile_at_system_bootup.md:169
msgid ""
"                    echo \"Usage: /etc/init.d/seafile-server {start|stop|"
"restart}\""
msgstr ""
"                    echo \"Usage: /etc/init.d/seafile-server {start|stop|"
"restart}\""

#: deploy/start_seafile_at_system_bootup.md:60
#: deploy/start_seafile_at_system_bootup.md:170
msgid "                    exit 1"
msgstr "                    exit 1"

#: deploy/start_seafile_at_system_bootup.md:62
#: deploy/start_seafile_at_system_bootup.md:172
#: deploy/start_seafile_at_system_bootup.md:323
#: deploy/start_seafile_at_system_bootup.md:398
msgid "    esac"
msgstr "    esac"

# header
#: deploy/start_seafile_at_system_bootup.md:66
msgid "### Create a file **/etc/init/seafile-server.conf**"
msgstr "### **/etc/init/seafile-server.conf** 파일 만들기"

# header
#: deploy/start_seafile_at_system_bootup.md:68
msgid "#### If you're not using MySQL or an external MySQL server"
msgstr "#### MySQL 또는 외부 MySQL 서버를 사용하지 않는 경우"

#: deploy/start_seafile_at_system_bootup.md:70
msgid "    start on (runlevel [2345])"
msgstr "    start on (runlevel [2345])"

#: deploy/start_seafile_at_system_bootup.md:71
#: deploy/start_seafile_at_system_bootup.md:85
msgid "    stop on (runlevel [016])"
msgstr "    stop on (runlevel [016])"

#: deploy/start_seafile_at_system_bootup.md:73
#: deploy/start_seafile_at_system_bootup.md:87
msgid "    pre-start script"
msgstr "    pre-start script"

#: deploy/start_seafile_at_system_bootup.md:74
#: deploy/start_seafile_at_system_bootup.md:88
msgid "    /etc/init.d/seafile-server start"
msgstr "    /etc/init.d/seafile-server start"

#: deploy/start_seafile_at_system_bootup.md:75
#: deploy/start_seafile_at_system_bootup.md:79
#: deploy/start_seafile_at_system_bootup.md:89
#: deploy/start_seafile_at_system_bootup.md:93
msgid "    end script"
msgstr "    end script"

#: deploy/start_seafile_at_system_bootup.md:77
#: deploy/start_seafile_at_system_bootup.md:91
msgid "    post-stop script"
msgstr "    post-stop script"

#: deploy/start_seafile_at_system_bootup.md:78
#: deploy/start_seafile_at_system_bootup.md:92
msgid "    /etc/init.d/seafile-server stop"
msgstr "    /etc/init.d/seafile-server stop"

# header
#: deploy/start_seafile_at_system_bootup.md:81
msgid "#### If you're using MySQL"
msgstr "#### MySQL을 사용하는 경우"

#: deploy/start_seafile_at_system_bootup.md:83
msgid "    start on (started mysql"
msgstr "    start on (started mysql"

#: deploy/start_seafile_at_system_bootup.md:84
msgid "    and runlevel [2345])"
msgstr "    and runlevel [2345])"

# header
#: deploy/start_seafile_at_system_bootup.md:95
#: deploy/start_seafile_at_system_bootup.md:187
msgid "### Make the seafile-sever script executable"
msgstr "### seafile-server 스크립트를 실행할 수 있게 만들기"

#: deploy/start_seafile_at_system_bootup.md:97
#: deploy/start_seafile_at_system_bootup.md:189
msgid "    sudo chmod +x /etc/init.d/seafile-server"
msgstr "    sudo chmod +x /etc/init.d/seafile-server"

# header
#: deploy/start_seafile_at_system_bootup.md:99
#: deploy/start_seafile_at_system_bootup.md:195
#: deploy/start_seafile_at_system_bootup.md:479
msgid "### Done"
msgstr "### 완료"

#: deploy/start_seafile_at_system_bootup.md:101
msgid ""
"Don't forget to update the value of **script\\_path** later if you update "
"your seafile server."
msgstr ""
"Seafile 서버를 업데이트할 때  **script\\_path** 값의 업데이트를 잊지 마십시"
"오."

# header
#: deploy/start_seafile_at_system_bootup.md:103
msgid ""
"For other Debian based Linux\n"
"----------------------------"
msgstr ""
"다른 데비안 기반 리눅스\n"
"----------------------------"

#: deploy/start_seafile_at_system_bootup.md:112
msgid "    #!/bin/sh"
msgstr "    #!/bin/sh"

#: deploy/start_seafile_at_system_bootup.md:114
msgid "    ### BEGIN INIT INFO"
msgstr "    ### BEGIN INIT INFO"

#: deploy/start_seafile_at_system_bootup.md:115
msgid "    # Provides:          seafile-server"
msgstr "    # Provides:          seafile-server"

#: deploy/start_seafile_at_system_bootup.md:116
msgid "    # Required-Start:    $local_fs $remote_fs $network"
msgstr "    # Required-Start:    $local_fs $remote_fs $network"

#: deploy/start_seafile_at_system_bootup.md:117
msgid "    # Required-Stop:     $local_fs"
msgstr "    # Required-Stop:     $local_fs"

#: deploy/start_seafile_at_system_bootup.md:118
msgid "    # Default-Start:     2 3 4 5"
msgstr "    # Default-Start:     2 3 4 5"

#: deploy/start_seafile_at_system_bootup.md:119
msgid "    # Default-Stop:      0 1 6"
msgstr "    # Default-Stop:      0 1 6"

#: deploy/start_seafile_at_system_bootup.md:120
msgid "    # Short-Description: Starts Seafile Server"
msgstr "    # Short-Description: Starts Seafile Server"

#: deploy/start_seafile_at_system_bootup.md:121
msgid "    # Description:       starts Seafile Server"
msgstr "    # Description:       starts Seafile Server"

#: deploy/start_seafile_at_system_bootup.md:122
msgid "    ### END INIT INFO"
msgstr "    ### END INIT INFO"

#: deploy/start_seafile_at_system_bootup.md:124
msgid "    # Change the value of \"user\" to linux user name who runs seafile"
msgstr "    # Change the value of \"user\" to linux user name who runs seafile"

#: deploy/start_seafile_at_system_bootup.md:134
#: deploy/start_seafile_at_system_bootup.md:250
msgid "    # Change the value of fastcgi to true if fastcgi is to be used"
msgstr "    # Change the value of fastcgi to true if fastcgi is to be used"

#: deploy/start_seafile_at_system_bootup.md:135
#: deploy/start_seafile_at_system_bootup.md:251
msgid "    fastcgi=false"
msgstr "    fastcgi=false"

#: deploy/start_seafile_at_system_bootup.md:176
msgid ""
"1.  If you want to start seahub in fastcgi, just change the **fastcgi** "
"variable to **true**"
msgstr ""
"1. fastcgi 모드로 seahub를 시작하려면 **fastcgi** 변수 값을 **true**로 바꾸십"
"시오"

# ordered list
#: deploy/start_seafile_at_system_bootup.md:177
msgid ""
"2.  If you deployed Seafile with MySQL, append \"mysql\" to the Required-"
"Start line:"
msgstr ""
"2. Seafile을 MySQL과 가동한다면 필요한 시작 줄에 \"mysql\"을 추가하십시오:"

#: deploy/start_seafile_at_system_bootup.md:179
#: deploy/start_seafile_at_system_bootup.md:206
#: deploy/start_seafile_at_system_bootup.md:212
msgid "<!-- -->"
msgstr "<!-- -->"

#: deploy/start_seafile_at_system_bootup.md:181
msgid "    # Required-Start: $local_fs $remote_fs $network mysql"
msgstr "    # Required-Start: $local_fs $remote_fs $network mysql"

# header
#: deploy/start_seafile_at_system_bootup.md:183
msgid "### Add Directory for Logfiles"
msgstr "### 로그 파일용 디렉터리 추가"

#: deploy/start_seafile_at_system_bootup.md:185
msgid "     mkdir /path/to/seafile/dir/logs"
msgstr "     mkdir /path/to/seafile/dir/logs"

# header
#: deploy/start_seafile_at_system_bootup.md:191
msgid "### Add seafile-server to rc.d"
msgstr "### rc.d에 seafile-server 추가"

#: deploy/start_seafile_at_system_bootup.md:193
msgid "    sudo update-rc.d seafile-server defaults"
msgstr "    sudo update-rc.d seafile-server defaults"

#: deploy/start_seafile_at_system_bootup.md:197
msgid ""
"Don't forget to update the value of **seafile\\_dir** later if you update "
"your seafile server."
msgstr ""
"Seafile 서버를 업데이트한 다음 **seafile\\_dir** 값의 업데이트를 잊지 마십시"
"오."

# header
#: deploy/start_seafile_at_system_bootup.md:199
msgid ""
"For RHEL/CentOS\n"
"---------------"
msgstr ""
"RHEL/CentOS\n"
"---------------"

#: deploy/start_seafile_at_system_bootup.md:202
msgid ""
"On RHEL/CentOS, the script [/etc/rc.local](http://www.centos.org/docs/5/html/"
"Installation_Guide-en-US/s1-boot-init-shutdown-run-boot.html) is executed by "
"the system at bootup, so we start seafile/seahub there."
msgstr ""
"RHEL/CentOS에서, [/etc/rc.local](http://www.centos.org/docs/5/html/"
"Installation_Guide-en-US/s1-boot-init-shutdown-run-boot.html)스크립트는 시스"
"템을 부팅할 때 실행하여 seafile/seahub를 시작합니다."

# unordered list
#: deploy/start_seafile_at_system_bootup.md:204
msgid "-   Locate your python executable (python 2.6 or 2.7)"
msgstr "-   파이썬 실행 파일 위치를 지정하십시오(파이썬 2.6 또는 2.7)"

#: deploy/start_seafile_at_system_bootup.md:208
msgid "    which python2.6 # or \"which python2.7\""
msgstr "    which python2.6 # 또는 \"which python2.7\""

# unordered list
#: deploy/start_seafile_at_system_bootup.md:210
msgid ""
"-   In /etc/rc.local, add the directory of python2.6(2.7) to **PATH**, and "
"add the seafile/seahub start command"
msgstr ""
"-   /etc/rc.local에서, python2.6(2.7)의 디렉터리를 **PATH**에 추가하시고, "
"Seafile/Seahub 시작 명령을 추가하십시오"

#: deploy/start_seafile_at_system_bootup.md:214
msgid "    `"
msgstr "    `"

#: deploy/start_seafile_at_system_bootup.md:215
msgid "    # Assume the python 2.6(2.7) executable is in \"/usr/local/bin\""
msgstr "    # Assume the python 2.6(2.7) executable is in \"/usr/local/bin\""

#: deploy/start_seafile_at_system_bootup.md:216
msgid "    PATH=$PATH:/usr/local/bin/"
msgstr "    PATH=$PATH:/usr/local/bin/"

#: deploy/start_seafile_at_system_bootup.md:226
msgid ""
"    sudo -u ${user} ${script_path}/seafile.sh start > /tmp/seafile.init.log "
"2>&1"
msgstr ""
"    sudo -u ${user} ${script_path}/seafile.sh start > /tmp/seafile.init.log "
"2>&1"

#: deploy/start_seafile_at_system_bootup.md:227
msgid ""
"    sudo -u ${user} ${script_path}/seahub.sh start > /tmp/seahub.init.log "
"2>&1"
msgstr ""
"    sudo -u ${user} ${script_path}/seahub.sh start > /tmp/seahub.init.log "
"2>&1"

#: deploy/start_seafile_at_system_bootup.md:229
msgid ""
"**Note**: If you want to start seahub in fastcgi, just change the **\"seahub."
"sh start\"** in the last line above to **\"seahub.sh start-fastcgi\"**"
msgstr ""
"**참고**: fastcgi 모드로 seahub를 시작하려면, 위 마지막 줄의 **\"seahub.sh "
"start\"**를 **\"seahub.sh start-fastcgi\"**로 바꾸십시오"

#: deploy/start_seafile_at_system_bootup.md:231
msgid ""
"-   Done. Don't forget to update the value of **seafile\\_dir** later if you "
"update your seafile server."
msgstr ""
"-   끝났습니다. Seafile 서버를 업데이트한 다음 **seafile\\_dir** 값의 업데이"
"트를 잊지 마십시오."

# header
#: deploy/start_seafile_at_system_bootup.md:233
msgid ""
"For RHEL/CentOS run as service\n"
"------------------------------"
msgstr ""
"RHEL/CentOS에서 서비스로 실행\n"
"------------------------------"

#: deploy/start_seafile_at_system_bootup.md:236
msgid ""
"On RHEL/CentOS , we make use of the /etc/init.d/ scripts to start seafile/"
"seahub at system boot as service."
msgstr ""
"RHEL/CentOS에서 시스템을 부팅할 때 seafile/seahub를 서비스로 가동하는 /etc/"
"init.d/ 스크립트를 사용하도록 하겠습니다."

# header
#: deploy/start_seafile_at_system_bootup.md:238
msgid "### Create a file **/etc/sysconfig/seafile**"
msgstr "### **/etc/sysconfig/seafile** 파일 만들기"

# header
#: deploy/start_seafile_at_system_bootup.md:257
msgid "### Create a script **/etc/init.d/seafile**"
msgstr "### **/etc/init.d/seafile** 스크립트 만들기"

#: deploy/start_seafile_at_system_bootup.md:261
msgid "    # seafile"
msgstr "    # seafile"

#: deploy/start_seafile_at_system_bootup.md:264
msgid "    # chkconfig: - 68 32"
msgstr "    # chkconfig: - 68 32"

#: deploy/start_seafile_at_system_bootup.md:265
msgid "    # description: seafile"
msgstr "    # description: seafile"

#: deploy/start_seafile_at_system_bootup.md:267
#: deploy/start_seafile_at_system_bootup.md:337
msgid "    # Source function library."
msgstr "    # Source function library."

#: deploy/start_seafile_at_system_bootup.md:268
#: deploy/start_seafile_at_system_bootup.md:338
msgid "    . /etc/init.d/functions"
msgstr "    . /etc/init.d/functions"

#: deploy/start_seafile_at_system_bootup.md:270
#: deploy/start_seafile_at_system_bootup.md:340
msgid "    # Source networking configuration."
msgstr "    # Source networking configuration."

#: deploy/start_seafile_at_system_bootup.md:271
#: deploy/start_seafile_at_system_bootup.md:341
msgid "    . /etc/sysconfig/network"
msgstr "    . /etc/sysconfig/network"

#: deploy/start_seafile_at_system_bootup.md:273
#: deploy/start_seafile_at_system_bootup.md:343
msgid "    if [ -f /etc/sysconfig/seafile ];then"
msgstr "    if [ -f /etc/sysconfig/seafile ];then"

#: deploy/start_seafile_at_system_bootup.md:274
#: deploy/start_seafile_at_system_bootup.md:344
msgid "            . /etc/sysconfig/seafile"
msgstr "            . /etc/sysconfig/seafile"

#: deploy/start_seafile_at_system_bootup.md:275
#: deploy/start_seafile_at_system_bootup.md:345
msgid "            else"
msgstr "            else"

#: deploy/start_seafile_at_system_bootup.md:276
#: deploy/start_seafile_at_system_bootup.md:346
msgid ""
"                echo \"Config file /etc/sysconfig/seafile not found! Bye.\""
msgstr ""
"                echo \"Config file /etc/sysconfig/seafile not found! Bye.\""

#: deploy/start_seafile_at_system_bootup.md:277
#: deploy/start_seafile_at_system_bootup.md:347
msgid "                exit 200"
msgstr "                exit 200"

#: deploy/start_seafile_at_system_bootup.md:278
#: deploy/start_seafile_at_system_bootup.md:348
msgid "            fi"
msgstr "            fi"

#: deploy/start_seafile_at_system_bootup.md:280
#: deploy/start_seafile_at_system_bootup.md:350
msgid "    RETVAL=0"
msgstr "    RETVAL=0"

#: deploy/start_seafile_at_system_bootup.md:282
#: deploy/start_seafile_at_system_bootup.md:352
msgid "    start() {"
msgstr "    start() {"

#: deploy/start_seafile_at_system_bootup.md:283
#: deploy/start_seafile_at_system_bootup.md:353
msgid "            # Start daemons."
msgstr "            # Start daemons."

#: deploy/start_seafile_at_system_bootup.md:284
msgid "            echo -n $\"Starting seafile: \""
msgstr "            echo -n $\"Starting seafile: \""

#: deploy/start_seafile_at_system_bootup.md:285
#: deploy/start_seafile_at_system_bootup.md:355
msgid "            ulimit -n 30000"
msgstr "            ulimit -n 30000"

#: deploy/start_seafile_at_system_bootup.md:286
msgid ""
"            su - ${user} -c\"${script_path}/seafile.sh start >> "
"${seafile_init_log} 2>&1\""
msgstr ""
"            su - ${user} -c\"${script_path}/seafile.sh start >> "
"${seafile_init_log} 2>&1\""

#: deploy/start_seafile_at_system_bootup.md:287
#: deploy/start_seafile_at_system_bootup.md:296
#: deploy/start_seafile_at_system_bootup.md:318
#: deploy/start_seafile_at_system_bootup.md:362
#: deploy/start_seafile_at_system_bootup.md:371
#: deploy/start_seafile_at_system_bootup.md:393
msgid "            RETVAL=$?"
msgstr "            RETVAL=$?"

#: deploy/start_seafile_at_system_bootup.md:288
#: deploy/start_seafile_at_system_bootup.md:297
#: deploy/start_seafile_at_system_bootup.md:363
#: deploy/start_seafile_at_system_bootup.md:372
msgid "            echo"
msgstr "            echo"

#: deploy/start_seafile_at_system_bootup.md:289
msgid "            [ $RETVAL -eq 0 ] && touch /var/lock/subsys/seafile"
msgstr "            [ $RETVAL -eq 0 ] && touch /var/lock/subsys/seafile"

#: deploy/start_seafile_at_system_bootup.md:290
#: deploy/start_seafile_at_system_bootup.md:299
#: deploy/start_seafile_at_system_bootup.md:365
#: deploy/start_seafile_at_system_bootup.md:374
msgid "            return $RETVAL"
msgstr "            return $RETVAL"

#: deploy/start_seafile_at_system_bootup.md:291
#: deploy/start_seafile_at_system_bootup.md:300
#: deploy/start_seafile_at_system_bootup.md:366
#: deploy/start_seafile_at_system_bootup.md:375
msgid "    }"
msgstr "    }"

#: deploy/start_seafile_at_system_bootup.md:293
#: deploy/start_seafile_at_system_bootup.md:368
msgid "    stop() {"
msgstr "    stop() {"

#: deploy/start_seafile_at_system_bootup.md:294
msgid "            echo -n $\"Shutting down seafile: \""
msgstr "            echo -n $\"Shutting down seafile: \""

#: deploy/start_seafile_at_system_bootup.md:295
msgid ""
"            su - ${user} -c\"${script_path}/seafile.sh stop >> "
"${seafile_init_log} 2>&1\""
msgstr ""
"            su - ${user} -c\"${script_path}/seafile.sh stop >> "
"${seafile_init_log} 2>&1\""

#: deploy/start_seafile_at_system_bootup.md:298
msgid "            [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/seafile"
msgstr "            [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/seafile"

#: deploy/start_seafile_at_system_bootup.md:307
#: deploy/start_seafile_at_system_bootup.md:382
msgid "    # See how we were called."
msgstr "    # See how we were called."

#: deploy/start_seafile_at_system_bootup.md:309
#: deploy/start_seafile_at_system_bootup.md:384
msgid "      start)"
msgstr "      start)"

#: deploy/start_seafile_at_system_bootup.md:310
#: deploy/start_seafile_at_system_bootup.md:317
#: deploy/start_seafile_at_system_bootup.md:385
#: deploy/start_seafile_at_system_bootup.md:392
msgid "            start"
msgstr "            start"

#: deploy/start_seafile_at_system_bootup.md:312
#: deploy/start_seafile_at_system_bootup.md:387
msgid "      stop)"
msgstr "      stop)"

#: deploy/start_seafile_at_system_bootup.md:313
#: deploy/start_seafile_at_system_bootup.md:316
#: deploy/start_seafile_at_system_bootup.md:388
#: deploy/start_seafile_at_system_bootup.md:391
msgid "            stop"
msgstr "            stop"

#: deploy/start_seafile_at_system_bootup.md:315
#: deploy/start_seafile_at_system_bootup.md:390
msgid "      restart|reload)"
msgstr "      restart|reload)"

#: deploy/start_seafile_at_system_bootup.md:320
#: deploy/start_seafile_at_system_bootup.md:395
msgid "      *)"
msgstr "      *)"

#: deploy/start_seafile_at_system_bootup.md:321
#: deploy/start_seafile_at_system_bootup.md:396
msgid "            echo $\"Usage: $0 {start|stop|restart}\""
msgstr "            echo $\"Usage: $0 {start|stop|restart}\""

#: deploy/start_seafile_at_system_bootup.md:322
#: deploy/start_seafile_at_system_bootup.md:397
msgid "            RETVAL=3"
msgstr "            RETVAL=3"

#: deploy/start_seafile_at_system_bootup.md:325
#: deploy/start_seafile_at_system_bootup.md:400
msgid "    exit $RETVAL"
msgstr "    exit $RETVAL"

# header
#: deploy/start_seafile_at_system_bootup.md:327
msgid "### Create a script **/etc/init.d/seahub**"
msgstr "### **/etc/init.d/seahub** 스크립트 만들기"

#: deploy/start_seafile_at_system_bootup.md:331
msgid "    # seahub"
msgstr "    # seahub"

#: deploy/start_seafile_at_system_bootup.md:334
msgid "    # chkconfig: - 69 31"
msgstr "    # chkconfig: - 69 31"

#: deploy/start_seafile_at_system_bootup.md:335
msgid "    # description: seahub"
msgstr "    # description: seahub"

#: deploy/start_seafile_at_system_bootup.md:354
msgid "            echo -n $\"Starting seahub: \""
msgstr "            echo -n $\"Starting seahub: \""

#: deploy/start_seafile_at_system_bootup.md:356
msgid "            if [  $fastcgi = true ];"
msgstr "            if [  $fastcgi = true ];"

#: deploy/start_seafile_at_system_bootup.md:358
msgid ""
"                    su - ${user} -c\"${script_path}/seahub.sh start-fastcgi "
"${fastcgi_port} >> ${seahub_init_log} 2>&1\""
msgstr ""
"                    su - ${user} -c\"${script_path}/seahub.sh start-fastcgi "
"${fastcgi_port} >> ${seahub_init_log} 2>&1\""

#: deploy/start_seafile_at_system_bootup.md:360
msgid ""
"                    su - ${user} -c\"${script_path}/seahub.sh start >> "
"${seahub_init_log} 2>&1\""
msgstr ""
"                    su - ${user} -c\"${script_path}/seahub.sh start >> "
"${seahub_init_log} 2>&1\""

#: deploy/start_seafile_at_system_bootup.md:364
msgid "            [ $RETVAL -eq 0 ] && touch /var/lock/subsys/seahub"
msgstr "            [ $RETVAL -eq 0 ] && touch /var/lock/subsys/seahub"

#: deploy/start_seafile_at_system_bootup.md:369
msgid "            echo -n $\"Shutting down seahub: \""
msgstr "            echo -n $\"Shutting down seahub: \""

#: deploy/start_seafile_at_system_bootup.md:370
msgid ""
"            su - ${user} -c\"${script_path}/seahub.sh stop >> "
"${seahub_init_log} 2>&1\""
msgstr ""
"            su - ${user} -c\"${script_path}/seahub.sh stop >> "
"${seahub_init_log} 2>&1\""

#: deploy/start_seafile_at_system_bootup.md:373
msgid "            [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/seahub"
msgstr "            [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/seahub"

#: deploy/start_seafile_at_system_bootup.md:402
msgid "Next, enable services:"
msgstr "다음, 서비스를 활성화하신 후:"

#: deploy/start_seafile_at_system_bootup.md:404
msgid "    chmod 550 /etc/init.d/seafile"
msgstr "    chmod 550 /etc/init.d/seafile"

#: deploy/start_seafile_at_system_bootup.md:405
msgid "    chmod 550 /etc/init.d/seahub"
msgstr "    chmod 550 /etc/init.d/seahub"

#: deploy/start_seafile_at_system_bootup.md:406
msgid "    chkconfig --add seafile"
msgstr "    chkconfig --add seafile"

#: deploy/start_seafile_at_system_bootup.md:407
msgid "    chkconfig --add seahub"
msgstr "    chkconfig --add seahub"

#: deploy/start_seafile_at_system_bootup.md:408
msgid "    chkconfig seahub on"
msgstr "    chkconfig seahub on"

#: deploy/start_seafile_at_system_bootup.md:409
msgid "    chkconfig seafile on"
msgstr "    chkconfig seafile on"

#: deploy/start_seafile_at_system_bootup.md:411
msgid "and run:"
msgstr "다음 명령을 실행하십시오:"

#: deploy/start_seafile_at_system_bootup.md:413
msgid "    service seafile start"
msgstr "    service seafile start"

#: deploy/start_seafile_at_system_bootup.md:414
msgid "    service seahub start"
msgstr "    service seahub start"

# header
#: deploy/start_seafile_at_system_bootup.md:416
msgid ""
"For systems running systemd\n"
"---------------------------"
msgstr ""
"systemd를 실행하는 시스템\n"
"---------------------------"

#: deploy/start_seafile_at_system_bootup.md:419
msgid ""
"Create systemd service files, change **${seafile\\_dir}** to your "
"**seafile** installation location and **seafile** to user, who runs "
"**seafile** (if appropriate). Then you need to reload systemd's daemons: "
"**systemctl daemon-reload**."
msgstr ""
"systemd 서비스 파일을 만들고 **${seafile\\_dir}** 경로를 **Seafile** 설치 경"
"로로 바꾼 후, (적당하다면) **Seafile**을 실행하는 **seafile** 사용자를 만드십"
"시오. 그 다음 systemd의 데몬을 다시 불러와야합니다: **systemctl daemon-"
"reload**."

# header
#: deploy/start_seafile_at_system_bootup.md:421
msgid "### Create systemd service file /etc/systemd/system/seafile.service"
msgstr "### /etc/systemd/system/seafile.service systemd 서비스 파일 만들기"

#: deploy/start_seafile_at_system_bootup.md:423
#: deploy/start_seafile_at_system_bootup.md:441
#: deploy/start_seafile_at_system_bootup.md:461
msgid "    [Unit]"
msgstr "    [Unit]"

#: deploy/start_seafile_at_system_bootup.md:424
msgid "    Description=Seafile"
msgstr "    Description=Seafile"

#: deploy/start_seafile_at_system_bootup.md:425
msgid ""
"    # add mysql.service or postgresql.service depending on your database to "
"the line below"
msgstr ""
"    # add mysql.service or postgresql.service depending on your database to "
"the line below"

#: deploy/start_seafile_at_system_bootup.md:426
msgid "    After=network.target"
msgstr "    After=network.target"

#: deploy/start_seafile_at_system_bootup.md:428
#: deploy/start_seafile_at_system_bootup.md:445
#: deploy/start_seafile_at_system_bootup.md:468
msgid "    [Service]"
msgstr "    [Service]"

#: deploy/start_seafile_at_system_bootup.md:429
#: deploy/start_seafile_at_system_bootup.md:451
#: deploy/start_seafile_at_system_bootup.md:469
msgid "    Type=oneshot"
msgstr "    Type=oneshot"

#: deploy/start_seafile_at_system_bootup.md:430
msgid "    ExecStart=${seafile_dir}/seafile-server-latest/seafile.sh start"
msgstr "    ExecStart=${seafile_dir}/seafile-server-latest/seafile.sh start"

#: deploy/start_seafile_at_system_bootup.md:431
msgid "    ExecStop=${seafile_dir}/seafile-server-latest/seafile.sh stop"
msgstr "    ExecStop=${seafile_dir}/seafile-server-latest/seafile.sh stop"

#: deploy/start_seafile_at_system_bootup.md:432
#: deploy/start_seafile_at_system_bootup.md:452
#: deploy/start_seafile_at_system_bootup.md:472
msgid "    RemainAfterExit=yes"
msgstr "    RemainAfterExit=yes"

#: deploy/start_seafile_at_system_bootup.md:433
#: deploy/start_seafile_at_system_bootup.md:449
#: deploy/start_seafile_at_system_bootup.md:473
msgid "    User=seafile"
msgstr "    User=seafile"

#: deploy/start_seafile_at_system_bootup.md:434
#: deploy/start_seafile_at_system_bootup.md:450
#: deploy/start_seafile_at_system_bootup.md:474
msgid "    Group=seafile"
msgstr "    Group=seafile"

#: deploy/start_seafile_at_system_bootup.md:436
#: deploy/start_seafile_at_system_bootup.md:454
#: deploy/start_seafile_at_system_bootup.md:476
msgid "    [Install]"
msgstr "    [Install]"

#: deploy/start_seafile_at_system_bootup.md:437
#: deploy/start_seafile_at_system_bootup.md:455
#: deploy/start_seafile_at_system_bootup.md:477
msgid "    WantedBy=multi-user.target"
msgstr "    WantedBy=multi-user.target"

# header
#: deploy/start_seafile_at_system_bootup.md:439
msgid "### Create systemd service file /etc/systemd/system/seahub.service"
msgstr "### /etc/systemd/system/seahub.service systemd 서비스 파일 만들기"

#: deploy/start_seafile_at_system_bootup.md:442
msgid "    Description=Seafile hub"
msgstr "    Description=Seafile hub"

#: deploy/start_seafile_at_system_bootup.md:443
msgid "    After=network.target seafile.service"
msgstr "    After=network.target seafile.service"

#: deploy/start_seafile_at_system_bootup.md:446
msgid "    # change start to start-fastcgi if you want to run fastcgi"
msgstr "    # change start to start-fastcgi if you want to run fastcgi"

#: deploy/start_seafile_at_system_bootup.md:447
msgid "    ExecStart=${seafile_dir}/seafile-server-latest/seahub.sh start"
msgstr "    ExecStart=${seafile_dir}/seafile-server-latest/seahub.sh start"

#: deploy/start_seafile_at_system_bootup.md:448
msgid "    ExecStop=${seafile_dir}/seafile-server-latest/seahub.sh stop"
msgstr "    ExecStop=${seafile_dir}/seafile-server-latest/seahub.sh stop"

# header
#: deploy/start_seafile_at_system_bootup.md:457
msgid ""
"### Create systemd service file /etc/systemd/system/seafile-client.service "
"(optional)"
msgstr ""
"### /etc/systemd/system/seafile-client.service systemd 서비스 파일 만들기(개"
"별 선택)"

#: deploy/start_seafile_at_system_bootup.md:459
msgid ""
"You need to create this service file only if you have **seafile** console "
"client and you want to run it on system boot."
msgstr ""
"시스템을 부팅할 때 **Seafile** 콘솔 클라이언트를 실행할 경우에만 이 서비스 파"
"일을 만들어야합니다."

#: deploy/start_seafile_at_system_bootup.md:462
msgid "    Description=Seafile client"
msgstr "    Description=Seafile client"

#: deploy/start_seafile_at_system_bootup.md:463
msgid ""
"    # Uncomment the next line you are running seafile client on the same "
"computer as server"
msgstr ""
"    # Uncomment the next line you are running seafile client on the same "
"computer as server"

#: deploy/start_seafile_at_system_bootup.md:464
msgid "    # After=seafile.service"
msgstr "    # After=seafile.service"

#: deploy/start_seafile_at_system_bootup.md:465
msgid "    # Or the next one in other case"
msgstr "    # Or the next one in other case"

#: deploy/start_seafile_at_system_bootup.md:466
msgid "    # After=network.target"
msgstr "    # After=network.target"

#: deploy/start_seafile_at_system_bootup.md:470
msgid "    ExecStart=/usr/bin/seaf-cli start"
msgstr "    ExecStart=/usr/bin/seaf-cli start"

#: deploy/start_seafile_at_system_bootup.md:471
msgid "    ExecStop=/usr/bin/seaf-cli stop"
msgstr "    ExecStop=/usr/bin/seaf-cli stop"

# header
#: deploy/upgrade.md:3
msgid "## Upgrade Manual"
msgstr "## 업그레이드 설명서"

#: deploy/upgrade.md:5
msgid "This page is for users who use the pre-compiled seafile server package."
msgstr ""
"이 페이지는 미리 컴파일한 Seafile 서버 꾸러미를 사용하는 사용자가 보는 페이지"
"입니다."

# unordered list
#: deploy/upgrade.md:7
msgid ""
"- If you [build seafile server from source](../build_seafile/server.md), "
"please read the **Upgrading Seafile Server** section on that page, instead "
"of this one."
msgstr ""
"- [소스 코드에서 Seafile 서버를 빌드](../build_seafile/server.md)하려면, 이 "
"페이지 대신 해당 페이지의 **Seafile 서버 업그레이드** 를 보십시오."

# unordered list
#: deploy/upgrade.md:8
msgid ""
"- After upgrading, you may need to clean [seahub cache](add_memcached.md) if "
"it doesn't behave as expect."
msgstr ""
"- 업그레이드가 끝나면, 원하는 방식으로 [Seahub 캐시](add_memcached.md) 구성"
"이 안되어 있다면 캐시를 정리하는 것이 좋습니다."

#: deploy/upgrade.md:10
msgid ""
"If you are running a **cluster**, please read [upgrade a Seafile cluster](../"
"deploy_pro/upgrade_a_cluster.md)."
msgstr ""
"**클러스터**를 가동중이면, [Seafile 클러스터](../deploy_pro/"
"upgrade_a_cluster.md) 업그레이드를 읽으십시오."

# header
#: deploy/upgrade.md:12
msgid "## Major version upgrade (like from 2.x to 3.y)"
msgstr "## 주 버전 업그레이드(2.x에서 3.y로 업그레이드 하는 방식)"

#: deploy/upgrade.md:15
msgid ""
"Suppose you are using version 2.1.0 and like to upgrade to version 3.1.0. "
"First download and extract the new version. You should have a directory "
"layout similar to this:"
msgstr ""
"2.1.0 버전을 사용중이고 3.1.0 버전으로 업그레이드 할 경우를 가정해보겠습니"
"다. 우선 새 버전을 다운로드하고 압축을 해제하십시오. 디렉터리 배치는 다음과 "
"같습니다:"

# inline html
#: deploy/upgrade.md:18
msgid ""
"<pre>\n"
"haiwen\n"
"   -- seafile-server-2.1.0\n"
"   -- seafile-server-3.1.0\n"
"   -- ccnet\n"
"   -- seafile-data\n"
"</pre>"
msgstr ""
"<pre>\n"
"haiwen\n"
"   -- seafile-server-2.1.0\n"
"   -- seafile-server-3.1.0\n"
"   -- ccnet\n"
"   -- seafile-data\n"
"</pre>"

#: deploy/upgrade.md:27
msgid "Now upgrade to version 3.1.0."
msgstr "이제 3.1.0 버전으로 업그레이드하십시오."

# ordered list
#: deploy/upgrade.md:29 deploy/upgrade.md:85
msgid "1. Shutdown Seafile server if it's running"
msgstr "1. Seafile 서버가 동작중이라면 끄십시오"

# code block
#: deploy/upgrade.md:31
msgid ""
"   ```sh\n"
"   cd haiwen/seafile-server-2.1.0\n"
"   ./seahub.sh stop\n"
"   ./seafile.sh stop\n"
"   ```"
msgstr ""
"   ```sh\n"
"   cd haiwen/seafile-server-2.1.0\n"
"   ./seahub.sh stop\n"
"   ./seafile.sh stop\n"
"   ```"

# ordered list
#: deploy/upgrade.md:36
msgid "2. Check the upgrade scripts in seafile-server-3.1.0 directory."
msgstr "2. seafile-server-3.1.0 디렉터리의 업그레이드 스크립트를 확인하십시오."

# code block
#: deploy/upgrade.md:38
msgid ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.1.0\n"
"   ls upgrade/upgrade_*\n"
"   ```"
msgstr ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.1.0\n"
"   ls upgrade/upgrade_*\n"
"   ```"

#: deploy/upgrade.md:43 deploy/upgrade.md:99
msgid "   You will get a list of upgrade files:"
msgstr "   다음 몇가지 업그레이드 파일을 볼 수 있습니다:"

# code block
#: deploy/upgrade.md:45
msgid ""
"   ```\n"
"   ...\n"
"   upgrade/upgrade_2.0_2.1.sh\n"
"   upgrade/upgrade_2.1_2.2.sh\n"
"   upgrade/upgrade_2.2_3.0.sh\n"
"   upgrade/upgrade_3.0_3.1.sh\n"
"   ```"
msgstr ""
"   ```\n"
"   ...\n"
"   upgrade/upgrade_2.0_2.1.sh\n"
"   upgrade/upgrade_2.1_2.2.sh\n"
"   upgrade/upgrade_2.2_3.0.sh\n"
"   upgrade/upgrade_3.0_3.1.sh\n"
"   ```"

# ordered list
#: deploy/upgrade.md:53 deploy/upgrade.md:108
msgid "3. Start from you current version, run the script one by one"
msgstr "3. 현재 버전에서 시작하여, 하나하나씩 스크립트를 실행하십시오"

# code block
#: deploy/upgrade.md:55
msgid ""
"   ```\n"
"   upgrade/upgrade_2.1_2.2.sh\n"
"   upgrade/upgrade_2.2_3.0.sh\n"
"   upgrade/upgrade_3.0_3.1.sh\n"
"   ```"
msgstr ""
"   ```\n"
"   upgrade/upgrade_2.1_2.2.sh\n"
"   upgrade/upgrade_2.2_3.0.sh\n"
"   upgrade/upgrade_3.0_3.1.sh\n"
"   ```"

# ordered list
#: deploy/upgrade.md:61 deploy/upgrade.md:115
msgid "4. Start the new server version as for any upgrade"
msgstr "4. 업그레이드한 새 서버 버전을 시작하십시오"

# code block
#: deploy/upgrade.md:63
msgid ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.1.0/\n"
"   ./seafile.sh start\n"
"   ./seahub.sh start # or \"./seahub.sh start-fastcgi\" if you're using "
"fastcgi\n"
"   ```"
msgstr ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.1.0/\n"
"   ./seafile.sh start\n"
"   ./seahub.sh start # or \"./seahub.sh start-fastcgi\" if you're using "
"fastcgi\n"
"   ```"

#: deploy/upgrade.md:69
msgid "## Minor version upgrade (like from 3.0.x to 3.2.y)"
msgstr "## 부 버전 업그레이드(3.0.x에서 3.2.y로 업그레이드 하는 방식)"

#: deploy/upgrade.md:71
msgid ""
"Suppose you are using version 3.0.0 and like to upgrade to version 3.2.2. "
"First download and extract the new version. You should have a directory "
"layout similar to this:"
msgstr ""
"3.0.0 버전을 사용하고 있고, 3.2.2 버전으로 업그레이드 하려 한다고 가정하겠습"
"니다. 우선 새 버전을 다운로드하고 압축을 풉니다. 디렉터리 배치는 다음과 같아"
"야합니다:"

# inline html
#: deploy/upgrade.md:74
msgid ""
"<pre>\n"
"haiwen\n"
"   -- seafile-server-3.0.0\n"
"   -- seafile-server-3.2.2\n"
"   -- ccnet\n"
"   -- seafile-data\n"
"</pre>"
msgstr ""
"<pre>\n"
"haiwen\n"
"   -- seafile-server-3.0.0\n"
"   -- seafile-server-3.2.2\n"
"   -- ccnet\n"
"   -- seafile-data\n"
"</pre>"

#: deploy/upgrade.md:83
msgid "Now upgrade to version 3.2.2."
msgstr "이제 3.2.2로 업그레이드하겠습니다."

# code block
#: deploy/upgrade.md:87
msgid ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.0.0\n"
"   ./seahub.sh stop\n"
"   ./seafile.sh stop\n"
"   ```"
msgstr ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.0.0\n"
"   ./seahub.sh stop\n"
"   ./seafile.sh stop\n"
"   ```"

# ordered list
#: deploy/upgrade.md:92
msgid "2. Check the upgrade scripts in seafile-server-3.2.2 directory."
msgstr "2. seafile-server-3.2.2 디렉터리의 업그레이드 스크립트를 확인하십시오."

# code block
#: deploy/upgrade.md:94
msgid ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.2.2\n"
"   ls upgrade/upgrade_*\n"
"   ```"
msgstr ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.2.2\n"
"   ls upgrade/upgrade_*\n"
"   ```"

# code block
#: deploy/upgrade.md:101
msgid ""
"   ```\n"
"   ...\n"
"   upgrade/upgrade_2.2_3.0.sh\n"
"   upgrade/upgrade_3.0_3.1.sh\n"
"   upgrade/upgrade_3.1_3.2.sh\n"
"   ```"
msgstr ""
"   ```\n"
"   ...\n"
"   upgrade/upgrade_2.2_3.0.sh\n"
"   upgrade/upgrade_3.0_3.1.sh\n"
"   upgrade/upgrade_3.1_3.2.sh\n"
"   ```"

# code block
#: deploy/upgrade.md:110
msgid ""
"   ```\n"
"   upgrade/upgrade_3.0_3.1.sh\n"
"   upgrade/upgrade_3.1_3.2.sh\n"
"   ```"
msgstr ""
"   ```\n"
"   upgrade/upgrade_3.0_3.1.sh\n"
"   upgrade/upgrade_3.1_3.2.sh\n"
"   ```"

# code block
#: deploy/upgrade.md:117
msgid ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.2.2/\n"
"   ./seafile.sh start\n"
"   ./seahub.sh start\n"
"   ```"
msgstr ""
"   ```sh\n"
"   cd haiwen/seafile-server-3.2.2/\n"
"   ./seafile.sh start\n"
"   ./seahub.sh start\n"
"   ```"

#: deploy/upgrade.md:124
msgid "## Maintenance version upgrade (like from 3.1.0 to 3.1.2)"
msgstr "## 관리 버전 업그레이드(3.1.0에서 3.1.2로 업그레이드 하는 방식)"

#: deploy/upgrade.md:126
msgid "Maintenance upgrade is like an upgrade from 3.1.0 to 3.1.2."
msgstr ""
"관리 버전 업그레이드는 3.1.0에서 3.1.2로 업그레이드 하는 방식과 같습니다."

# ordered list
#: deploy/upgrade.md:129
msgid "1. Stop the current server first as for any upgrade"
msgstr "1. 업그레이드를 위해 현재 서버를 우선 멈추십시오."

# ordered list
#: deploy/upgrade.md:130
msgid ""
"2. For this type of upgrade, you only need to update the symbolic links (for "
"avatar and a few other folders). We provide a script for you, just run it "
"(For history reason, the script called `minor-upgrade.sh`):"
msgstr ""
"2. 이 방식의 업그레이드 과정에서는 심볼릭 링크만 업데이트하시면 됩니다(아바"
"타 및 일부 기타 폴더용). 제공해드리는 스크립트를 그냥 실행만 하십시오(역사적"
"인 이유로 `minor-upgrade.sh`라고 합니다):"

# code block
#: deploy/upgrade.md:132
msgid ""
"   ```sh\n"
"   cd seafile-server-3.1.2\n"
"   upgrade/minor-upgrade.sh\n"
"   ```"
msgstr ""
"   ```sh\n"
"   cd seafile-server-3.1.2\n"
"   upgrade/minor-upgrade.sh\n"
"   ```"

# ordered list
#: deploy/upgrade.md:137
msgid "3. Start the new server version as for any upgrade"
msgstr "3. 업그레이드한 새 서버 버전을 시작하십시오"

# ordered list
#: deploy/upgrade.md:139
msgid "4. If the new version works fine, the old version can be removed"
msgstr "4. 새 버전이 잘 동작한다면, 이전 버전을 제거할 수 있습니다"

# code block
#: deploy/upgrade.md:141
msgid ""
"   ```sh\n"
"   rm -rf seafile-server-3.1.0\n"
"   ```"
msgstr ""
"   ```sh\n"
"   rm -rf seafile-server-3.1.0\n"
"   ```"

#: deploy/upgrade_with_mysql_or_postgresql.md:1
msgid "#Seafile"
msgstr "# Seafile"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:2
msgid "## Upgrade with MySQL or PostgreSQL"
msgstr "## MySQL 또는 PostgreSQL과 업그레이드"

#: deploy/upgrade_with_mysql_or_postgresql.md:4
msgid ""
"First, download the new version, for example seafile-server_1.6.0_x86-64.tar."
"gz, and extract it to the directory where you put all Seafile related stuff. "
"You should have a directory layout similar to this:"
msgstr ""
"우선 seafile-server_1.6.0_x86-64.tar.gz와 같은 새 버전을 다운로드하시고, "
"Seafile 관련 내용을 모두 담을 디렉터리에 압축을 풀어두십시오. 디렉터리 배치"
"는 다음과 비슷해야합니다:"

# inline html
#: deploy/upgrade_with_mysql_or_postgresql.md:6
msgid ""
"<pre>\n"
"haiwen\n"
"   -- seafile-server-1.5.0\n"
"   -- seafile-server-1.6.0\n"
"   -- ccnet\n"
"   -- seafile-data\n"
"</pre>"
msgstr ""
"<pre>\n"
"haiwen\n"
"   -- seafile-server-1.5.0\n"
"   -- seafile-server-1.6.0\n"
"   -- ccnet\n"
"   -- seafile-data\n"
"</pre>"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:14
msgid "## Major Continuous Upgrade (like from 1.5 to 1.6)"
msgstr "## 주 버전 연속 업그레이드(1.5에서 1.6으로 업그레이드하는 방식)"

#: deploy/upgrade_with_mysql_or_postgresql.md:16
msgid ""
"Major continuous upgrade including upgrading from 1.5.0 to 1.6.0 or "
"upgrading from 1.5.0 to 1.6.1. It involves four steps:"
msgstr ""
"1.5.0에서 1.6.0으로 업그레이드 하거나 1.5.0에서 1.6.1로 업그레이드 하는 방식"
"이 주 버전 연속 업그레이드 방식입니다. 다음 네 단계를 거칩니다:"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:18
msgid "1. Stop Seafile/Seahub"
msgstr "1. Seafile/Seahub를 멈춥니다"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:19
msgid "2. Update avatars folder and database tables"
msgstr "2. 아바타 폴더와 데이터베이스 테이블을 업데이트합니다"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:20
msgid "3. Update Nginx/Apache configs"
msgstr "3. Nginx/Apache 설정을 업데이트합니다"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:21
msgid "4. Restart Seafile/Seahub"
msgstr "4. Seafile/Seahub를 다시 시작합니다"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:23
msgid ""
"### 2. Update avatars folder and database tables （After Seafile Server "
"2.1.1 for MySQL）"
msgstr ""
"### 2. 아바타 폴더 및 데이터베이스 테이블 업데이트(MySQL 및 Seafile 서버 "
"2.1.1 이후)"

#: deploy/upgrade_with_mysql_or_postgresql.md:25
msgid ""
"Since seafile server 2.1.1, You can upgrade the the avatars folder and the "
"databases using the upgrade scripts. The script's name is like `upgrade_X."
"X_Y.Y.sh`. For example, assume you are upgrading from seafile server 2.0.0 "
"to seafile server 2.1.1, the you should run the `upgrade_2.0_2.1.sh` script."
msgstr ""
"Seafile 서버 2.1.1부터 업그레이트 스크립트로 아바타 폴더와 데이터베이스를 업"
"그레이드할 수 있습니다. 이 스크립트는 `upgrade_X.X_Y.Y.sh`같은 이름이 붙습니"
"다. 예를 들어, Seafile 서버 2.0.0에서 Seafile 서버 2.1.1로 업그레이드 할 경"
"우 `upgrade_2.0_2.1.sh` 스크립트를 실행해야합니다."

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:27
msgid ""
"```sh\n"
"cd seafile-server-2.1.1/\n"
"./upgrade/upgrade_2.0_2.1.sh\n"
"```"
msgstr ""
"```sh\n"
"cd seafile-server-2.1.1/\n"
"./upgrade/upgrade_2.0_2.1.sh\n"
"```"

#: deploy/upgrade_with_mysql_or_postgresql.md:32
msgid ""
"The script would update the avatars folder and the database tables for you."
msgstr "이 스크립트는 아바타 폴더와 데이터베이스 테이블을 업데이트합니다."

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:34
msgid ""
"### 2. Update avatars folder and database tables (For PostgreSQL and before "
"Seafile Server 2.1.1)"
msgstr ""
"### 2. 아바타 폴더 및 데이터베이스 테이블 업데이트(PostgreSQL 및 Seafile 서"
"버 2.1.1 이전 버전용)"

#: deploy/upgrade_with_mysql_or_postgresql.md:36
msgid ""
"Before Seafile Server 2.1.1 or if you are using PostgreSQL, you have to "
"manually:"
msgstr ""
"Seafile 서버 2.1.1을 사용하거나 PostgreSQL을 사용한다면 다음 과정을 직접 거쳐"
"야합니다:"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:38
msgid "- update the avatars folder symbolic link"
msgstr "- 아바타 폴더 심볼릭 링크 업데이트"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:39
msgid "- update and the database tables"
msgstr "- 데이터베이스 테이블 업데이트"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:41
msgid "#### Update avatars symbolic link"
msgstr "#### 아바타 심볼릭 링크 업데이트"

#: deploy/upgrade_with_mysql_or_postgresql.md:43
msgid ""
"Assume your top level directory is `/data/haiwen/`, and you are upgrading to "
"seafile server version 1.6.0:"
msgstr ""
"최상위 디렉터리는 `/data/haiwen/`이며, Seafile 서버 1.6.0 버전으로 업그레이"
"드 한다고 가정합니다:"

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:45
msgid ""
"```\n"
"cd /data/haiwen\n"
"cp -a seafile-server-1.6.0/seahub/media/avatars/* seahub-data/avatars/\n"
"rm -rf seafile-server-1.6.0/seahub/media/avatars\n"
"#the new server avatars' folder will be linked to the updated avatars "
"folder\n"
"ln -s -t seafile-server-1.6.0/seahub/media/  ../../../seahub-data/avatars/\n"
"```"
msgstr ""
"```\n"
"cd /data/haiwen\n"
"cp -a seafile-server-1.6.0/seahub/media/avatars/* seahub-data/avatars/\n"
"rm -rf seafile-server-1.6.0/seahub/media/avatars\n"
"#the new server avatars' folder will be linked to the updated avatars "
"folder\n"
"ln -s -t seafile-server-1.6.0/seahub/media/  ../../../seahub-data/avatars/\n"
"```"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:53
msgid "#### Update database tables"
msgstr "#### 데이터베이스 테이블 업그레이드"

#: deploy/upgrade_with_mysql_or_postgresql.md:55
msgid ""
"When a new version of seafile server is released, there may be changes to "
"the database of seafile/seahub/ccnet. We provide the sql statements to "
"update the databases:"
msgstr ""
"Seafile 서버 새 버전을 출시하면 Seafile/Seahub/ccnet 데이터베이스가 바뀌었을 "
"수도 있습니다. 데이터베이스를 업그레이드할 SQL 구문을 제공해드립니다:"

# unordered list
#: deploy/upgrade_with_mysql_or_postgresql.md:57
msgid ""
"- `upgrade/sql/<VERSION>/mysql/seahub.sql`, for changes to seahub database"
msgstr ""
"- Seahub 데이터베이스를 바꾸는 `upgrade/sql/<VERSION>/mysql/seahub.sql`"

# unordered list
#: deploy/upgrade_with_mysql_or_postgresql.md:58
msgid ""
"- `upgrade/sql/<VERSION>/mysql/seafile.sql`, for changes to seafile database"
msgstr ""
"- Seafile 데이터베이스를 바꾸는`upgrade/sql/<VERSION>/mysql/seafile.sql`"

# unordered list
#: deploy/upgrade_with_mysql_or_postgresql.md:59
msgid ""
"- `upgrade/sql/<VERSION>/mysql/ccnet.sql`, for changes to ccnet database"
msgstr "- ccnet 데이터베이스를 바꾸는`upgrade/sql/<VERSION>/mysql/ccnet.sql`"

#: deploy/upgrade_with_mysql_or_postgresql.md:61
msgid ""
"To apply the changes, just execute the sqls in the correspondent database. "
"If any of the sql files above do not exist, it means the new version does "
"not bring changes to the correspondent database."
msgstr ""
"바꾼 설정을 적용하려면 각각의 데이터베이스에 대해 SQL 구문을 그냥 실행하십시"
"오 위 SQL 파일 중 하나라도 없다면, 새 버전에서 관련 데이터베이스에 바뀐 부분"
"이 없음을 의미합니다."

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:63
msgid ""
"```sh\n"
"seafile-server-1.6.0\n"
"├── seafile\n"
"├── seahub\n"
"├── upgrade\n"
"    ├── sql\n"
"        ├── 1.6.0\n"
"            ├── mysql\n"
"                ├── seahub.mysql\n"
"                ├── seafile.mysql\n"
"                ├── ccnet.mysql\n"
"```"
msgstr ""
"```sh\n"
"seafile-server-1.6.0\n"
"├── seafile\n"
"├── seahub\n"
"├── upgrade\n"
"    ├── sql\n"
"        ├── 1.6.0\n"
"            ├── mysql\n"
"                ├── seahub.mysql\n"
"                ├── seafile.mysql\n"
"                ├── ccnet.mysql\n"
"```"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:77
msgid "### 3. Update Nginx/Apache Config"
msgstr "### 3. Nginx/Apache 설정 업데이트"

#: deploy/upgrade_with_mysql_or_postgresql.md:79
#: deploy/upgrade_with_mysql_or_postgresql.md:151
msgid "For Nginx:"
msgstr "Nginx:"

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:81
msgid ""
"```\n"
"  location /media {\n"
"      root /data/haiwen/seafile-server-1.6.0/seahub;\n"
"  }\n"
"```"
msgstr ""
"```\n"
"  location /media {\n"
"      root /data/haiwen/seafile-server-1.6.0/seahub;\n"
"  }\n"
"```"

#: deploy/upgrade_with_mysql_or_postgresql.md:87
#: deploy/upgrade_with_mysql_or_postgresql.md:159
msgid "For Apache:"
msgstr " Apache:"

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:89
msgid ""
"```\n"
"Alias /media  /data/haiwen/seafile-server-1.6.0/seahub/media\n"
"```"
msgstr ""
"```\n"
"Alias /media  /data/haiwen/seafile-server-1.6.0/seahub/media\n"
"```"

#: deploy/upgrade_with_mysql_or_postgresql.md:94
msgid ""
"You can create a symbolic link <code>seafile-server-latest</code>, and make "
"it point to your current seafile server folder (Since seafile server 2.1.0, "
"the <code>setup-seafile.sh</code> script will do this for your). Then, each "
"time you run a upgrade script, it would update the <code>seafile-server-"
"latest</code> symbolic link to keep it always point to the latest version "
"seafile server folder."
msgstr ""
"<code>seafile-server-latest</code> 심볼릭 링크를 만들어 현재 Seafile 서버 폴"
"더를 가리칠 수 있습니다(Seafile 서버 2.1.0부터 <code>setup-seafile.sh</code> "
"스크립트에서 심볼링 링크를 만듬). 다음 업그레이드 스크립트를 실행할 때마다 "
"<code>seafile-server-latest</code> 심볼릭 링크는 최신 Seafile 서버 폴더를 가"
"리킵니다."

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:98
msgid ""
"```\n"
"    location /media {\n"
"        root /data/haiwen/seafile-server-latest/seahub;\n"
"    }\n"
"```"
msgstr ""
"```\n"
"    location /media {\n"
"        root /data/haiwen/seafile-server-latest/seahub;\n"
"    }\n"
"```"

#: deploy/upgrade_with_mysql_or_postgresql.md:104
msgid "or For Apache:"
msgstr "Apache:"

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:106
msgid ""
"```\n"
"Alias /media  /data/haiwen/seafile-server-latest/seahub/media\n"
"```"
msgstr ""
"```\n"
"Alias /media  /data/haiwen/seafile-server-latest/seahub/media\n"
"```"

#: deploy/upgrade_with_mysql_or_postgresql.md:110
msgid ""
"This way, you no longer need to update the Nginx/Apache config file each "
"time you upgrade your seafile server."
msgstr ""
"이 방법으로 Seafile 서버를 업그레이드할 때마다 더 이상 Nginx/Apache 설정 파일"
"을 업데이트할 필요가 없습니다."

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:113
msgid "### 4. Restart Seafile/Seahub/Nginx/Apache"
msgstr "### 4. Seafile/Seahub/Nginx/Apache 다시 시작"

#: deploy/upgrade_with_mysql_or_postgresql.md:115
#: deploy/upgrade_with_mysql_or_postgresql.md:167
msgid ""
"After done above updating, now restart Seafile/Seahub/Nginx/Apache to see "
"the new version at work!"
msgstr ""
"위 업그레이드 과정이 끝나면, Seafile/Seahub/Nginx/Apache를 다시 시작하여 새 "
"버전이 동작하는 모습을 살펴보십시오!"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:117
msgid "## Noncontinuous Upgrade (like from 1.1 to 1.3)"
msgstr "## 비연속 버전 업그레이드(1.1에서 1.3으로 업그레이드하는 방식)"

#: deploy/upgrade_with_mysql_or_postgresql.md:119
msgid "You may also upgrade a few versions at once, e.g. from 1.1.0 to 1.3.0."
msgstr ""
"1.1.0버전에서 1.3.0버전으로 업그레이드 하는 방식과 같이 일부 버전을 한번에 업"
"그레이드 할 수 있습니다."

#: deploy/upgrade_with_mysql_or_postgresql.md:120
msgid "The procedure is:"
msgstr "절차는 다음과 같습니다:"

# ordered list
#: deploy/upgrade_with_mysql_or_postgresql.md:122
msgid "1. upgrade from 1.1.0 to 1.2.0;"
msgstr "1. 1.1.0에서 1.2.0으로 업그레이드 하십시오"

# ordered list
#: deploy/upgrade_with_mysql_or_postgresql.md:123
msgid "2. upgrade from 1.2.0 to 1.3.0."
msgstr "2. 1.2.0에서 1.3.0으로 업그레이드 하십시오."

#: deploy/upgrade_with_mysql_or_postgresql.md:126
msgid "## Minor upgrade (like from 1.5.0 to 1.5.1)"
msgstr "## 부 버전 업그레이드(1.5.0에서 1.5.1로 업그레이드 하는 방식)"

#: deploy/upgrade_with_mysql_or_postgresql.md:128
msgid "Minor upgrade is like an upgrade from 1.5.0 to 1.5.1."
msgstr ""
"부 버전 업그레이드는 1.5.0에서 1.5.1로 업그레이드 하는 방식과 같습니다."

#: deploy/upgrade_with_mysql_or_postgresql.md:130
msgid "Here is our dir structure"
msgstr "디렉터리 구조는 다음과 같습니다"

# inline html
#: deploy/upgrade_with_mysql_or_postgresql.md:132
msgid ""
"<pre>\n"
"haiwen\n"
"   -- seafile-server-1.5.0\n"
"   -- seafile-server-1.5.1\n"
"   -- ccnet\n"
"   -- seafile-data\n"
"</pre>"
msgstr ""
"<pre>\n"
"haiwen\n"
"   -- seafile-server-1.5.0\n"
"   -- seafile-server-1.5.1\n"
"   -- ccnet\n"
"   -- seafile-data\n"
"</pre>"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:140
msgid "### Update the avatar link"
msgstr "### 아바타 링크 업데이트"

#: deploy/upgrade_with_mysql_or_postgresql.md:142
msgid "We provide a script for you, just run it:"
msgstr "스크립트를 제공했으니, 실행만 하십시오:"

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:144
msgid ""
"```sh\n"
"cd seafile-server-1.5.1\n"
"upgrade/minor-upgrade.sh\n"
"```"
msgstr ""
"```sh\n"
"cd seafile-server-1.5.1\n"
"upgrade/minor-upgrade.sh\n"
"```"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:149
msgid "### Update Nginx/Apache Config"
msgstr "### Nginx/Apache 설정 업데이트"

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:153
msgid ""
"```\n"
"  location /media {\n"
"      root /data/haiwen/seafile-server-1.5.1/seahub;\n"
"  }\n"
"```"
msgstr ""
"```\n"
"  location /media {\n"
"      root /data/haiwen/seafile-server-1.5.1/seahub;\n"
"  }\n"
"```"

# code block
#: deploy/upgrade_with_mysql_or_postgresql.md:161
msgid ""
"```\n"
"Alias /media  /data/haiwen/seafile-server-1.5.1/seahub/media\n"
"```"
msgstr ""
"```\n"
"Alias /media  /data/haiwen/seafile-server-1.5.1/seahub/media\n"
"```"

# header
#: deploy/upgrade_with_mysql_or_postgresql.md:165
msgid "### Restart Seafile/Seahub/Nginx/Apache"
msgstr "### Seafile/Seahub/Nginx/Apache 다시 시작"

# header
#: deploy/using_firewall.md:1
msgid "# Firewall settings"
msgstr "# 방화벽 설정"

#: deploy/using_firewall.md:3
msgid ""
"By default, you should open 2 ports, 8000 and 8082, in your firewall "
"settings."
msgstr "기본적으로, 방화벽 설정에서 8000 및 8082 포트를 열어야합니다."

#: deploy/using_firewall.md:5
msgid ""
"If you run Seafile behind Nginx/Apache with HTTPS, you only need to open "
"ports 443."
msgstr "Seafile을 Nginx/Apache에서 https로 실행한다면, 443 포트만 열면 됩니다."

# header
#: deploy/using_fuse.md:2
msgid "## Using Fuse"
msgstr "## Fuse 활용"

#: deploy/using_fuse.md:4
msgid ""
"Files in the seafile system are split to blocks, which means what are stored "
"on your seafile server are not complete files, but blocks. This design "
"faciliates effective data deduplication."
msgstr ""
"Seafile 시스템의 파일은 블록 단위로 나뉘어 있으며, 완전한 파일이 아닌 블록 단"
"위로 Seafile 서버에 저장해둠을 의미합니다. 이 설계 수단은 데이터 중복 방지에 "
"효과적입니다."

#: deploy/using_fuse.md:6
msgid ""
"However, administrators sometimes want to access the files directly on the "
"server. You can use seaf-fuse to do this."
msgstr ""
"그러나, 가끔 관리자는 서버의 파일에 바로 접근하고 싶을 때가 있습니다. 이 때 "
"seaf-fuse를 사용할 수 있습니다."

#: deploy/using_fuse.md:8
msgid ""
"<code>Seaf-fuse</code> is an implementation of the [http://fuse.sourceforge."
"net FUSE] virtual filesystem. In a word, it mounts all the seafile files to "
"a folder (which is called the '''mount point'''), so that you can access all "
"the files managed by seafile server, just as you access a normal folder on "
"your server."
msgstr ""
"<code>Seaf-fuse</code>는 [http://fuse.sourceforge.net FUSE] 가상 파일 시스템"
"의 구현체입니다. 말 그대로, 모든 Seafile 파일을 폴더('''마운트 지점''')에 마"
"운트하여, 서버의 일반 폴더에 접근하는 것처럼 Seafile 서버가 관리하는 모든 파"
"일에 접근할 수 있습니다."

#: deploy/using_fuse.md:10
msgid "Seaf-fuse is added since Seafile Server '''2.1.0'''."
msgstr "Seaf-fuse는 Seafile 서버 '''2.1.0'''부터 추가했습니다."

#: deploy/using_fuse.md:12
msgid "'''Note:'''"
msgstr "'''참고:'''"

# unordered list
#: deploy/using_fuse.md:13
msgid "* Encrypted folders can't be accessed by seaf-fuse."
msgstr "* 암호화 폴더는 seaf-fuse로 접근할 수 없습니다."

# unordered list
#: deploy/using_fuse.md:14
msgid ""
"* Currently the implementation is '''read-only''', which means you can't "
"modify the files through the mounted folder."
msgstr ""
"* 현재 구현체는 '''읽기 전용'''이며, 마운트한 폴더의 파일을 수정할 수 없습니"
"다."

# unordered list
#: deploy/using_fuse.md:15
msgid ""
"* One debian/centos systems, you need to be in the \"fuse\" group to have "
"the permission to mount a FUSE folder."
msgstr ""
"* 데비안/CentOS 시스템에서 FUSE 폴더의 접근 권한을 취하려면 해당 사용자를 "
"\"fuse\" 그룹에 넣어야합니다."

# header
#: deploy/using_fuse.md:17
msgid "## How to start seaf-fuse"
msgstr "## seaf-fuse 시작 방법"

#: deploy/using_fuse.md:19
msgid "Assume we want to mount to <code>/data/seafile-fuse</code>."
msgstr "<code>/data/seafile-fuse</code>에 마운드해보겠다고 가정하겠습니다."

# header
#: deploy/using_fuse.md:21
msgid "#### Create the folder as the mount point"
msgstr "#### 마운트 지점 폴더 만들기"

# inline html
#: deploy/using_fuse.md:23
msgid ""
"<pre>\n"
"mkdir -p /data/seafile-fuse\n"
"</pre>"
msgstr ""
"<pre>\n"
"mkdir -p /data/seafile-fuse\n"
"</pre>"

# header
#: deploy/using_fuse.md:27
msgid "#### Start seaf-fuse with the script"
msgstr "#### 스크립트로 seaf-fuse 시작하기"

#: deploy/using_fuse.md:29
msgid ""
"'''Note:''' Before start seaf-fuse, you should have started seafile server "
"with <code>./seafile.sh start</code>."
msgstr ""
"'''Note:''' seaf-fuse를 시작하기 전, <code>./seafile.sh start</code> 명령으"
"로 Seafile 서버를 시작해야합니다."

# inline html
#: deploy/using_fuse.md:31
msgid ""
"<pre>\n"
"./seaf-fuse.sh start /data/seafile-fuse\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seaf-fuse.sh start /data/seafile-fuse\n"
"</pre>"

# header
#: deploy/using_fuse.md:35
msgid "#### Stop seaf-fuse"
msgstr "#### seaf-fuse 중단"

# inline html
#: deploy/using_fuse.md:37
msgid ""
"<pre>\n"
"./seaf-fuse.sh stop\n"
"</pre>"
msgstr ""
"<pre>\n"
"./seaf-fuse.sh stop\n"
"</pre>"

# header
#: deploy/using_fuse.md:41
msgid "## Contents of the mounted folder"
msgstr "## 마운트한 폴더 내용"

# header
#: deploy/using_fuse.md:43
msgid "#### The top level folder"
msgstr "#### 최상위 단계 폴더"

#: deploy/using_fuse.md:45
msgid "Now you can list the content of <code>/data/seafile-fuse</code>."
msgstr "이제 <code>/data/seafile-fuse</code>의 내용을 살펴볼 수 있습니다."

# inline html
#: deploy/using_fuse.md:47
msgid ""
"<pre>\n"
"$ ls -lhp /data/seafile-fuse\n"
"\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 abc@abc.com/\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 foo@foo.com/\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 plus@plus.com/\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 sharp@sharp.com/\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 test@test.com/\n"
"</pre>"
msgstr ""
"<pre>\n"
"$ ls -lhp /data/seafile-fuse\n"
"\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 abc@abc.com/\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 foo@foo.com/\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 plus@plus.com/\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 sharp@sharp.com/\n"
"drwxr-xr-x 2 root root 4.0K Jan  1  1970 test@test.com/\n"
"</pre>"

# unordered list
#: deploy/using_fuse.md:57
msgid ""
"* The top level folder contains many subfolders, each of which corresponds "
"to a user"
msgstr ""
"* 최상위 폴더에는 여러가지 하위 폴더가 있는데, 이 하위 폴더는 각 사용자와 관"
"련이 있습니다"

# unordered list
#: deploy/using_fuse.md:58
msgid "* The time stamp of files and folders is not preserved."
msgstr "* 파일 및 폴더의 타임스탬프는 보존하지 않습니다."

# header
#: deploy/using_fuse.md:60
msgid "#### The folder for each user"
msgstr "#### 사용자별 폴더"

# inline html
#: deploy/using_fuse.md:62
msgid ""
"<pre>\n"
"$ ls -lhp /data/seafile-fuse/abc@abc.com\n"
"\n"
"drwxr-xr-x 2 root root  924 Jan  1  1970 5403ac56-5552-4e31-"
"a4f1-1de4eb889a5f_Photos/\n"
"drwxr-xr-x 2 root root 1.6K Jan  1  1970 "
"a09ab9fc-7bd0-49f1-929d-6abeb8491397_My Notes/\n"
"</pre>"
msgstr ""
"<pre>\n"
"$ ls -lhp /data/seafile-fuse/abc@abc.com\n"
"\n"
"drwxr-xr-x 2 root root  924 Jan  1  1970 5403ac56-5552-4e31-"
"a4f1-1de4eb889a5f_Photos/\n"
"drwxr-xr-x 2 root root 1.6K Jan  1  1970 "
"a09ab9fc-7bd0-49f1-929d-6abeb8491397_My Notes/\n"
"</pre>"

#: deploy/using_fuse.md:69
msgid ""
"From the above list you can see, under the folder of a user there are "
"subfolders, each of which represents a library of that user, and has a name "
"of this format: '''{library_id}-{library-name}'''."
msgstr ""
"위 목록에서 보신 바와 같이, 사용자 폴더 아래에 하위 폴더가 있는데 각 폴더는 "
"사용자의 라이브러리를 나타내며, '''{library_id}-{library-name}''' 형식의 이름"
"이 갖춰져 있습니다."

# header
#: deploy/using_fuse.md:71
msgid "#### The folder for a library"
msgstr "#### 라이브러리용 폴더"

# inline html
#: deploy/using_fuse.md:73
msgid ""
"<pre>\n"
"$ ls -lhp /data/seafile-fuse/abc@abc.com/5403ac56-5552-4e31-"
"a4f1-1de4eb889a5f_Photos/\n"
"\n"
"-rw-r--r-- 1 root root 501K Jan  1  1970 image.png\n"
"-rw-r--r-- 1 root root 501K Jan  1  1970 sample.jpng\n"
"</pre>"
msgstr ""
"<pre>\n"
"$ ls -lhp /data/seafile-fuse/abc@abc.com/5403ac56-5552-4e31-"
"a4f1-1de4eb889a5f_Photos/\n"
"\n"
"-rw-r--r-- 1 root root 501K Jan  1  1970 image.png\n"
"-rw-r--r-- 1 root root 501K Jan  1  1970 sample.jpng\n"
"</pre>"

# header
#: deploy/using_fuse.md:80
msgid "#### If you get a \"Permission denied\" error"
msgstr "#### \"Permission denied\" 오류 발생시"

#: deploy/using_fuse.md:82
msgid ""
"If you get an error message saying \"Permission denied\" when running "
"<code>./seaf-fuse.sh start</code>, most likely you are not in the \"fuse "
"group\". You should:"
msgstr ""
"<code>./seaf-fuse.sh start</code> 명령을 실행할 때 \"Permission denied\" 오"
"류 메시지가 나타난다면, 대부분 여러분이 \"fuse 그룹\"에 속해있지 않았기 때문"
"일지도 모릅니다. 다음 과정을 진행하십시오:"

# unordered list
#: deploy/using_fuse.md:84
msgid "* Add yourself to the fuse group"
msgstr "* fuse 그룹에 자신을 추가하십시오"

# inline html
#: deploy/using_fuse.md:85
msgid ""
"<pre>\n"
"sudo usermod -a -G fuse <your-user-name>\n"
"</pre>"
msgstr ""
"<pre>\n"
"sudo usermod -a -G fuse <your-user-name>\n"
"</pre>"

# unordered list
#: deploy/using_fuse.md:88
msgid "* Logout your shell and login again"
msgstr "* 쉘에서 로그아웃 후 다시 로그인하십시오"

# unordered list
#: deploy/using_fuse.md:89
msgid "* Now try <code>./seaf-fuse.sh start <path></code> again."
msgstr ""
"* 이제<code>./seaf-fuse.sh start <path></code> 명령을 다시 실행해보십시오."

# header
#: deploy/using_ldap.md:1
msgid "# Configure Seafile to use LDAP"
msgstr "# Seafile LDAP 사용 설정"

#: deploy/using_ldap.md:3
msgid ""
"Note: This documentation is for the Community Edition. If you're using Pro "
"Edition, please refer to [the Seafile Pro documentation](../deploy_pro/"
"using_ldap_pro.md)."
msgstr ""
"참고: 이 문서는 커뮤니티판용입니다. 전문가판을 사용한다면 [Seafile 전문가판 "
"문서](../deploy_pro/using_ldap_pro.md)를 참고하십시오."

# header
#: deploy/using_ldap.md:5
msgid "## How does LDAP User Management work in Seafile"
msgstr "## Seafile의 LDAP 사용자 관리 동작 방식"

#: deploy/using_ldap.md:7
msgid ""
"When Seafile is integrated with LDAP/AD, users in the system can be divided "
"into two tiers:"
msgstr "Seafile을 LDAP/AD와 통합하면, 시스템 사용자는 두 티어로 구분합니다:"

# unordered list
#: deploy/using_ldap.md:9
msgid ""
"- Users within Seafile's internal user database. Some attributes are "
"attached to these users, such as whether it's a system admin user, whether "
"it's activated. This tier includes two types of users:"
msgstr ""
"- Seafile의 자체 사용자 데이터베이스에 있는 사용자. 일부 속성은 이 사용자로 "
"붙는데, 시스템 관리 사용자인지, 활성 상태인지 여부 속성이 여기에 해당합니다. "
"이 티어에는 두가지 형태의 사용자가 있습니다:"

# unordered list
#: deploy/using_ldap.md:10
msgid ""
"    * Native users: these users are created by the admin on Seafile's system "
"admin interface. These users are stored in the `EmailUser` table of the "
"`ccnet` database."
msgstr ""
"    * 자체 사용자: 이 사용자는 Seafile의 시스템 관리자 인터페이스에서 관리자"
"가 만듭니다. 이 사용자는 `ccnet` 데이터베이스의 `EmailUser` 테이블에 저장합니"
"다."

# unordered list
#: deploy/using_ldap.md:11
msgid ""
"    * Users imported from LDAP/AD server: When a user in LDAP/AD logs into "
"Seafile, its information will be imported from LDAP/AD server into Seafile's "
"database. These users are stored in the `LDAPUsers` table of the `ccnet` "
"database."
msgstr ""
"    * LDAP/AD 서버에서 온 사용자: Seafile에 LDAP/AD 사용자가 로그인하면, "
"LDAP/AD 서버의 사용자 정보를 Seafile 데이터베이스로 가져옵니다. 이 사용자는 "
"`ccnet` 데이터베이스의 `LDAPUsers` 테이블에 저장합니다."

# unordered list
#: deploy/using_ldap.md:12
msgid ""
"- Users in LDAP/AD server. These are all the intended users of Seafile "
"inside the LDAP server. Seafile doesn't manipulate these users directly. It "
"has to import them into its internal database before setting attributes on "
"them."
msgstr ""
"- LDAP/AD 서버 사용자. 이 사용자는 LDAP 서버에 있는 Seafile을 사용하려는 사용"
"자입니다. Seafile은 이 사용자를 직접 다루지 못합니다. 설정 속성을 자체 데이터"
"베이스로 가져옵니다."

#: deploy/using_ldap.md:14
msgid ""
"When Seafile counts the number of users in the system, it only counts the "
"**activated** users in its internal database."
msgstr ""
"Seafile에서 시스템 사용자를 셀 때는 자체 데이터베이스의 **활성** 사용자만 셉"
"니다."

#: deploy/using_ldap.md:16
msgid ""
"When Seafile is integrated with LDAP/AD, it'll look up users from both the "
"internal database and LDAP server. As long as the user exists in one of "
"these two sources, they can log into the system."
msgstr ""
"Seafile을 LDAP/AD와 통합하면, 자체 서버와 LDAP 서버 양측에서 사용자를 찾습니"
"다. 두 곳에 사용자가 있으면 시스템에 로그인할 수 있습니다."

# header
#: deploy/using_ldap.md:18
msgid "## Basic LDAP/AD Integration"
msgstr "## 기본 LDAP/AD 통합"

#: deploy/using_ldap.md:20
msgid ""
"The only requirement for Seafile to use LDAP/AD for authentication is that "
"there must be a unique identifier for each user in the LDAP/AD server. "
"Seafile can only use email-address-format user identifiers. So there are "
"usually only two options for this unique identifier:"
msgstr ""
"Seafile에서 인증용 LDAP/AD를 사용하는데 필요한 유일한 요소는 LDAP/AD 서버에"
"서 각 사용자가 유일 식별자를 가지고 있어야 한다는 것 하나뿐입니다. Seafile에"
"서는 전자메일 주소 형식 사용자 식별자만 사용할 수 있습니다. 따라서 유일 식별"
"자 사용에 두가지 선택지가 있습니다:"

# unordered list
#: deploy/using_ldap.md:22
msgid ""
"- Email address: this is the most common choice. Most organizations assign "
"unique email address for each member."
msgstr ""
"- 전자메일 주소: 대부분 선택하는 수단입니다. 대부분의 조직에서는 각 구성원에"
"게 유일 전자메일 주소를 할당합니다."

# unordered list
#: deploy/using_ldap.md:23
msgid ""
"- UserPrincipalName: this is a user attribute only available in Active "
"Directory. It's format is `user-login-name@domain-name`, e.g. `john@example."
"com`. It's not a real email address, but it works fine as the unique "
"identifier."
msgstr ""
"- UserPrincipalName: 액티브 디렉터리에서만 사용하는 사용자 속성입니다. 형식"
"은 `user-login-name@domain-name`이며, 예를 들면 `john@example.com`과 같습니"
"다. 실제 전자메일 주소는 아니지만 유일 식별자로 잘 동작합니다."

# header
#: deploy/using_ldap.md:25
msgid "### Connecting to Active Directory"
msgstr "### 액티브 디렉터리에 연결"

#: deploy/using_ldap.md:27
msgid ""
"To use AD to authenticate user, please add the following lines to ccnet.conf."
msgstr "사용자 인증에 AD를 사용하려면, 다음 줄을 ccnet.conf에 추가하십시오."

#: deploy/using_ldap.md:29
msgid "If you choose email address as unique identifier:"
msgstr "전자메일 주소를 유일 식별자로 사용할 경우:"

#: deploy/using_ldap.md:31 deploy/using_ldap.md:40 deploy/using_ldap.md:66
msgid "    [LDAP]"
msgstr "    [LDAP]"

#: deploy/using_ldap.md:32 deploy/using_ldap.md:41 deploy/using_ldap.md:67
msgid "    HOST = ldap://192.168.1.123/"
msgstr "    HOST = ldap://192.168.1.123/"

#: deploy/using_ldap.md:33 deploy/using_ldap.md:42
msgid "    BASE = cn=users,dc=example,dc=com"
msgstr "    BASE = cn=users,dc=example,dc=com"

#: deploy/using_ldap.md:34 deploy/using_ldap.md:43
msgid "    USER_DN = administrator@example.local"
msgstr "    USER_DN = administrator@example.local"

#: deploy/using_ldap.md:35 deploy/using_ldap.md:44 deploy/using_ldap.md:70
msgid "    PASSWORD = secret"
msgstr "    PASSWORD = secret"

#: deploy/using_ldap.md:36 deploy/using_ldap.md:71
msgid "    LOGIN_ATTR = mail"
msgstr "    LOGIN_ATTR = mail"

#: deploy/using_ldap.md:38
msgid "If you choose UserPrincipalName as unique identifier:"
msgstr "유일 식별자 UserPrincipalName을 설정할 경우:"

#: deploy/using_ldap.md:45
msgid "    LOGIN_ATTR = userPrincipalName"
msgstr "    LOGIN_ATTR = userPrincipalName"

#: deploy/using_ldap.md:47
msgid "Meaning of each config options:"
msgstr "각 설정 항목의 의미는 다음과 같습니다:"

# unordered list
#: deploy/using_ldap.md:49
msgid ""
"* HOST: LDAP URL for the host. ldap://, ldaps:// and ldapi:// are supported. "
"You can also include a port number in the URL, like ldap://ldap.example."
"com:389. To use TLS, you should configure the LDAP server to listen on LDAPS "
"port and specify ldaps:// here. More details about TLS will be covered below."
msgstr ""
"* HOST: 호스트의 LDAP URL입니다. ldap:// ldaps:// ldapi://를 지원합니다. "
"ldap://ldap.example.com:389처럼 URL에 포트 번호를 넣을 수 있습니다. TLS를 사"
"용하려면 LDAP 서버에 LDAPS 포트에서 응답 대기하도록 설정하고 ldaps://를 지정"
"하십시오. TLS에 대한 자세한 내용은 아래에 다룹니다."

# unordered list
#: deploy/using_ldap.md:50
msgid ""
"* BASE: The root distinguished name (DN) to use when running queries against "
"the directory server. **You cannot use the root DN (e.g. dc=example,dc=com) "
"as BASE**."
msgstr ""
"* BASE: 디렉터리 서버에서 요청문을 실행할 때 사용할 루트 구별 이름(DN)입니"
"다. **루트 DN(e.g. dc=example,dc=com)을 BASE로 사용할 수 없습니다**."

# unordered list
#: deploy/using_ldap.md:51
msgid ""
"* USER_DN: The distinguished name of the user that Seafile will use when "
"connecting to the directory server. This user should have sufficient "
"privilege to access all the nodes under BASE. It's recommended to use a user "
"in the administrator group."
msgstr ""
"* USER_DN: 디렉터리 서버에 연결할 때 Seafile에서 사용할 사용자의 식별 이름입"
"니다. BASE 기반의 모든 노드에 접근하려면 해당 사용자는 충분한 권한을 가지고 "
"있어야합니다. 관리자 그룹의 사용자 활용을 추천합니다."

# unordered list
#: deploy/using_ldap.md:52
msgid "* PASSWORD: Password of the above user."
msgstr "* PASSWORD: 위 사용자의 암호."

# unordered list
#: deploy/using_ldap.md:53
msgid ""
"* LOGIN_ATTR: The attribute used for user's unique identifier. Use `mail` or "
"`userPrincipalName`."
msgstr ""
"* LOGIN_ATTR: 사용자 유일 식별자에 사용하는 속성입니다. `mail` 또는 "
"`userPrincipalName`을 사용하십시오."

#: deploy/using_ldap.md:55
msgid "Tips for choosing BASE and USER_DN:"
msgstr "BASE 및 USER_DN을 설정하는 요령:"

# unordered list
#: deploy/using_ldap.md:57
msgid ""
"* To determine the BASE, you first have to navigate your organization "
"hierachy on the domain controller GUI."
msgstr ""
"* BASE 값을 설정하려면, 도메인 컨트롤러 GUI에 있는 조직 계층을 우선 탐색하십"
"시오."

# unordered list
#: deploy/using_ldap.md:58
msgid ""
"    * If you want to allow all users to use Seafile, you can use 'cn=users,"
"dc=yourdomain,dc=com' as BASE (with proper adjustment for your own needs)."
msgstr ""
"    * 모든 사용자가 Seafile을 쓸 수 있게 한다면, 'cn=users,dc=yourdomain,"
"dc=com'을 BASE 값으로 활용할 수 있습니다(그리고 필요에 따라 적당히 조절하십시"
"오)."

# unordered list
#: deploy/using_ldap.md:59
msgid ""
"    * If you want to limit users to a certain OU (Organization Unit), you "
"run `dsquery` command on the domain controller to find out the DN for this "
"OU. For example, if the OU is 'staffs', you can run 'dsquery ou -name "
"staff'. More information can be found [here](https://technet.microsoft.com/"
"en-us/library/cc770509.aspx)."
msgstr ""
"    * 사용자를 일부 OU (조직 단위)로 한정하려면, 도메인 컨트롤러에서 "
"`dsquery` 명령을 실행하여 이 OU에 있는 DN을 찾으십시오. 예를 들어, OU가 "
"'staffs'면, 'dsquery ou -name staff'을 실행하시면 됩니다. 더 자세한 내용은 "
"[여기](https://technet.microsoft.com/en-us/library/cc770509.aspx)에 있습니다."

# unordered list
#: deploy/using_ldap.md:60
msgid ""
"* AD supports 'user@domain.name' format for the USER_DN option. For example "
"you can use administrator@example.com for USER_DN. Sometime the domain "
"controller doesn't recognize this format. You can still use `dsquery` "
"command to find out user's DN. For example, if the user name is "
"'seafileuser', run `dsquery user -name seafileuser`. More information [here]"
"(https://technet.microsoft.com/en-us/library/cc725702.aspx)."
msgstr ""
"* AD는 USER_DN 옵션에 'user@domain.name' 형식을 지원합니다. 예를 들어 USER_DN"
"에 administrator@example.com 값을 사용할 수 있습니다. 때로는 도메인 컨트롤러"
"에서 이 형식을 인지하지 못할 수도 있습니다. 사용자 DN을 찾을 때 `dsquery` 명"
"령을 사용할 수 있습니다. 예를 들면 `seafileuser` 이름을 가진 사용자라면 "
"`dsquery user -name seafileuser`를 실행하십시오. 더 자세한 내용은 [여기에 있"
"습니다](https://technet.microsoft.com/en-us/library/cc725702.aspx)."

# header
#: deploy/using_ldap.md:62
msgid "### Connecting to other LDAP servers"
msgstr "### 기타 LDAP 서버에 연결"

#: deploy/using_ldap.md:64
msgid "Please add the following options to ccnet.conf:"
msgstr "다음 옵션을 ccnet.conf에 추가하십시오:"

#: deploy/using_ldap.md:68
msgid "    BASE = ou=users,dc=example,dc=com"
msgstr "    BASE = ou=users,dc=example,dc=com"

#: deploy/using_ldap.md:69
msgid "    USER_DN = cn=admin,dc=example,dc=com"
msgstr "    USER_DN = cn=admin,dc=example,dc=com"

#: deploy/using_ldap.md:73
msgid ""
"The meaning of the options are the same as described in the previous "
"section. With other LDAP servers, you can only use `mail` attribute as "
"user's unique identifier."
msgstr ""
"이 설정 항목의 의미는 이전 섹션에서 설명한 바와 동일합니다. 다른 LDAP 서버에"
"서는 사용자의 유일 식별자로 `mail` 속성만을 사용할 수 있습니다."

# header
#: deploy/using_ldap.md:75
msgid "## Advanced LDAP/AD Integration Options"
msgstr "## 고급 LDAP/AD 통합 옵션"

# header
#: deploy/using_ldap.md:77
msgid "### Multiple BASE"
msgstr "### 다중 BASE"

#: deploy/using_ldap.md:79
msgid ""
"Multiple base DN is useful when your company has more than one OUs to use "
"Seafile. You can specify a list of base DN in the \"BASE\" config. The DNs "
"are separated by \";\", e.g. `ou=developers,dc=example,dc=com;ou=marketing,"
"dc=example,dc=com`"
msgstr ""
"다중 베이스 DN은 업체에서 OU를 하나 이상 두어 Seafile을 사용할 때 유용합니"
"다. \"BASE\" 설정에 베이스 DN 목록을 지정할 수 있습니다. DN은 `ou=developers,"
"dc=example,dc=com;ou=marketing,dc=example,dc=com`과 같이 \";\"으로 나눌 수 있"
"습니다."

# header
#: deploy/using_ldap.md:81
msgid "### Additional Search Filter"
msgstr "### 추가 검색 필터"

#: deploy/using_ldap.md:83
msgid ""
"Search filter is very useful when you have a large organization but only a "
"portion of people want to use Seafile. The filter can be given by setting "
"\"FILTER\" config. The value of this option follows standard LDAP search "
"filter syntax (https://msdn.microsoft.com/en-us/library/aa746475(v=vs.85)."
"aspx)."
msgstr ""
"Seafile 필터는 거대 조직에서 일부 사용자에게 Seafile을 쓸 수 있게 할 경우 매"
"우 유용합니다. \"FILTER\" 설정으로 필터 값을 지정할 수 있습니다. 이 설정 항목"
"의 값은 표준 LDAP 검색 필터 문법을 따릅니다(https://msdn.microsoft.com/en-us/"
"library/aa746475(v=vs.85).aspx)."

#: deploy/using_ldap.md:85
msgid ""
"The final filter used for searching for users is `(&($LOGIN_ATTR=*)"
"($FILTER))`. `$LOGIN_ATTR` and `$FILTER` will be replaced by your option "
"values."
msgstr ""
"사용자 검색용 최종 필터는 `(&($LOGIN_ATTR=*)($FILTER))`이며, 여기서 `"
"$LOGIN_ATTR` 및 `$FILTER` 값은 옵션 값으로 바뀝니다."

#: deploy/using_ldap.md:87
msgid "For example, add the following line to LDAP config:"
msgstr "예를 들어 LDAP 설정에 다음 줄을 추가하십시오:"

# code block
#: deploy/using_ldap.md:89
msgid ""
"```\n"
"FILTER = memberOf=CN=group,CN=developers,DC=example,DC=com\n"
"```"
msgstr ""
"```\n"
"FILTER = memberOf=CN=group,CN=developers,DC=example,DC=com\n"
"```"

#: deploy/using_ldap.md:93
msgid ""
"The final search filter would be `(&(mail=*)(memberOf=CN=group,CN=developers,"
"DC=example,DC=com))`"
msgstr ""
"최종 검색 필터는 `(&(mail=*)(memberOf=CN=group,CN=developers,DC=example,"
"DC=com))` 입니다"

#: deploy/using_ldap.md:95
msgid ""
"Note that the case of attribute names in the above example is significant. "
"The `memberOf` attribute is only available in Active Directory."
msgstr ""
"참고로 위 예제의 속성 이름 대소문자는 상당히 중요합니다. `memberOf` 속성은 액"
"티브 디렉터리에서만 사용할 수 있습니다."

# header
#: deploy/using_ldap.md:97
msgid "### Limiting Seafile Users to a Group in Active Directory"
msgstr "### Seafile 사용자를 액티브 디렉터리의 그룹으로 제한"

#: deploy/using_ldap.md:99
msgid ""
"You can use the FILTER option to limit user scope to a certain AD group."
msgstr "FILTER 옵션으로 각각의 AD 사용자 그룹 범위를 제한할 수 있습니다."

# ordered list
#: deploy/using_ldap.md:101
msgid ""
"1. First, you should find out the DN for the group. Again, we'll use the "
"`dsquery` command on the domain controller. For example, if group name is "
"'seafilegroup', run `dsquery group -name seafilegroup`."
msgstr ""
"1. 우선, 그룹 DN을 찾으십시오. 다시 말해, 도메인 컨트롤러의 `dsquery` 명령을 "
"사용합니다. 예를 들어, 그룹 이름이 `seafilegroup`이면,  `dsquery group -name "
"seafilegroup`을 실행합니다."

# ordered list
#: deploy/using_ldap.md:102
msgid "2. Add the following line to LDAP config:"
msgstr "2. 다음 줄을 LDAP 설정에 추가하십시오:"

# code block
#: deploy/using_ldap.md:104
msgid ""
"```\n"
"FILTER = memberOf={output of dsquery command}\n"
"```"
msgstr ""
"```\n"
"FILTER = memberOf={output of dsquery command}\n"
"```"

# header
#: deploy/using_ldap.md:108
msgid "### Using TLS connection to LDAP/AD server"
msgstr "### LDAP/AD 서버 연결에 TLS 사용"

#: deploy/using_ldap.md:110
msgid ""
"To use a TLS connection to the directory server, you should install a valid "
"SSL certificate on the directory server."
msgstr ""
"디렉터리 서버에 TLS 방식으로 연결하려면, 디렉터리 서버에 올바른 SSL 인증서를 "
"설치해야합니다."

#: deploy/using_ldap.md:112
msgid ""
"The current version of Seafile Linux server package is compiled on CentOS. "
"We include the ldap client library in the package to maintain compatibility "
"with older Linux distributions. But since different Linux distributions have "
"different path or configuration for OpenSSL library, sometimes Seafile is "
"unable to connect to the directory server with TLS."
msgstr ""
"Seafile 리눅스 서버 꾸러미의 현재 버전은 CentOS에서 컴파일했습니다. 이전 리눅"
"스 배포판과 호환성을 관리할 목적으로 꾸러미에 LDAP 클라이언트 라이브러리를 넣"
"었습니다. 다만 제각기 다른 리눅스 배포판은 OpenSSL 라이브러리가 제각기 다른 "
"경로 또는 설정을 지니고 있기 때문에, TLS로 디렉터리 서버에 연결할 수 없을 때"
"도 있습니다."

#: deploy/using_ldap.md:114
msgid ""
"The ldap library (libldap) bundled in the Seafile package is of version 2.4. "
"If your Linux distribution is new enough (like CentOS 6, Debian 7 or Ubuntu "
"12.04 or above), you can use system's libldap instead."
msgstr ""
"Seafile 꾸러미에 있는 LDAP 라이브러리(libldap)은 2.4 버전입니다. 리눅스 배포"
"판에 충분히 최신(CentOS7, 데비안 7, 우분투 12.04 이상)이라면, 시스템의 "
"libldap을 대신 사용해도 됩니다."

#: deploy/using_ldap.md:116
msgid ""
"On Ubuntu 14.04 and Debian 7/8, moving the bundled ldap related libraries "
"out of the library path should make TLS connection work."
msgstr ""
"우분투 14.04와 데비안 7/8 에서는, 번들 LDAP 관련 라이브러리를 라이브러리 경"
"로 밖에 옮겨두어 TLS 연결이 동작하도록 하십시오."

# code block
#: deploy/using_ldap.md:118
msgid ""
"```\n"
"cd ${SEAFILE_INSTALLATION_DIR}/seafile-server-latest/seafile/lib\n"
"mkdir disabled_libs_use_local_ones_instead\n"
"mv liblber-2.4.so.2 libldap-2.4.so.2 libsasl2.so.2 libldap_r-2.4.so.2 "
"disabled_libs_use_local_ones_instead/\n"
"```"
msgstr ""
"```\n"
"cd ${SEAFILE_INSTALLATION_DIR}/seafile-server-latest/seafile/lib\n"
"mkdir disabled_libs_use_local_ones_instead\n"
"mv liblber-2.4.so.2 libldap-2.4.so.2 libsasl2.so.2 libldap_r-2.4.so.2 "
"disabled_libs_use_local_ones_instead/\n"
"```"

#: deploy/using_ldap.md:124
msgid "On CentOS 6, you have to move the libnssutil library:"
msgstr "CentOS 6에서 libnssutil 라이브러리를 옮겨야합니다:"

# code block
#: deploy/using_ldap.md:126
msgid ""
"```\n"
"cd ${SEAFILE_INSTALLATION_DIR}/seafile-server-latest/seafile/lib\n"
"mkdir disabled_libs_use_local_ones_instead\n"
"mv libnssutil3.so disabled_libs_use_local_ones_instead/\n"
"```"
msgstr ""
"```\n"
"cd ${SEAFILE_INSTALLATION_DIR}/seafile-server-latest/seafile/lib\n"
"mkdir disabled_libs_use_local_ones_instead\n"
"mv libnssutil3.so disabled_libs_use_local_ones_instead/\n"
"```"

#: deploy/using_ldap.md:132
msgid ""
"This effectively removes the bundled libraries from the library search path. "
msgstr "이 명령으로 라이브러리 검색 경로의 번들 라이브러리를 제거합니다. "

#: deploy/using_ldap.md:133
msgid ""
"When the server starts, it'll instead find and use the system libraries (if "
"they are installed). "
msgstr ""
"서버를 시작할 때, 대신 시스템 라이브러리를(설치했다면) 찾고 활용합니다. "

#: deploy/using_ldap.md:134
msgid ""
"This change has to be repeated after each update of the Seafile installation."
msgstr ""
"This change has to be repeated after each update of the Seafile installation."

# header
#: deploy/using_logrotate.md:1
msgid "# Set up logrotate for server"
msgstr "# 서버에 logrotate 설정"

# header
#: deploy/using_logrotate.md:3
msgid "## How it works"
msgstr "## 동작 방식"

#: deploy/using_logrotate.md:5
msgid ""
"seaf-server and ccnet-server now (since version 3.1) support reopenning "
"logfile by receiving SIGUR1 signal."
msgstr ""
"seaf-server 및 ccnet-server은 이제(3.1 버전 부터) SIGUR1 시그널을 받았을 때 "
"로그 파일을 다시 여는 기능을 지원합니다."

#: deploy/using_logrotate.md:7
msgid ""
"This feature is very useful when you need cut logfile while you don't want "
"to shutdown the server programs. All you need to do now is cutting the "
"logfile on the fly."
msgstr ""
"이 기능은 서버 프로그램을 끄지 않고 로그 파일을 자르고 싶을 때 쓸만합니다. 여"
"기서 필요한 동작은 실행 중 로그 파일을 자르는 일 하나 뿐입니다."

# blockquote, which can be cascaded
#: deploy/using_logrotate.md:9
msgid ""
"> **NOTE**: signal is not supported by windows, so the feature is not "
"available in windows"
msgstr ""
"> **참고**: 시그널은 윈도우에서 지원하지 않으므로 윈도우에서 사용할 수 없습니"
"다"

# header
#: deploy/using_logrotate.md:11
msgid "## Default logrotate configuration directory"
msgstr "## 기본 logrotate 설정 디렉터리"

#: deploy/using_logrotate.md:13
msgid ""
"For debian, the default directory for logrotate should be ``/etc/logrotate.d/"
"``"
msgstr "데비안에서 logrotate 기본 디렉터리는 ``/etc/logrotate.d/``입니다"

# header
#: deploy/using_logrotate.md:15
msgid "## Sample configuration"
msgstr "## 예제 설정"

#: deploy/using_logrotate.md:17
msgid ""
"Assuming your ccnet-server's logfile is `/home/haiwen/logs/ccnet.log`, and "
"your ccnet-server's pidfile for ccnet-server is ``/home/haiwen/pids/ccnet."
"pid``."
msgstr ""
"ccnet-server의 로그 파일은 `/home/haiwen/logs/ccnet.log`, pid 파일은 ``/home/"
"haiwen/pids/ccnet.pid``라고 가정합니다."

#: deploy/using_logrotate.md:19
msgid ""
"Assuming your seaf-server's logfile is setup to ``/home/haiwen/logs/seaf-"
"server.log``, and your seaf-server's pidfile for seaf-server is setup to ``/"
"home/haiwen/pids/seaf-server.pid``:"
msgstr ""
"seaf-server의 로그 파일은 ``/home/haiwen/logs/seaf-server.log``, pid 파일은 "
"``/home/haiwen/pids/seaf-server.pid``라고 가정합니다:"

#: deploy/using_logrotate.md:21
msgid "The configuration for logroate could be like this:"
msgstr "logrotate 설정은 다음과 같을 수 있습니다:"

# code block
#: deploy/using_logrotate.md:22
msgid ""
"```\n"
"/home/haiwen/logs/seaf-server.log\n"
"{\n"
"        daily\n"
"        missingok\n"
"        rotate 52\n"
"        compress\n"
"        delaycompress\n"
"        notifempty\n"
"        sharedscripts\n"
"        postrotate\n"
"                [ ! -f /home/haiwen/pids/seaf-server.pid ] || kill -USR1 "
"`cat /home/haiwen/pids/seaf-server.pid`\n"
"        endscript\n"
"}\n"
"\n"
"/home/haiwen/logs/ccnet.log\n"
"{\n"
"        daily\n"
"        missingok\n"
"        rotate 52\n"
"        compress\n"
"        delaycompress\n"
"        notifempty\n"
"        sharedscripts\n"
"        postrotate\n"
"                [ ! -f /home/haiwen/pids/ccnet.pid ] || kill -USR1 `cat /"
"home/haiwen/pids/ccnet.pid`\n"
"        endscript\n"
"}\n"
"```"
msgstr ""
"```\n"
"/home/haiwen/logs/seaf-server.log\n"
"{\n"
"        daily\n"
"        missingok\n"
"        rotate 52\n"
"        compress\n"
"        delaycompress\n"
"        notifempty\n"
"        sharedscripts\n"
"        postrotate\n"
"                [ ! -f /home/haiwen/pids/seaf-server.pid ] || kill -USR1 "
"`cat /home/haiwen/pids/seaf-server.pid`\n"
"        endscript\n"
"}\n"
"\n"
"/home/haiwen/logs/ccnet.log\n"
"{\n"
"        daily\n"
"        missingok\n"
"        rotate 52\n"
"        compress\n"
"        delaycompress\n"
"        notifempty\n"
"        sharedscripts\n"
"        postrotate\n"
"                [ ! -f /home/haiwen/pids/ccnet.pid ] || kill -USR1 `cat /"
"home/haiwen/pids/ccnet.pid`\n"
"        endscript\n"
"}\n"
"```"

#: deploy/using_logrotate.md:52
msgid ""
"You can save this file, for example in debian, to ``/etc/logrotate.d/"
"seafile``"
msgstr "데비안의 경우, ``/etc/logrotate.d/seafile`` 파일로 저장할 수 있습니다"

# header
#: deploy/using_logrotate.md:54
msgid "## That's it"
msgstr "## 다 됐습니다"

#: deploy/using_logrotate.md:56
msgid "You now gets all the things done, just sit and enjoy your time :-D"
msgstr "이제 설정이 다 끝났으니, 앉아서 푹 쉬세요 :-D"

# header
#: deploy/using_mysql.md:1
msgid "# Deploying Seafile with MySQL"
msgstr "# Seafile과 MySQL 가동"

#: deploy/using_mysql.md:3
msgid ""
"This manual explains how to setup and run seafile server from a pre-built "
"package with MySQL."
msgstr ""
"이 설명서는 미리 빌드한 Seafile 서버 꾸러미를 MySQL과 함께 설치하고 실행하는 "
"방법을 설명합니다."

#: deploy/using_mysql.md:7
msgid ""
"[Download](http://www.seafile.com/en/download) the latest server package."
msgstr ""
"최신 서버 꾸러미를 [다운로드](http://www.seafile.com/en/download) 하십시오."

#: deploy/using_mysql.md:12
msgid ""
"Supposed your organization's name is \"haiwen\", and you've downloaded "
"`seafile-server_1.8.2_*` into your home directory. We suggest you to layout "
"your deployment as follows :"
msgstr ""
"조직 이름을 \"haiwen\"이라 하고 `seafile-server_1.8.2_*` 파일을 내 폴더에 다"
"운로드했다고 치겠습니다. 다음과 같은 구동 디렉터리 배치를 추천합니다:"

# inline html
#: deploy/using_mysql.md:25
msgid ""
"<pre>\n"
"#tree haiwen -L 2\n"
"haiwen\n"
"├── installed\n"
"│   └── seafile-server_1.8.2_x86-64.tar.gz\n"
"└── seafile-server-1.8.2\n"
"    ├── reset-admin.sh\n"
"    ├── runtime\n"
"    ├── seafile\n"
"    ├── seafile.sh\n"
"    ├── seahub\n"
"    ├── seahub.sh\n"
"    ├── setup-seafile.sh\n"
"    └── upgrade\n"
"</pre>"
msgstr ""
"<pre>\n"
"#tree haiwen -L 2\n"
"haiwen\n"
"├── installed\n"
"│   └── seafile-server_1.8.2_x86-64.tar.gz\n"
"└── seafile-server-1.8.2\n"
"    ├── reset-admin.sh\n"
"    ├── runtime\n"
"    ├── seafile\n"
"    ├── seafile.sh\n"
"    ├── seahub\n"
"    ├── seahub.sh\n"
"    ├── setup-seafile.sh\n"
"    └── upgrade\n"
"</pre>"

#: deploy/using_mysql.md:41
msgid "The benefit of this layout is that:"
msgstr "이 배치의 장점:"

# unordered list
#: deploy/using_mysql.md:44
msgid ""
"* When you upgrade to a new version of Seafile, you can simply untar the "
"latest package into \"haiwen\" directory. In this way you can reuse the "
"existing config files in \"haiwen\" directory and don't need to configure "
"again."
msgstr ""
"* 새 Seafile 버전으로 업그레이드할 때, 간단하게 \"haiwen\" 디렉터리에 최신 꾸"
"러미 압축을 해제할 수 있습니다. 이 방식으로 \"haiwen\" 디렉터리의 기존 설정 "
"파일을 다시 사용할 수 있으며, 설정을 다시 만들 필요가 없습니다."

# header
#: deploy/using_mysql.md:46
msgid "## Prepare MySQL Databases"
msgstr "## MySQL 데이터베이스 준비"

#: deploy/using_mysql.md:48
msgid "Three components of Seafile Server need their own databases:"
msgstr ""
"Seafile 서버에서는 다음 세가지 구성 요소의 자체 데이터베이스가 필요합니다:"

# unordered list
#: deploy/using_mysql.md:50
msgid "* ccnet server"
msgstr "* ccnet 서버"

# unordered list
#: deploy/using_mysql.md:51
msgid "* seafile server"
msgstr "* seafile 서버"

# unordered list
#: deploy/using_mysql.md:52
msgid "* seahub"
msgstr "* seahub"

# ordered list
#: deploy/using_mysql.md:54
msgid ""
"See [Seafile Server Components Overview](components.md) if you want to know "
"more about the seafile server components."
msgstr ""
"Seafile 서버 구성요소에 대해 더 알아보려면 [Seafile 서버 구성 요소 둘러보기]"
"(../overview/components.md)를 살펴보십시오."

#: deploy/using_mysql.md:56
msgid "There are two ways to intialize the databases:"
msgstr "데이터베이스를 초기화하는 방법에는 두가지가 있습니다:"

# unordered list
#: deploy/using_mysql.md:58
msgid ""
"- let the <code>setup-seafile-mysql.sh</code> script create the databases "
"for you."
msgstr ""
"- 데이터베이스를 만드는 <code>setup-seafile-mysql.sh</code>  스크립트를 실행"
"합니다."

# unordered list
#: deploy/using_mysql.md:59
msgid ""
"- create the databases by yourself, or someone else (the database admin, for "
"example)"
msgstr ""
"- 여러분 자신 또는 누군가(데이터베이스 관리자)가 데이터베이스를 직접 만듭니다"

#: deploy/using_mysql.md:61
msgid ""
"We recommend the first way. The script would ask you for the root password "
"of the mysql server, and it will create:"
msgstr ""
"첫번째 방법을 추천합니다. 스크립트에서는 MySQL 서버의 루트 암호를 물어본 후 "
"다음 항목을 만듭니다:"

# unordered list
#: deploy/using_mysql.md:63
msgid "* database for ccnet/seafile/seahub."
msgstr "* ccnet/seafile/seahub 데이터베이스."

# unordered list
#: deploy/using_mysql.md:64
msgid "* a new user to access these databases"
msgstr "* 데이터베이스에 접근할 새 사용자"

#: deploy/using_mysql.md:66
msgid ""
"However, sometimes you have to use the second way. If you don't have the "
"root password, you need someone who has the privileges, e.g., the database "
"admin, to create the three databases, as well as a mysql user who can access "
"the three databases for you. For example, to create three databases: `ccnet-"
"db` / `seafile-db` / `seahub-db` for ccnet/seafile/seahub respectively, and "
"a mysql user \"seafile\" to access these databases:"
msgstr ""
"하지만, 때로는 차선 책을 진행해야 할 수도 있습니다. 루트 암호를 모른다면, 데"
"이터베이스 세가지를 만들고 해당 데이터베이스에 접근할 수 있는 사용자를 만들어"
"줄 데이터베이스 관리자와 같은 권한을 가진 누군가가 필요합니다. 예를 들어 "
"ccnet/Seafile/Seahub 각각에 대해 `ccnet-db` / `seafile-db` / `seahub-db` 데이"
"터베이스와, 이 데이터베이스에 접근할 mysql 사용자 \"seafile\"을 만들려면:"

# inline html
#: deploy/using_mysql.md:68
msgid ""
"<pre>\n"
"create database `ccnet-db` character set = 'utf8';\n"
"create database `seafile-db` character set = 'utf8';\n"
"create database `seahub-db` character set = 'utf8';\n"
"\n"
"create user 'seafile'@'localhost' identified by 'seafile';\n"
"\n"
"GRANT ALL PRIVILEGES ON `ccnet-db`.* to `seafile`@localhost;\n"
"GRANT ALL PRIVILEGES ON `seafile-db`.* to `seafile`@localhost;\n"
"GRANT ALL PRIVILEGES ON `seahub-db`.* to `seafile`@localhost;\n"
"</pre>"
msgstr ""
"<pre>\n"
"create database `ccnet-db` character set = 'utf8';\n"
"create database `seafile-db` character set = 'utf8';\n"
"create database `seahub-db` character set = 'utf8';\n"
"\n"
"create user 'seafile'@'localhost' identified by 'seafile';\n"
"\n"
"GRANT ALL PRIVILEGES ON `ccnet-db`.* to `seafile`@localhost;\n"
"GRANT ALL PRIVILEGES ON `seafile-db`.* to `seafile`@localhost;\n"
"GRANT ALL PRIVILEGES ON `seahub-db`.* to `seafile`@localhost;\n"
"</pre>"

# header
#: deploy/using_mysql.md:82
msgid "### Prerequisites"
msgstr "### 선행 과정"

# unordered list
#: deploy/using_mysql.md:86
msgid "* python 2.7"
msgstr "* python 2.7"

# unordered list
#: deploy/using_mysql.md:89
msgid "* python-ldap"
msgstr "* python-ldap"

# unordered list
#: deploy/using_mysql.md:90
msgid "* python-mysqldb"
msgstr "* python-mysqldb"

# unordered list
#: deploy/using_mysql.md:91
msgid "* python-memcache (or python-memcached)"
msgstr "* python-memcache (or python-memcached)"

# inline html
#: deploy/using_mysql.md:93
msgid ""
"<pre>\n"
"# on Debian/Ubuntu\n"
"apt-get update\n"
"apt-get install python2.7 libpython2.7 python-setuptools python-imaging \\\n"
"  python-ldap python-mysqldb python-memcache\n"
"</pre>"
msgstr ""
"<pre>\n"
"# on Debian/Ubuntu\n"
"apt-get update\n"
"apt-get install python2.7 libpython2.7 python-setuptools python-imaging \\\n"
"  python-ldap python-mysqldb python-memcache\n"
"</pre>"

# inline html
#: deploy/using_mysql.md:100
msgid ""
"<pre>\n"
"# on CentOS 7\n"
"sudo yum install python-imaging MySQL-python python-memcached python-ldap\n"
"</pre>"
msgstr ""
"<pre>\n"
"# on CentOS 7\n"
"sudo yum install python-imaging MySQL-python python-memcached python-ldap\n"
"</pre>"

# header
#: deploy/using_mysql.md:105
msgid "### Setup"
msgstr "### 설정"

# inline html
#: deploy/using_mysql.md:107
msgid ""
"<pre>\n"
"cd seafile-server-*\n"
"./setup-seafile-mysql.sh  #run the setup script & answer prompted questions\n"
"</pre>"
msgstr ""
"<pre>\n"
"cd seafile-server-*\n"
"./setup-seafile-mysql.sh  #run the setup script & answer prompted questions\n"
"</pre>"

# header
#: deploy/using_mysql.md:116
msgid "** Seafile configuration options **"
msgstr "** Seafile 설정 옵션 **"

#: deploy/using_mysql.md:118 deploy/using_sqlite.md:92
msgid "| Option | Description | Note |"
msgstr "| 설정 항목 | 설명 | 참고 |"

#: deploy/using_mysql.md:119 deploy/using_mysql.md:148
#: deploy/using_mysql.md:165 deploy/using_sqlite.md:93
msgid "| -- | -- | ---- |"
msgstr "| -- | -- | ---- |"

#: deploy/using_mysql.md:120
msgid ""
"| server name | Name of this seafile server | 3-15 characters, only English "
"letters, digits and underscore ('_') are allowed |"
msgstr ""
"| 서버 이름 | Seafile 서버 이름 | 영 대소문자, 숫자, 밑줄 문자('_')만으로 이"
"루어진 3-15개 문자 허용 |"

#: deploy/using_mysql.md:121
msgid ""
"| server ip or domain | The IP address or domain name used by this server | "
"Seafile client program will access the server with this address |"
msgstr ""
"| 서버 IP 또는 도메인 | 서버에서 사용할 IP 주소 또는 도메인 이름 | Seafile 클"
"라이언트 프로그램은 이 주소로 서버에 접근합니다 |"

#: deploy/using_mysql.md:122
msgid ""
"| seafile data dir | Seafile stores your data in this directory. By default "
"it'll be placed in the current directory.  | The size of this directory will "
"increase as you put more and more data into Seafile. Please select a disk "
"partition with enough free space.  |"
msgstr ""
"| Seafile 데이터 디렉터리 | Seafile에서는 이 디렉터리에 데이터를 저장합니다. "
"기본적으로 현재 디렉터리에 둡니다.  | 이 디렉터리의 크기는 Seafile에 데이터"
"를 더 많이 두는 만큼 늘어납니다. 충분한 공간을 지닌 디스크 분할 공간을 선택하"
"십시오.  |"

#: deploy/using_mysql.md:123
msgid ""
"| fileserver port | The TCP port used by Seafile fileserver | Default is "
"8082. If it's been used by other service, you can set it to another port.  |"
msgstr ""
"| 파일 서버 포트 | Seafile 파일 서버에서 사용하는 TCP 포트 | 기본 값은 8082 "
"입니다. 다른 서비스에서 사용한다면 다른 포트로 설정할 수 있습니다.  |"

#: deploy/using_mysql.md:126
msgid ""
"At this moment, you will be asked to choose a way to initialize seafile "
"databases:"
msgstr "여기서, Seafile 데이터베이스 초기화 방식에 대한 질문을 받습니다:"

# code block
#: deploy/using_mysql.md:128
msgid ""
"```sh\n"
"-------------------------------------------------------\n"
"Please choose a way to initialize seafile databases:\n"
"-------------------------------------------------------\n"
"\n"
"[1] Create new ccnet/seafile/seahub databases\n"
"[2] Use existing ccnet/seafile/seahub databases\n"
"\n"
"```"
msgstr ""
"```sh\n"
"-------------------------------------------------------\n"
"Please choose a way to initialize seafile databases:\n"
"-------------------------------------------------------\n"
"\n"
"[1] Create new ccnet/seafile/seahub databases\n"
"[2] Use existing ccnet/seafile/seahub databases\n"
"\n"
"```"

#: deploy/using_mysql.md:139
msgid "Which one to choose depends on if you have the root password."
msgstr "루트 암호 설정 여부에 따라 다음 중 하나를 선택하십시오."

# unordered list
#: deploy/using_mysql.md:141
msgid ""
"* If you choose \"1\", you need to provide the root password. The script "
"would create the databases and a new user to access the databases"
msgstr ""
"* \"1\"을 선택하면, 루트 암호를 입력해야합니다. 스크립트는 데이터베이스 및 데"
"이터베이스 접근용 새 사용자를 만듭니다."

# unordered list
#: deploy/using_mysql.md:142
msgid ""
"* If you choose \"2\", the ccnet/seafile/seahub databases must have already "
"been created, either by you, or someone else."
msgstr ""
"* \"2\"를 선택하면, 누가 만들어두었든지간에 ccnet/seafile/seahub 데이터베이스"
"를 이미 만들어 둔 상태여야합니다."

#: deploy/using_mysql.md:144
msgid ""
"If you choose \"[1] Create new ccnet/seafile/seahub databases\", you would "
"be asked these questions:"
msgstr ""
"\"[1] Create new ccnet/seafile/seahub databases\"를 선택하면, 다음 질문을 받"
"습니다:"

#: deploy/using_mysql.md:147 deploy/using_mysql.md:164
msgid "| Question | Description | Note"
msgstr "| 질문 | 설명 | 참고"

#: deploy/using_mysql.md:149 deploy/using_mysql.md:166
msgid ""
"| mysql server host | the host address of the mysql server | the default is "
"localhost |"
msgstr ""
"| MySQL 서버 호스트 | MySQL 서버 호스트 주소 | 기본 주소 값은 localhost 입니"
"다 |"

#: deploy/using_mysql.md:150
msgid ""
"| mysql server port | the port of the mysql server | the default is 3306. "
"Almost every mysql server uses this port.  |"
msgstr ""
"| MySQL 서버 포트 | MySQL 서버 포트 | 기본값은 3306입니다. 대부분 모든 MySQL "
"서버는 이 포트를 사용합니다.  |"

#: deploy/using_mysql.md:151
msgid ""
"| root password | the password of mysql root account | the root password is "
"required to create new databases and a new user |"
msgstr ""
"| 루트 암호 | MySQL 루트 계정 암호 | 새 데이터베이스 및 새 사용자를 만들 때 "
"필요한 루트 암호 |"

#: deploy/using_mysql.md:152
msgid ""
"| mysql user for seafile | the username for seafile programs to use to "
"access MySQL server | if the user does not exist, it would be created |"
msgstr ""
"| Seafile MySQL 사용자 | Seafile 프로그램에서 MySQL 서버에 접근할 때 사용할 "
"사용자 이름 | 사용자가 없다면 만듭니다 |"

#: deploy/using_mysql.md:153 deploy/using_mysql.md:169
msgid "| password for seafile mysql user | the password for the user above | |"
msgstr "| Seafile MySQL 사용자 암호 | 위 사용자의 암호 | |"

#: deploy/using_mysql.md:154
msgid ""
"| ccnet dabase name | the name of the database used by ccnet, default is "
"\"ccnet-db\" | the database would be created if not existing |"
msgstr ""
"| ccnet 데이터베이스 이름 | ccnet에서 사용하는 데이터베이스 이름, 기본값은 "
"\"ccnet-db\" | 없으면 데이터베이스를 만듭니다 |"

#: deploy/using_mysql.md:155
msgid ""
"| seafile dabase name | the name of the database used by seafile, default is "
"\"seafile-db\" | the database would be created if not existing |"
msgstr ""
"| Seafile 데이터베이스 이름 | Seafile에서 사용하는 데이터베이스 이름, 기본값"
"은 \"seafile-db\" | 없으면 데이터베이스를 만듭니다 |"

#: deploy/using_mysql.md:156
msgid ""
"| seahub dabase name | the name of the database used by seahub, default is "
"\"seahub-db\" | the database would be created if not existing |"
msgstr ""
"| Seahub 데이터베이스 이름 | Seahub에서 사용하는 데이터베이스 이름, 기본값은 "
"\"seahub-db\" | 없으면 데이터베이스를 만듭니다 |"

#: deploy/using_mysql.md:159
msgid ""
"If you choose \"[2] Use existing ccnet/seafile/seahub databases\", you would "
"be asked these questions:"
msgstr ""
"\"[2] Use existing ccnet/seafile/seahub databases\"를 선택하면, 다음 질문을 "
"받습니다:"

#: deploy/using_mysql.md:162
msgid ""
"** related questions for \"Use existing ccnet/seafile/seahub databases\" **"
msgstr "** \"Use existing ccnet/seafile/seahub databases\" 관련 질문 **"

#: deploy/using_mysql.md:167
msgid ""
"| mysql server port | the port of the mysql server | the default is 3306. "
"Almost every mysql server uses this port |"
msgstr ""
"| MySQL 서버 포트 | MySQL 서버 포트 | 기본값은 3306입니다. 대부분 모든 MySQL "
"서버는 이 포트를 사용합니다 |"

#: deploy/using_mysql.md:168
msgid ""
"| mysql user for seafile | the user for seafile programs to use to access "
"MySQL server | the user must already exists |"
msgstr ""
"| Seafile MySQL 사용자 | Seafile 프로그램에서 MySQL 서버에 접근할 때 사용할 "
"사용자 이름 | 사용자가 이미 있어야 합니다 |"

#: deploy/using_mysql.md:170
msgid ""
"| ccnet dabase name | the name of the database used by ccnet | this database "
"must already exist |"
msgstr ""
"| ccnet 데이터베이스 이름 | ccnet에서 사용하는 데이터베이스 이름, 기본값은 "
"\"ccnet-db\" | 데이터베이스가 이미 있어야 합니다 |"

#: deploy/using_mysql.md:171
msgid ""
"| seafile dabase name | the name of the database used by seafile, default is "
"\"seafile-db\" | this database must already exist |"
msgstr ""
"| Seafile 데이터베이스 이름 | Seafile에서 사용하는 데이터베이스 이름, 기본값"
"은 \"seafile-db\" | 데이터베이스가 이미 있어야 합니다 |"

#: deploy/using_mysql.md:172
msgid ""
"| seahub dabase name | the name of the database used by seahub, default is "
"\"seahub-db\" | this database must already exist |"
msgstr ""
"| Seahub 데이터베이스 이름 | Seahub에서 사용하는 데이터베이스 이름, 기본값은 "
"\"seahub-db\" | 데이터베이스가 이미 있어야 합니다 |"

#: deploy/using_mysql.md:177
msgid "![server-setup-succesfully](../images/Server-setup-successfully.png)"
msgstr "![서버 설정 성공](../images/Server-setup-successfully.png)"

# code block
#: deploy/using_mysql.md:180
msgid ""
"```sh\n"
"#tree haiwen -L 2\n"
"haiwen\n"
"├── ccnet               # configuration files\n"
"│   ├── mykey.peer\n"
"│   ├── PeerMgr\n"
"│   └── seafile.ini\n"
"├── conf\n"
"│   └── ccnet.conf\n"
"│   └── seafile.conf\n"
"│   └── seahub_settings.py\n"
"├── installed\n"
"│   └── seafile-server_1.8.2_x86-64.tar.gz\n"
"├── seafile-data\n"
"├── seafile-server-1.8.2  # active version\n"
"│   ├── reset-admin.sh\n"
"│   ├── runtime\n"
"│   ├── seafile\n"
"│   ├── seafile.sh\n"
"│   ├── seahub\n"
"│   ├── seahub.sh\n"
"│   ├── setup-seafile.sh\n"
"│   └── upgrade\n"
"├── seafile-server-latest  # symbolic link to seafile-server-1.8.2\n"
"├── seahub-data\n"
"│   └── avatars\n"
"```"
msgstr ""
"```sh\n"
"#tree haiwen -L 2\n"
"haiwen\n"
"├── ccnet               # configuration files\n"
"│   ├── mykey.peer\n"
"│   ├── PeerMgr\n"
"│   └── seafile.ini\n"
"├── conf\n"
"│   └── ccnet.conf\n"
"│   └── seafile.conf\n"
"│   └── seahub_settings.py\n"
"├── installed\n"
"│   └── seafile-server_1.8.2_x86-64.tar.gz\n"
"├── seafile-data\n"
"├── seafile-server-1.8.2  # active version\n"
"│   ├── reset-admin.sh\n"
"│   ├── runtime\n"
"│   ├── seafile\n"
"│   ├── seafile.sh\n"
"│   ├── seahub\n"
"│   ├── seahub.sh\n"
"│   ├── setup-seafile.sh\n"
"│   └── upgrade\n"
"├── seafile-server-latest  # symbolic link to seafile-server-1.8.2\n"
"├── seahub-data\n"
"│   └── avatars\n"
"```"

# header
#: deploy/using_mysql.md:213
msgid "### Starting Seafile Server and Seahub Website"
msgstr "### Seafile 서버 및 Seahub 웹사이트 시작"

#: deploy/using_mysql.md:215
msgid "Under seafile-server-1.8.2 directory, run the following commands"
msgstr "seafile-server-1.8.2 디렉터리에서 다음 명령을 실행하십시오"

# code block
#: deploy/using_mysql.md:218
msgid ""
"```\n"
"./seafile.sh start # Start seafile service\n"
"./seahub.sh start <port>  # Start seahub website, port defaults to 8000\n"
"```"
msgstr ""
"```\n"
"./seafile.sh start # Start seafile service\n"
"./seahub.sh start <port>  # Start seahub website, port defaults to 8000\n"
"```"

#: deploy/using_mysql.md:223
msgid ""
"Note: The first time you start seahub, the script would prompt you to create "
"an admin account for your seafile server."
msgstr ""
"참고: Seahub를 처음 실행할 때 스크립트에서 Seafile 서버의 admin 계정을 만들 "
"지 여부를 물어봅니다."

#: deploy/using_mysql.md:225
msgid ""
"After starting the services, you may open a web browser and visit Seafile "
"web interface at (assume your server IP is 192.168.1.111):"
msgstr ""
"서비스를 시작한 후, 웹 브라우저를 열고 다음 주소로 Seafile 웹 인터페이스에 접"
"근하십시오(서버 IP를 192.168.1.111로 가정):"

# code block
#: deploy/using_mysql.md:227
msgid ""
"```\n"
"http://192.168.1.111:8000/\n"
"```"
msgstr ""
"```\n"
"http://192.168.1.111:8000/\n"
"```"

#: deploy/using_mysql.md:232
msgid ""
"Congratulations! Now you have successfully setup your private Seafile server."
msgstr "고생하셨습니다! 이제 개인 Seafile 서버 설정을 성공적으로 끝냈습니다."

# header
#: deploy/using_mysql.md:235
msgid "### Run Seahub on another port"
msgstr "### 다른 포트에서 Seahub 실행"

# unordered list
#: deploy/using_mysql.md:245
msgid ""
"* modify the value of `SERVICE_URL` in the file [ccnet.conf](../config/ccnet-"
"conf.md), like this: (assume your ip or domain is `192.168.1.111`)"
msgstr ""
"* [ccnet.conf](../config/ccnet-conf.md)파일의 `SERVICE_URL` 값을 다음과 같은 "
"값으로 바꾸십시오(IP 또는 도메인을 <code>192.168.1.100</code>으로 가정):"

# inline html
#: deploy/using_mysql.md:246
msgid ""
"<pre>\n"
"SERVICE_URL = http://192.168.1.111:8001\n"
"</pre>"
msgstr ""
"<pre>\n"
"SERVICE_URL = http://192.168.1.111:8001\n"
"</pre>"

#: deploy/using_mysql.md:256
msgid ""
"see [Seafile server configuration options](server_configuration.md) for more "
"details about <code>ccnet.conf</code>."
msgstr ""
"<code>ccnet.conf</code>에 대한 자세한 내용은 [Seafile 서버 설정 항목]"
"(server_configuration.md)을 참고하십시오."

# unordered list
#: deploy/using_mysql.md:278
msgid ""
"* Use `pgrep` command to check if seafile/seahub processes are still running"
msgstr ""
"* `pgrep` 명령으로 Seafile/Seahub 프로세스가 여전히 실행중인지 확인하십시오"

# unordered list
#: deploy/using_mysql.md:285
msgid "* Use `pkill` to kill the processes"
msgstr "* `pkill` 명령으로 프로세스를 강제로 끝내십시오"

# header
#: deploy/using_mysql.md:292
msgid "## Performance turning"
msgstr "## 성능 조정"

#: deploy/using_mysql.md:294
msgid ""
"If you have more than 50 users in your Seafile system, we highly recommand "
"you to [add memcached](../deploy/add_memcached.md). This will make the web "
"10x faster.  "
msgstr ""
"Seafile 시스템 사용자가 50명이 넘으면, [memcached 추가](../deploy/"
"add_memcached.md)를 추천합니다. 웹 동작 속도가 10배 빨라집니다.  "

# unordered list
#: deploy/using_mysql.md:301
msgid ""
"* [Deploy Seafile with Nginx](deploy_with_nginx.md) / [Deploy Seafile with "
"Apache](deploy_with_apache.md)"
msgstr ""
"* [Seafile과 Nginx 가동](deploy_with_nginx.md) / [Seafile과 Apache 가동]"
"(deploy_with_apache.md)"

# unordered list
#: deploy/using_mysql.md:302
msgid ""
"* [Enable Https on Seafile Web with Nginx](https_with_nginx.md) / [Enable "
"Https on Seafile Web with Apache](https_with_apache.md)"
msgstr ""
"* [Nginx에서 Seafile 웹의 https 활성화](https_with_nginx.md) / [Apache에서 "
"Seafile 웹의 https 활성화](https_with_apache.md)"

# unordered list
#: deploy/using_mysql.md:304
msgid "* [How to manage the server](../maintain/README.md)"
msgstr "* [서버 관리 방법](../maintain/README.md)"

# header
#: deploy/using_postgresql.md:2
msgid "## Using PostgreSQL"
msgstr "## PostgreSQL 사용"

#: deploy/using_postgresql.md:4
msgid ""
"**Note**: Postgres support is still in Beta status and may have some minor "
"bugs. Please use MySQL in production environment."
msgstr ""
"**참고**: Postgres 지원은 아직 베타 단계이며, 자잘한 버그가 있습니다. 실 사"
"용 환경에서는 MySQL을 사용하십시오."

# header
#: deploy/using_postgresql.md:6
msgid "## Deploy Seafile with PostgreSQL"
msgstr "## Seafile과 PostgreSQL 가동"

# header
#: deploy/using_postgresql.md:8
msgid "## Preparation"
msgstr "## 준비"

# ordered list
#: deploy/using_postgresql.md:10
msgid ""
"1. [[Download and setup seafile server]], then start seafile and seahub and "
"make sure everything is OK."
msgstr ""
"1. [[Seafile 서버를 다운로드하고 설치]]한 후, seafile 및 seahub를 시작하시고 "
"모든 기능이 동작하는지 확인하십시오."

# ordered list
#: deploy/using_postgresql.md:12
msgid "2. Setup PostgreSQL."
msgstr "2. PostgreSQL을 설정하십시오."

#: deploy/using_postgresql.md:14
msgid "        sudo apt-get install postgresql"
msgstr "        sudo apt-get install postgresql"

# ordered list
#: deploy/using_postgresql.md:16
msgid ""
"3. Create seafile postgres user and required databases. (Obviously you "
"should use a more secure password than seafile)"
msgstr ""
"3. Seafile의 postgres 사용자와 필요한 데이터베이스를 만드십시오(분명히 "
"Seafile에서 사용하는 암호보다 더 안전한 암호를 설정해야합니다)."

#: deploy/using_postgresql.md:18
msgid ""
"        sudo -u postgres psql -U postgres -d postgres -c \"CREATE USER "
"seafile WITH PASSWORD 'seafile' CREATEDB;\""
msgstr ""
"        sudo -u postgres psql -U postgres -d postgres -c \"CREATE USER "
"seafile WITH PASSWORD 'seafile' CREATEDB;\""

#: deploy/using_postgresql.md:19
msgid "        createdb ccnet_db -U seafile -W -h localhost"
msgstr "        createdb ccnet_db -U seafile -W -h localhost"

#: deploy/using_postgresql.md:20
msgid "        createdb seafile_db -U seafile -W -h localhost"
msgstr "        createdb seafile_db -U seafile -W -h localhost"

#: deploy/using_postgresql.md:21
msgid "        createdb seahub_db -U seafile -W -h localhost"
msgstr "        createdb seahub_db -U seafile -W -h localhost"

# ordered list
#: deploy/using_postgresql.md:23
msgid ""
"3. Create 3 databases named `ccnet_db`, `seafile_db`, `seahub_db`. e.g., "
"``create database ccnet_db encoding 'utf8';``"
msgstr ""
"3. ``create database ccnet_db encoding 'utf8';`` 같은 질의 명령으로  "
"`ccnet_db`, `seafile_db`, `seahub_db` 데이터베이스 3개를 만드십시오"

# header
#: deploy/using_postgresql.md:25
msgid "## Steps"
msgstr "## 단계"

# ordered list
#: deploy/using_postgresql.md:27
msgid ""
"1. Shutdown services by `./seahub.sh stop` and `./seafile.sh stop`. Then, "
"append the following PostgreSQL configurations to 3 config files (you may "
"need to change to fit your configuration)."
msgstr ""
"1. `./seahub.sh stop` 및 `./seafile.sh stop` 명령으로 서비스를 끄십시오. 다"
"음 PostgreSQL 설정을 세가지 설정 파일에 추가하십시오(기존의 설정에 맞게 설정 "
"내용을 바꿔야할 수도 있습니다)."

#: deploy/using_postgresql.md:29
msgid "    Append following lines to [ccnet.conf](../config/ccnet-conf.md):"
msgstr "    다음 줄을 [ccnet.conf](../config/ccnet-conf.md)에 추가하십시오:"

#: deploy/using_postgresql.md:32
msgid "        ENGINE=pgsql"
msgstr "        ENGINE=pgsql"

#: deploy/using_postgresql.md:33
msgid "        HOST=localhost"
msgstr "        HOST=localhost"

#: deploy/using_postgresql.md:34
msgid "        USER=seafile"
msgstr "        USER=seafile"

#: deploy/using_postgresql.md:35
msgid "        PASSWD=seafile"
msgstr "        PASSWD=seafile"

#: deploy/using_postgresql.md:36
msgid "        DB=ccnet_db"
msgstr "        DB=ccnet_db"

#: deploy/using_postgresql.md:38
msgid ""
"    Replace the database section in [seafile.conf](../config/seafile-conf."
"md) with following lines:"
msgstr ""
"    [seafile.conf](../config/seafile-conf.md)의 데이터베이스 섹션 설정 값을 "
"다음 줄로 바꾸십시오:"

#: deploy/using_postgresql.md:41
msgid "        type=pgsql"
msgstr "        type=pgsql"

#: deploy/using_postgresql.md:42
msgid "        host=localhost"
msgstr "        host=localhost"

#: deploy/using_postgresql.md:43
msgid "        user=seafile"
msgstr "        user=seafile"

#: deploy/using_postgresql.md:44
msgid "        password=seafile"
msgstr "        password=seafile"

#: deploy/using_postgresql.md:45
msgid "        db_name=seafile_db"
msgstr "        db_name=seafile_db"

#: deploy/using_postgresql.md:51
msgid "                'ENGINE': 'django.db.backends.postgresql_psycopg2',"
msgstr "                'ENGINE': 'django.db.backends.postgresql_psycopg2',"

#: deploy/using_postgresql.md:52
msgid "                'NAME' : 'seahub_db',"
msgstr "                'NAME' : 'seahub_db',"

#: deploy/using_postgresql.md:53
msgid "                'USER' : 'seafile',"
msgstr "                'USER' : 'seafile',"

#: deploy/using_postgresql.md:54
msgid "                'PASSWORD' : 'seafile',"
msgstr "                'PASSWORD' : 'seafile',"

#: deploy/using_postgresql.md:55
msgid "                'HOST' : 'localhost',"
msgstr "                'HOST' : 'localhost',"

# ordered list
#: deploy/using_postgresql.md:59
msgid ""
"2. Start seafile by `./seafile.sh start`. There will be several tables "
"created in `ccnet_db` and `seafile_db` if your configuration is correct."
msgstr ""
"2. `./seafile.sh start` 명령으로 Seafile을 시작하십시오. 올바르게 설정했다면 "
"`ccnet_db` 및 `seafile_db` 데이터베이스에 여러가지 테이블을 만듭니다."

# ordered list
#: deploy/using_postgresql.md:61
msgid "3. Install python-psycopg2 (package name on ubuntu):"
msgstr "3. python-psycopg2(우분투 꾸러미 이름)를 설치하십시오 :"

#: deploy/using_postgresql.md:63
msgid "        [sudo] apt-get build-dep python-psycopg2"
msgstr "        [sudo] apt-get build-dep python-psycopg2"

#: deploy/using_postgresql.md:65
msgid "        [sudo] pip install psycopg2"
msgstr "        [sudo] pip install psycopg2"

# ordered list
#: deploy/using_postgresql.md:67
msgid ""
"4. Start seahub as follows (assume current path is `/data/haiwen/seafile-"
"server-1.7.0`:"
msgstr ""
"4. 다음 명령으로 Seahub를 시작하십시오(현재 경로를 `/data/haiwen/seafile-"
"server-1.7.0`으로 가정):"

#: deploy/using_postgresql.md:69
msgid "        export CCNET_CONF_DIR=/data/haiwen/ccnet"
msgstr "        export CCNET_CONF_DIR=/data/haiwen/ccnet"

#: deploy/using_postgresql.md:70
msgid "        export SEAFILE_CONF_DIR=/data/haiwen/seafile-data"
msgstr "        export SEAFILE_CONF_DIR=/data/haiwen/seafile-data"

#: deploy/using_postgresql.md:71
msgid "        INSTALLPATH=/data/haiwen/seafile-server-1.7.0"
msgstr "        INSTALLPATH=/data/haiwen/seafile-server-1.7.0"

#: deploy/using_postgresql.md:72
msgid ""
"        export PYTHONPATH=${INSTALLPATH}/seafile/lib/python2.6/site-packages:"
"${INSTALLPATH}/seafile/lib64/python2.6/site-packages:${INSTALLPATH}/seahub/"
"thirdpart:$PYTHONPATH"
msgstr ""
"        export PYTHONPATH=${INSTALLPATH}/seafile/lib/python2.6/site-packages:"
"${INSTALLPATH}/seafile/lib64/python2.6/site-packages:${INSTALLPATH}/seahub/"
"thirdpart:$PYTHONPATH"

#: deploy/using_postgresql.md:73
msgid "        cd seahub"
msgstr "        cd seahub"

#: deploy/using_postgresql.md:74
msgid "        python manage.py syncdb"
msgstr "        python manage.py syncdb"

#: deploy/using_postgresql.md:76
msgid ""
"    There will be several tables created in `seahub_db`. Then start seahub "
"by `./seahub.sh start`."
msgstr ""
"    `seahub_db`에 몇가지 테이블을 만듭니다. 과정이 끝나면 `./seahub.sh "
"start` 명령으로 Seahub를 시작하십시오."

# header
#: deploy/using_postgresql.md:78
msgid "## Create Seahub Admin"
msgstr "## Seahub 관리자 계정 만들기"

#: deploy/using_postgresql.md:80
msgid ""
"Assume current path is `/data/haiwen/seafile-server-1.7.0`, and you have "
"exported all the variables above,"
msgstr ""
"현재 경로는 `/data/haiwen/seafile-server-1.7.0`이고, 위에 언급한 모든 변수값"
"을 내보냈다고 가정하겠습니다."

#: deploy/using_postgresql.md:82
msgid "    cd seahub"
msgstr "    cd seahub"

#: deploy/using_postgresql.md:83
msgid "    python manage.py createsuperuser"
msgstr "    python manage.py createsuperuser"

#: deploy/using_postgresql.md:85
msgid "This command tool will guide you to create a seahub admin."
msgstr "이 명령 도구는 Seahub admin 계정을 만드는 절차를 안내합니다."

# header
#: deploy/using_sqlite.md:1
msgid "# Deploying Seafile with SQLite"
msgstr "# Seafile과 SQLite 가동"

# header
#: deploy/using_sqlite.md:3
msgid "## Download binary package"
msgstr "## 바이너리 꾸러미 다운로드"

#: deploy/using_sqlite.md:5
msgid ""
"Visit our [download page](http://www.seafile.com/en/download/#server),  "
"download the latest server package."
msgstr ""
"[다운로드 페이지](http://seafile.com/en/download/#server)를 방문하여 최신 서"
"버 꾸러미를 다운로드하십시오."

#: deploy/using_sqlite.md:7
msgid "Choose one of:"
msgstr "다음 중 하나를 선택하십시오:"

# unordered list
#: deploy/using_sqlite.md:10
msgid "- Server for Raspberry Pi"
msgstr "- 라즈베리 파이용 서버"

# code block
#: deploy/using_sqlite.md:12
msgid ""
"```\n"
"#check if your system is x86 (32bit) or x86_64 (64 bit)\n"
"uname -m\n"
"```"
msgstr ""
"```\n"
"#check if your system is x86 (32bit) or x86_64 (64 bit)\n"
"uname -m\n"
"```"

#: deploy/using_sqlite.md:16
msgid "Click the tarball link and save it."
msgstr "타르볼 링크를 누른 후 저장하십시오."

#: deploy/using_sqlite.md:21
msgid ""
"NOTE: If you place the Seafile data directory in external storage, such as "
"NFS, CIFS mount, you should not use SQLite as the database, but use MySQL "
"instead."
msgstr ""
"참고: Seafile 데이터 디렉터리를 NFS, CIFS 마운트 저장소 같은 외장 저장소에 "
"둘 때, SQLite 대신 MySQL 데이터베이스를 사용하십시오."

#: deploy/using_sqlite.md:23
msgid ""
"Supposed your organization's name is \"haiwen\", and you've downloaded "
"seafile-server_1.4.0_* into your home directory. We suggest you to use the "
"following layout for your deployment:"
msgstr ""
"조직 이름을 \"haiwen\"이라 하고, seafile-server_1.4.0_*을 내 폴더에 다운로드"
"했음을 가정하겠습니다. 가동 구성을 다음과 같이 제안합니다:"

# code block
#: deploy/using_sqlite.md:24
msgid ""
"```sh\n"
"mkdir haiwen\n"
"mv seafile-server_* haiwen\n"
"cd haiwen\n"
"# after moving seafile-server_* to this directory\n"
"tar -xzf seafile-server_*\n"
"mkdir installed\n"
"mv seafile-server_* installed\n"
"```"
msgstr ""
"```sh\n"
"mkdir haiwen\n"
"mv seafile-server_* haiwen\n"
"cd haiwen\n"
"# after moving seafile-server_* to this directory\n"
"tar -xzf seafile-server_*\n"
"mkdir installed\n"
"mv seafile-server_* installed\n"
"```"

# code block
#: deploy/using_sqlite.md:35
msgid ""
"```sh\n"
"# tree . -L 2\n"
".\n"
"├── installed\n"
"│   └── seafile-server_1.4.0_x86-64.tar.gz\n"
"└── seafile-server-1.4.0\n"
"    ├── reset-admin.sh\n"
"    ├── runtime\n"
"    ├── seafile\n"
"    ├── seafile.sh\n"
"    ├── seahub\n"
"    ├── seahub.sh\n"
"    ├── setup-seafile.sh\n"
"    └── upgrade\n"
"```"
msgstr ""
"```sh\n"
"# tree . -L 2\n"
".\n"
"├── installed\n"
"│   └── seafile-server_1.4.0_x86-64.tar.gz\n"
"└── seafile-server-1.4.0\n"
"    ├── reset-admin.sh\n"
"    ├── runtime\n"
"    ├── seafile\n"
"    ├── seafile.sh\n"
"    ├── seahub\n"
"    ├── seahub.sh\n"
"    ├── setup-seafile.sh\n"
"    └── upgrade\n"
"```"

#: deploy/using_sqlite.md:51
msgid "Benefits of this layout are"
msgstr "이 디렉터리 배치를 통해 취할 수 있는 이익은"

# unordered list
#: deploy/using_sqlite.md:53
msgid ""
" - We can place all the config files for Seafile server inside \"haiwen\" "
"directory, making it easier to manage."
msgstr ""
" - \"haiwen\" 디렉터리에 Seafile 서버용 설정 파일을 둘 수 있으며, 관리하기 쉽"
"습니다."

# unordered list
#: deploy/using_sqlite.md:54
msgid ""
" - When you upgrade to a new version of Seafile, you can simply untar the "
"latest package into \"haiwen\" directory. In this way you can reuse the "
"existing config files in \"haiwen\" directory and don't need to configure "
"again."
msgstr ""
" - Seafile을 새 버전을 업그레이드 할 때 \"haiwen\" 디렉터리의 최신 꾸러미 압"
"축을 해제하기만 하면 됩니다. 이 방식으로 \"haiwen\" 디렉터리의 기존 설정 파일"
"을 다시 사용할 수 있으며 다시 설정할 필요가 없습니다."

# unordered list
#: deploy/using_sqlite.md:62
msgid "- python 2.7"
msgstr "- python 2.7"

# unordered list
#: deploy/using_sqlite.md:63
msgid "- python-setuptools"
msgstr "- python-setuptools"

# unordered list
#: deploy/using_sqlite.md:64
msgid "- python-imaging"
msgstr "- python-imaging"

# unordered list
#: deploy/using_sqlite.md:65
msgid "- python-ldap"
msgstr "- python-ldap"

# unordered list
#: deploy/using_sqlite.md:66
msgid "- sqlite3"
msgstr "- sqlite3"

# code block
#: deploy/using_sqlite.md:68
msgid ""
"```\n"
"#on Debian\n"
"apt-get update\n"
"apt-get install python2.7 libpython2.7 python-setuptools python-imaging "
"python-ldap sqlite3\n"
"```"
msgstr ""
"```\n"
"#on Debian\n"
"apt-get update\n"
"apt-get install python2.7 libpython2.7 python-setuptools python-imaging "
"python-ldap sqlite3\n"
"```"

# code block
#: deploy/using_sqlite.md:74
msgid ""
"```\n"
"# on CentOS 7\n"
"sudo yum install python-imaging MySQL-python python-memcached python-ldap\n"
"```"
msgstr ""
"```\n"
"# on CentOS 7\n"
"sudo yum install python-imaging MySQL-python python-memcached python-ldap\n"
"```"

# code block
#: deploy/using_sqlite.md:81
msgid ""
"```sh\n"
"cd seafile-server-*\n"
"./setup-seafile.sh  #run the setup script & answer prompted questions\n"
"```"
msgstr ""
"```sh\n"
"cd seafile-server-*\n"
"./setup-seafile.sh  #run the setup script & answer prompted questions\n"
"```"

#: deploy/using_sqlite.md:86
msgid ""
"If some of the prerequisites are not installed, the Seafile initialization "
"script will ask you to install them."
msgstr ""
"이전 준비 요소를 설치하지 않았다면 Seafile 초기화 스크립트에서 설치하라고 요"
"구합니다."

#: deploy/using_sqlite.md:90
msgid "**Seafile configuration options**"
msgstr "**Seafile 설정 항목**"

#: deploy/using_sqlite.md:94
msgid ""
"| server name | Name of this Seafile server | 3-15 characters, only English "
"letters, digits and underscore ('_') are allowed |"
msgstr ""
"| 서버 이름 | Seafile 서버 이름 | 3-15 문자, 영문자, 숫자, 밑줄 문자('_')만 "
"허용 |"

#: deploy/using_sqlite.md:95
msgid ""
"| server ip or domain  | The IP address or domain name used by this server  "
"| Seafile client program will access the server with this address |"
msgstr ""
"| 서버 IP 또는 도메인  | 서버에서 사용하는 IP 주소 또는 도메인 이름  | "
"Seafile 클라이언트 프로그램에서 이 주소로 서버에 접근합니다 |"

#: deploy/using_sqlite.md:96
msgid ""
"| Seafile data dir  | Seafile stores your data in this directory. By default "
"it'll be placed in the current directory.  | The size of this directory will "
"increase as you put more and more data into Seafile. Please select a disk "
"partition with enough free space. |"
msgstr ""
"| Seafile 데이터 디렉터리  | Seafile에서는 이 디렉터리에 데이터를 저장합니"
"다. 기본적으로 현재 디렉터리에 둡니다.  | 이 디렉터리 크기는 Seafile에 데이터"
"를 넣는 만큼 늘어납니다. 충분한 용량을 갖는 디스크 분할 영역을 선택하십시오. "
"|"

#: deploy/using_sqlite.md:97
msgid ""
"| fileserver port | The TCP port used by Seafile fileserver  | Default is "
"8082. If it's been used by other service, you can set it to another port. |"
msgstr ""
"| fileserver 포트 | Seafile 파일 서버에서 사용하는 TCP 포트입니다  | 기본값"
"은 8082 입니다. 다른 서비스에서 이미 사용중이라면 다른 포트 번호로 설정할 수 "
"있습니다. |"

#: deploy/using_sqlite.md:100
msgid "Now you should have the following directory layout:"
msgstr "다음 디렉터리 구성을 갖춥니다:"

# code block
#: deploy/using_sqlite.md:102
msgid ""
"```sh\n"
"#tree haiwen -L 2\n"
"haiwen\n"
"├── ccnet               # configuration files\n"
"│   ├── mykey.peer\n"
"│   ├── PeerMgr\n"
"│   └── seafile.ini\n"
"├── conf\n"
"│   └── ccnet.conf\n"
"│   └── seafile.conf\n"
"│   └── seahub_settings.py\n"
"├── installed\n"
"│   └── seafile-server_1.4.0_x86-64.tar.gz\n"
"├── seafile-data\n"
"├── seafile-server-1.4.0  # active version\n"
"│   ├── reset-admin.sh\n"
"│   ├── runtime\n"
"│   ├── seafile\n"
"│   ├── seafile.sh\n"
"│   ├── seahub\n"
"│   ├── seahub.sh\n"
"│   ├── setup-seafile.sh\n"
"│   └── upgrade\n"
"├── seafile-server-latest  # symbolic link to seafile-server-1.4.0\n"
"├── seahub-data\n"
"│   └── avatars\n"
"├── seahub.db\n"
"```"
msgstr ""
"```sh\n"
"#tree haiwen -L 2\n"
"haiwen\n"
"├── ccnet               # configuration files\n"
"│   ├── mykey.peer\n"
"│   ├── PeerMgr\n"
"│   └── seafile.ini\n"
"├── conf\n"
"│   └── ccnet.conf\n"
"│   └── seafile.conf\n"
"│   └── seahub_settings.py\n"
"├── installed\n"
"│   └── seafile-server_1.4.0_x86-64.tar.gz\n"
"├── seafile-data\n"
"├── seafile-server-1.4.0  # active version\n"
"│   ├── reset-admin.sh\n"
"│   ├── runtime\n"
"│   ├── seafile\n"
"│   ├── seafile.sh\n"
"│   ├── seahub\n"
"│   ├── seahub.sh\n"
"│   ├── setup-seafile.sh\n"
"│   └── upgrade\n"
"├── seafile-server-latest  # symbolic link to seafile-server-1.4.0\n"
"├── seahub-data\n"
"│   └── avatars\n"
"├── seahub.db\n"
"```"

#: deploy/using_sqlite.md:131
msgid ""
"The folder seafile-server-latest is a symbolic link to the current Seafile "
"server folder. When later you upgrade to a new version, the upgrade scripts "
"would update this link to keep it always point to the latest Seafile server "
"folder."
msgstr ""
"seafile-server-latest 폴더는 현재 Seafile 서버 폴더의 심볼릭 링크입니다. 나중"
"에 새 버전으로 업그레이드하면, 업그레이드 스크립트에서 이 링크를 업데이트하"
"여 최신 Seafile 서버 폴더를 항상 가리키도록합니다."

#: deploy/using_sqlite.md:137
msgid ""
"Since Seafile uses persistent connections between client and server, you "
"should increase Linux file descriptors by ulimit if you have a large number "
"of clients before start Seafile, like:"
msgstr ""
"Seafile은 클라이언트-서버간 연결을 유지하므로 Seafile을 시작하기 전에 많은 수"
"의 클라이언트를 보유하고 있다면, 다음과 같이 ulimit로 리눅스 파일 서술자 갯수"
"를 늘려야합니다:"

#: deploy/using_sqlite.md:139
msgid "``ulimit -n 30000``"
msgstr "``ulimit -n 30000``"

# unordered list
#: deploy/using_sqlite.md:143
msgid "- Start Seafile:"
msgstr "- Seafile을 시작하십시오:"

# code block
#: deploy/using_sqlite.md:144
msgid ""
"```\n"
"./seafile.sh start # Start Seafile service\n"
"```"
msgstr ""
"```\n"
"./seafile.sh start # Start Seafile service\n"
"```"

# unordered list
#: deploy/using_sqlite.md:148
msgid "- Start Seahub:"
msgstr "- Seahub를 시작하십시오:"

# code block
#: deploy/using_sqlite.md:149
msgid ""
"```\n"
"./seahub.sh start <port>  # Start Seahub website, port defaults to 8000\n"
"```"
msgstr ""
"```\n"
"./seahub.sh start <port>  # Start Seahub website, port defaults to 8000\n"
"```"

#: deploy/using_sqlite.md:153
msgid ""
"**Note**: The first time you start Seahub, the script is going to prompt you "
"to create an admin account for your Seafile server."
msgstr ""
"**참고**: Seahub를 처음 시작할 때, 스크립트는 Seafile 서버에 admin 계정을 만"
"들지 물어봅니다."

#: deploy/using_sqlite.md:155
msgid "After starting the services, you may open a web browser and type in"
msgstr "서비스를 시작한 후 웹 브라우저에서 다음 주소를 입력하여 여십시오"

#: deploy/using_sqlite.md:157
msgid "``http://192.168.1.111:8000``"
msgstr "``http://192.168.1.111:8000``"

#: deploy/using_sqlite.md:159
msgid ""
"you will be redirected to the Login page. Just enter the admin username and "
"password."
msgstr ""
"이제 로그인 페이지로 돌아갑니다. admin 사용자 이름 및 암호를 입력하십시오."

#: deploy/using_sqlite.md:161
msgid ""
"**Congratulations!** Now you have successfully setup your private Seafile "
"server."
msgstr ""
"**고생하셨습니다!** 이제 개인 Seafile 서버 설정을 성공적으로 끝냈습니다."

#: deploy/using_sqlite.md:165
msgid ""
"If you want to run Seahub on a port other than the default 8000, say 8001, "
"you must:"
msgstr ""
"기본 8000번 포트가 아닌, 8001번 포트에서 Seahub를 실행하려면, 다음 과정을 진"
"행해야합니다:"

# unordered list
#: deploy/using_sqlite.md:167
msgid "- stop the Seafile server"
msgstr "- Seafile 서버를 멈추십시오"

# code block
#: deploy/using_sqlite.md:168
msgid ""
"```\n"
"./seahub.sh stop\n"
"./seafile.sh stop\n"
"```"
msgstr ""
"```\n"
"./seahub.sh stop\n"
"./seafile.sh stop\n"
"```"

# unordered list
#: deploy/using_sqlite.md:173
msgid ""
"- modify the value of SERVICE_URL in the file [ccnet.conf](../config/ccnet-"
"conf.md), like this: (assume your ip or domain is 192.168.1.100). For "
"Seafile version 5.0+, you can modify SERVICE_URL via web UI in \"System "
"Admin->Settings\""
msgstr ""
"- [ccnet.conf](../config/ccnet-conf.md) 파일의 SERVICE_URL 값을 다음과 같이 "
"바꾸십시오: (IP 또는 도메인이 192.168.1.100임을 가정). 5.0 이상 버전에서는, "
"웹 UI의 \"시스템 관리자->설정\"에서 SERVICE_URL 값을 바꿀 수 있습니다."

# code block
#: deploy/using_sqlite.md:174
msgid ""
"```\n"
"SERVICE_URL = http://192.168.1.100:8001\n"
"```"
msgstr ""
"```\n"
"SERVICE_URL = http://192.168.1.100:8001\n"
"```"

# unordered list
#: deploy/using_sqlite.md:178
msgid "- restart Seafile server"
msgstr "- Seafile 서버를 다시 시작하십시오"

# code block
#: deploy/using_sqlite.md:179
msgid ""
"```\n"
"./seafile.sh start\n"
"./seahub.sh start 8001\n"
"```"
msgstr ""
"```\n"
"./seafile.sh start\n"
"./seahub.sh start 8001\n"
"```"

#: deploy/using_sqlite.md:184
msgid ""
"See Seafile [Server Configuration Manual](deploy/server_configuration.md) "
"for more details about ``ccnet.conf``."
msgstr ""
" ``ccnet.conf``에 대해 자세한 내용을 알아보려면 Seafile [서버 설정 설명서]"
"(deploy/server_configuration.md)를 살펴보십시오."

# header
#: deploy/using_sqlite.md:186
msgid "## Manage Seafile and Seahub"
msgstr "## Seafile, Seahub 관리"

# code block
#: deploy/using_sqlite.md:188
msgid ""
"```\n"
"./seahub.sh stop # stop seahub website\n"
"./seafile.sh stop # stop seafile processes\n"
"```"
msgstr ""
"```\n"
"./seahub.sh stop # stop seahub website\n"
"./seafile.sh stop # stop seafile processes\n"
"```"

# code block
#: deploy/using_sqlite.md:193
msgid ""
"```\n"
"./seafile.sh restart\n"
"./seahub.sh restart\n"
"```"
msgstr ""
"```\n"
"./seafile.sh restart\n"
"./seahub.sh restart\n"
"```"

#: deploy/using_sqlite.md:199
msgid ""
"Most of the time, `seafile.sh` and `seahub.sh` work fine. But if they fail, "
"you might want to"
msgstr ""
"대부분의 경우, `seafile.sh`와 `seahub.sh`는 제대로 동작합니다. 다만, 동작이 "
"실패할경우 다음과 같은 조치를 취할 수 있습니다"

# unordered list
#: deploy/using_sqlite.md:201
msgid ""
"- Use pgrep command to check if Seafile/Seahub processes are still running"
msgstr ""
"- pgrep 명령으로 Seafile/Seahub 프로세스가 여전히 동작 중인지 확인하십시오"

# code block
#: deploy/using_sqlite.md:202
msgid ""
"```\n"
"pgrep -f seafile-controller # check Seafile processes\n"
"pgrep -f \"manage.py run_gunicorn\" # check Seahub process\n"
"```"
msgstr ""
"```\n"
"pgrep -f seafile-controller # check Seafile processes\n"
"pgrep -f \"manage.py run_gunicorn\" # check Seahub process\n"
"```"

# unordered list
#: deploy/using_sqlite.md:207
msgid "- Use pkill to kill the processes"
msgstr "- pkill 명령으로 해당 프로세스를 강제로 끝내십시오"

# code block
#: deploy/using_sqlite.md:208
msgid ""
"```\n"
"pkill -f seafile-controller\n"
"pkill -f \"manage.py run_gunicorn\"\n"
"```"
msgstr ""
"```\n"
"pkill -f seafile-controller\n"
"pkill -f \"manage.py run_gunicorn\"\n"
"```"

#: deploy/using_sqlite.md:214
msgid ""
"For a production server we highly recommend to setup with Nginx/Apache and "
"enable SSL/TLS."
msgstr "실 사용 서버에서는 Nginx/Apache 및 SSL/TLS 설정을 추천합니다."

#: deploy/using_sqlite.md:216
msgid "That's it! Now you might want read more about Seafile."
msgstr "다 됐습니다! 이제 Seafile에 대한 내용을 더 읽어 볼 차례입니다."

# unordered list
#: deploy/using_sqlite.md:217
msgid "- [Administration](../maintain/README.md)"
msgstr "- [관리](../maintain/README.md)"

# code block
#, fuzzy
#~ msgid ""
#~ "Change in in httpd.conf or apache2.conf from \"FastCGIExternalServer /var/"
#~ "www/seahub.fcgi -host 127.0.0.1:8000\""
#~ msgstr ""
#~ "```apache\n"
#~ "    FastCGIExternalServer /var/www/seahub.fcgi -host 127.0.0.1:8000\n"
#~ "```"

# code block
#, fuzzy
#~ msgid ""
#~ "to \"FastCGIExternalServer /var/www/seahub.fcgi -host 127.0.0.1:8000 -"
#~ "idle-timeout 60\""
#~ msgstr ""
#~ "```apache\n"
#~ "    FastCGIExternalServer /var/www/seahub.fcgi -host 127.0.0.1:8000\n"
#~ "```"

#, fuzzy
#~ msgid "| Question | Description | Note |"
#~ msgstr "| 질문 | 설명 | 참고"
