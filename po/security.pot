# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: seafile-docs\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2016-05-05 03:40:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: security/README.md:1
# header
msgid "# Security and auditing"
msgstr ""

#: security/README.md:3
# header
msgid "## Security features "
msgstr ""

#: security/README.md:5
# unordered list
msgid "* [Security features](security_features.md)"
msgstr ""

#: security/README.md:7
# header
msgid "## Access log and auditing"
msgstr ""

#: security/README.md:9
# unordered list
msgid "* [Access log and auditing](auditing.md)"
msgstr ""

#: security/auditing.md:1
# header
msgid "# Access log and auditing"
msgstr ""

#: security/auditing.md:3
msgid "In pro edition, Seafile offers four auditing logs in system admin panel:"
msgstr ""

#: security/auditing.md:5
# unordered list
msgid "* Login log"
msgstr ""

#: security/auditing.md:6
# unordered list
msgid "* File access log"
msgstr ""

#: security/auditing.md:7
# unordered list
msgid "* File update log"
msgstr ""

#: security/auditing.md:8
# unordered list
msgid "* Permission change log"
msgstr ""

#: security/auditing.md:10
msgid "![Seafile Auditing Log](../images/admin-audit-log.png)"
msgstr ""

#: security/auditing.md:12
msgid "The logging feature is turned off by default. See [config options for pro edition](../deploy_pro/configurable_options.md) for how to turn it on."
msgstr ""

#: security/security_features.md:1
# header
msgid "# Security Questions"
msgstr ""

#: security/security_features.md:3
# header
msgid "## How is the connection between client and server encrypted?"
msgstr ""

#: security/security_features.md:5
msgid "Before version 4.0, Seafile only supports syncing via a self-designed protocol. Every seafile desktop client has a unique private key. When a client and a server connect, they will exchange public key and negotiate a session key. The session key is derived from cryptographically secure random number with PDKDF2 algorithm. And it's exchanged between the client and the server with RSA encryption. This session key will be used to encrypt the data transfer with AES-256/CBC algorithm. "
msgstr ""

#: security/security_features.md:7
msgid "From version 4.0, Seafile supports syncing via HTTP(S) protocol, which is a more standard approach."
msgstr ""

#: security/security_features.md:9
msgid "From version 4.1, Seafile uses HTTP(S) syncing protocol by default."
msgstr ""

#: security/security_features.md:11
# header
msgid "## Encrypted Library"
msgstr ""

#: security/security_features.md:13
msgid "Seafile provides a feature called encrypted library to protect your privacy. The file encryption/decryption is performed in the client-side when using the desktop client for file syncing. The password of an encrypted library is not stored in the server. **Even the system admin of the server can't view the file contents - they can however view the metadata [which are currently not encrypted](https://github.com/haiwen/seafile/issues/350).** The metadata includes: the complete list of directory and file names, every file size, the history of who changed each file, when, and what byte ranges were altered."
msgstr ""

#: security/security_features.md:15
msgid "CAUTION: The client side encryption is not work currently for web browser and the cloud file browser of the desktop client. When you browsing encrypted libraries via the web browser and the cloud file browser, you will need to input the password. And the server will use the password to decrypt the \"file key\" for the library (see description below) and cache it in memory for 1 hour. The plain text password is never stored or cached on the server."
msgstr ""

#: security/security_features.md:17
msgid "Update: The client side encryption works on iOS client since version 2.1.6. The Android client doesn't support client side encryption yet. "
msgstr ""

#: security/security_features.md:20
# header
msgid "## How does an encrypted library work?"
msgstr ""

#: security/security_features.md:22
msgid "When you create an encrypted library, you'll provide a password for it. All the data in that library will be encrypted with the password before uploading to the server."
msgstr ""

#: security/security_features.md:24
msgid "The encryption procedure is:"
msgstr ""

#: security/security_features.md:26
# ordered list
msgid "1. Generate a 32-byte long cryptographically strong random number. This will be used as the file encryption key (\"file key\")."
msgstr ""

#: security/security_features.md:27
# ordered list
msgid "2. Encrypt the file key with the user provided password. We first use PBKDF2 algorithm (1000 iteratioins of SHA256) to derive a key/iv pair from the password, then use AES 256/CBC to encrypt the file key. The result is called the \"encrypted file key\". This encrypted file key will be sent to and stored on the server. When you need to access the data, you can decrypt the file key from the encrypted file key."
msgstr ""

#: security/security_features.md:28
# ordered list
msgid "3. All file data is encrypted by the file key with AES 256/CBC. We use PBKDF2 algorithm (1000 iterations of SHA256) to derive key/iv pair from the file key. After encryption, the data is uploaded to the server."
msgstr ""

#: security/security_features.md:30
msgid "The above encryption procedure can be executed on the desktop and the mobile client. The Seahub browser client uses a different encryption procedure that happens at the server. Because of this your password will be transferred to the server."
msgstr ""

#: security/security_features.md:32
msgid "When you sync an encrypted library to the desktop, the client needs to verify your password. When you create the library, a \"magic token\" is derived from the password and library id. This token is stored with the library on the server side. The client use this token to check whether your password is correct before you sync the library. The magic token is generated by PBKDF2 algorithm with 1000 iterations of SHA256 hash."
msgstr ""

#: security/security_features.md:34
msgid "For maximum security, the plain-text password won't be saved on the client side too. The client only saves the key/iv pair derived from the \"file key\", which is used to decrypt the data. So if you forget the password, you won't be able to recover it or access your data on the server."
msgstr ""

#: security/security_features.md:36
# header
msgid "## Why fileserver delivers every content to everybody knowing the content URL of an unshared private file?"
msgstr ""

#: security/security_features.md:38
msgid "When a file download link is clicked, a random URL is generated for user to access the file from fileserver. This url can only be access for once. After that, all access will be denied to the url. So even someone else happens to know about the url, he/she can't access it any more."
msgstr ""

#: security/security_features.md:40
# header
msgid "## How does Seafile store user login password?"
msgstr ""

#: security/security_features.md:42
msgid "User login passwords are stored in hash form only. Note that user login password is different from the passwords used in encrypted libraries. In the database, it's format is"
msgstr ""

#: security/security_features.md:44
# code block
msgid "```\n"
"PBKDF2SHA256$iterations$salt$hash\n"
"```"
msgstr ""

#: security/security_features.md:48
msgid "The record is divided into 4 parts by the $ sign."
msgstr ""

#: security/security_features.md:50
# unordered list
msgid "- The first part is the hash algorithm used. Currently we use PBKDF2 with SHA256. It can be changed to even stronger algorithm if needed."
msgstr ""

#: security/security_features.md:51
# unordered list
msgid "- The second part is the number of iterations of the hash algorithm"
msgstr ""

#: security/security_features.md:52
# unordered list
msgid "- The third part is the random salt used for generating the hash"
msgstr ""

#: security/security_features.md:53
# unordered list
msgid "- The fourth part is the final hash generated from the password"
msgstr ""

#: security/security_features.md:55
msgid "The calculate the hash,"
msgstr ""

#: security/security_features.md:57
# unordered list
msgid "- First, generate a 32-byte long cryptographically strong random number, use it as the salt."
msgstr ""

#: security/security_features.md:58
# unordered list
msgid "- Calculate the hash with `PBKDF2(password, salt, iterations)`. The number of iterations is currently 10000."
msgstr ""

